{"title":"TryPy 2 - Data Types, Indexing, Imports and Plotting","markdown":{"yaml":{"title":"TryPy 2 - Data Types, Indexing, Imports and Plotting"},"headingText":"Part 0. Setup Steps","containsRefs":false,"markdown":"\n\n\n- Create a repo on GitHub named `eds217-trypy-02`\n- Clone to create a version-controlled project\n- Create some subfolder infrastructure (docs, data)\n- Create a ~~new quarto in RStudio~~ new `.ipynb` file  called `eds217-trypy-02.ipynb` in VSCode. If working on your local machine, make sure to associate the notebook with the `eds217_2023` environment.\n\n\n## Part 1. Checking data types\n\n\n### Create some data, check the classes, index!\n\n#### Vectors, lists & data frames\n\nIn your notebook (or quarto) document: \n\n1. Create a list called `vec_1`containing the following: \n\n`[2, 5, 9, 10, 8, 12, 1, 0]`\n\n\n\nCheck the following for that list: \n\n- What is the type of the list? `type()`\n- Access the 3rd element and store as `vec_1_e3`\n- Access the 1st element and store as `vec_1_e1`\n- Access the 5th through 7th elements and store as `vec_1_e5to7`\n- Reassign each element in `vec_1` as a string and store the new list as `vec_1_char`. What does the output look like? \n\n2. Create a dictionary called `dict_1`\n\n`dict_1` should contained *named* elements, where `town = \"Santa Barbara`, `location = \"Rincon\"`, `swell = \"south\"\n\n- Take a look at what you've made\n- What is the type of dictionary values? `type()`\n- What is the length of dict_1?\n- Access the 'location' value and store as `dict_1_v2`\n\n3. Create a data frame in pandas\n\nWrite code to create a data frame called `df_1` that looks like this:\n\n(Note: translate the `R` code below into python... don't forget to `import pandas as pd`)\n```{r, echo = FALSE}\ndf_1 <- data.frame(\n    region = c(\"A\", \"B\", \"A\", \"D\"),\n    species = c(\"otter\", \"great white\", \"sea lion\", \"gray whale\"),\n    count = c(12, 2, 36, 6)\n    )\ndf_1\nmax_count <- max(df_1$count)\n```\n- Find the maximum value of the `count` column, store as `max_count`\n\n## Part 2. Wild data\n\n#### Set-up\n\n\n- The *first CSV* listed (`AS00601.csv`) take a look at it (outside of python is fine as a first step, e.g. you can open the CSV in Excel.)\n\n- Save the `AS00601.csv` in the `data` folder of your repo.\n\n#### Read in the data\n\n- Read in the data using `pd.read_csv()`, store as `mack_verts`\n\n- Look at what you've read in\n\n#### A bit of wrangling & exploring\n\n\n- In a new code chunk, practice accessing individual pieces of the data frame (there is no real functionality to this, but just to reinforce stuff we learned in our interactive session): \n\n  - Store the 5th value in column `\"WEIGHT\"` as `mc_wt_5`. Check by looking at your data frame to confirm.\n  - Store the 8th - 20th value in the `\"LENGTH1\"` column as `mc_length_8_20`. Check by looking at your data frame to confirm. \n  - Store everything in column SAMPLEDATE as a `pd.Series` called `mc_dates`\n\n#### Make a salamander subset\n\n- Create a subset that only contains observations for Pacific Giant Salamanders (species *Dicamptodon tenebrosus*, stored in `SPECIES` as `DITE`). Store the subset as `mc_salamanders`. \n\n*Hint:* use a logical operator to filter for the rows you want.\n\nFor example, the following code block creates a new dataframe `df_new` containing only the rows in `df_old` where the value of column named `ID` is equal to `Batman`.\n\n```{python}\n    df_new = df_old[df_old['ID'] == 'Batman']\n```\n\n#### Make a scatterplot of salamander length x weight\n\n- Create a scatterplot of LENGTH1 (snout-vent length in millimeters) versus WEIGHT (grams) for all salamanders in the subset you created above, `mc_salamanders`. Update axis labels, title, subtitle, and add a caption with the data source. Customize point color and size, possibly opacity, and the style. \n\n- Export your scatterplot as `salamander_size.png` to your figs folder using the `fig.savefig()` command.\n\n#### Make a cutthroat plot\n\n- Similar to above, make a subset called `mc_trout` that only contains observations for cutthroat trout (species \"ONCL\")\n\n*Note:* In the following, it is _way_ easier to make use of the [sns.relplot()](https://seaborn.pydata.org/tutorial/relational.html#showing-multiple-relationships-with-facets) command in the  `seaborn` library than matplotlib \n\n- Create a scatterplot of `\"LENGHTH1\"` by `\"WEIGHT\"` for all trout in the dataset\n- Customize so that the point color depends on *reach*\n    - `hue=\"REACH\"` in `sns.relplot()`\n- Facet your plot by creek reach \n    - `col=\"REACH\"` in `sns.relplot()`\n- store the output of `sns.relplot()` as `ax`\n- Update facet plot axis labels and title\n    - `ax.set_axis_labels(xlabel,ylabel)`\n    - `ax.fig.suptitle(title)`\n- Export your graph as `cutthroat_size.png` to the `figs` folder (`fig.savefig()`)\n","srcMarkdownNoYaml":"\n\n## Part 0. Setup Steps\n\n- Create a repo on GitHub named `eds217-trypy-02`\n- Clone to create a version-controlled project\n- Create some subfolder infrastructure (docs, data)\n- Create a ~~new quarto in RStudio~~ new `.ipynb` file  called `eds217-trypy-02.ipynb` in VSCode. If working on your local machine, make sure to associate the notebook with the `eds217_2023` environment.\n\n\n## Part 1. Checking data types\n\n\n### Create some data, check the classes, index!\n\n#### Vectors, lists & data frames\n\nIn your notebook (or quarto) document: \n\n1. Create a list called `vec_1`containing the following: \n\n`[2, 5, 9, 10, 8, 12, 1, 0]`\n\n\n\nCheck the following for that list: \n\n- What is the type of the list? `type()`\n- Access the 3rd element and store as `vec_1_e3`\n- Access the 1st element and store as `vec_1_e1`\n- Access the 5th through 7th elements and store as `vec_1_e5to7`\n- Reassign each element in `vec_1` as a string and store the new list as `vec_1_char`. What does the output look like? \n\n2. Create a dictionary called `dict_1`\n\n`dict_1` should contained *named* elements, where `town = \"Santa Barbara`, `location = \"Rincon\"`, `swell = \"south\"\n\n- Take a look at what you've made\n- What is the type of dictionary values? `type()`\n- What is the length of dict_1?\n- Access the 'location' value and store as `dict_1_v2`\n\n3. Create a data frame in pandas\n\nWrite code to create a data frame called `df_1` that looks like this:\n\n(Note: translate the `R` code below into python... don't forget to `import pandas as pd`)\n```{r, echo = FALSE}\ndf_1 <- data.frame(\n    region = c(\"A\", \"B\", \"A\", \"D\"),\n    species = c(\"otter\", \"great white\", \"sea lion\", \"gray whale\"),\n    count = c(12, 2, 36, 6)\n    )\ndf_1\nmax_count <- max(df_1$count)\n```\n- Find the maximum value of the `count` column, store as `max_count`\n\n## Part 2. Wild data\n\n#### Set-up\n\n\n- The *first CSV* listed (`AS00601.csv`) take a look at it (outside of python is fine as a first step, e.g. you can open the CSV in Excel.)\n\n- Save the `AS00601.csv` in the `data` folder of your repo.\n\n#### Read in the data\n\n- Read in the data using `pd.read_csv()`, store as `mack_verts`\n\n- Look at what you've read in\n\n#### A bit of wrangling & exploring\n\n\n- In a new code chunk, practice accessing individual pieces of the data frame (there is no real functionality to this, but just to reinforce stuff we learned in our interactive session): \n\n  - Store the 5th value in column `\"WEIGHT\"` as `mc_wt_5`. Check by looking at your data frame to confirm.\n  - Store the 8th - 20th value in the `\"LENGTH1\"` column as `mc_length_8_20`. Check by looking at your data frame to confirm. \n  - Store everything in column SAMPLEDATE as a `pd.Series` called `mc_dates`\n\n#### Make a salamander subset\n\n- Create a subset that only contains observations for Pacific Giant Salamanders (species *Dicamptodon tenebrosus*, stored in `SPECIES` as `DITE`). Store the subset as `mc_salamanders`. \n\n*Hint:* use a logical operator to filter for the rows you want.\n\nFor example, the following code block creates a new dataframe `df_new` containing only the rows in `df_old` where the value of column named `ID` is equal to `Batman`.\n\n```{python}\n    df_new = df_old[df_old['ID'] == 'Batman']\n```\n\n#### Make a scatterplot of salamander length x weight\n\n- Create a scatterplot of LENGTH1 (snout-vent length in millimeters) versus WEIGHT (grams) for all salamanders in the subset you created above, `mc_salamanders`. Update axis labels, title, subtitle, and add a caption with the data source. Customize point color and size, possibly opacity, and the style. \n\n- Export your scatterplot as `salamander_size.png` to your figs folder using the `fig.savefig()` command.\n\n#### Make a cutthroat plot\n\n- Similar to above, make a subset called `mc_trout` that only contains observations for cutthroat trout (species \"ONCL\")\n\n*Note:* In the following, it is _way_ easier to make use of the [sns.relplot()](https://seaborn.pydata.org/tutorial/relational.html#showing-multiple-relationships-with-facets) command in the  `seaborn` library than matplotlib \n\n- Create a scatterplot of `\"LENGHTH1\"` by `\"WEIGHT\"` for all trout in the dataset\n- Customize so that the point color depends on *reach*\n    - `hue=\"REACH\"` in `sns.relplot()`\n- Facet your plot by creek reach \n    - `col=\"REACH\"` in `sns.relplot()`\n- store the output of `sns.relplot()` as `ax`\n- Update facet plot axis labels and title\n    - `ax.set_axis_labels(xlabel,ylabel)`\n    - `ax.fig.suptitle(title)`\n- Export your graph as `cutthroat_size.png` to the `figs` folder (`fig.savefig()`)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../../header.html"],"output-file":"data_types_exercise 2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"TryPy 2 - Data Types, Indexing, Imports and Plotting"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}