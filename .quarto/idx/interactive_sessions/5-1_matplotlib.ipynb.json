{"title":"Session 5-1: Matplotlib üìà","markdown":{"yaml":{"title":"Session 5-1: Matplotlib üìà"},"headingText":"Instructions","containsRefs":false,"markdown":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](4-1_pandas.ipynb) | [üè† Course Home](../index.ipynb) | [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) |\n\n\n![mpl](./assets/mpl.svg)\n\nThere are extensive options for plotting in Python ‚Äì some favorites include statistical visualizations in [<span class=\"codeb\">Seaborn</span>](https://seaborn.pydata.org) and interactive plots for web applications in [<span class=\"codeb\">Bokeh</span>](https://docs.bokeh.org/en/latest/index.html). The original and fundamental library for visualizations in Python, however, is [<span class=\"codeb\">matplotlib</span>](https://matplotlib.org). \n\n<span class=\"code\">Matplotlib</span> was the first plotting library developed for Python and remains the most widely used library for data visualization in the Python community. Designed to resemble graphics in MATLAB, <span class=\"code\">matplotlib</span> is reminiscent of MATLAB in both appearance and functionality. As a result, it is not the easiest library to work with, and deviates from the object-oriented syntax we are familiar with in Python. \n\nThis session will serve as an introduction to plotting in Python using <span class=\"code\">matplotlib</span>. The nature of <span class=\"code\">matplotlib</span> ‚Äì and figure-making in general ‚Äì¬†is such that the easiest way to learn is by following examples. As such, this session is structured a bit differently than the others, so be sure to look carefully at the coded examples. Finally, the *best* way to learn advanced functions and find help with <span class=\"code\">matplotlib</span> is by exploring the examples in the [gallery](https://matplotlib.org/gallery/index.html).\n\n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead2\">\n    Session Topics\n</div>\n\n<div class=\"boxtext2\">\n<ul class=\"a\">\n    <li> üìå Introduction to <span class=\"codeb\">matplotlib.pyplot</span> </li>\n    <ul class=\"b\">\n        <li> Anatomy of a plot </li>\n    </ul>\n    <li> üìå Basic plotting </li>\n    <ul class=\"b\">\n        <li> Line plots using <code>plt.plot()</code> </li>\n        <li> Scatter plots using <code>plt.scatter()</code> </li>\n    </ul>\n    <li> üìå Keyword arguments </li>\n    <ul class=\"b\">\n        <li> Colors </li>\n        <li> Linestyles </li>\n        <li> Markers </li>\n        <li> Explicit definitions vs. shortcuts </li>\n    </ul>    \n    <li> üìå Axes settings </li>\n    <ul class=\"b\">\n        <li> Limits, labels, and ticks </li>\n        <li> Legends + titles </li>\n    </ul>\n    <li> üìå Subplots + multiple axes </li>\n    <ul class=\"b\">\n        <li> <span class=\"code\">Figure</span> vs. <span class=\"code\">Axes</span> methods </li>\n    </ul>\n    <li> üìå Working with real data </li>\n    \n    \n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n## Introduction to <span class=\"codeb\">matplotlib</span>\n\n<img src=\"./assets/matplotlib.svg\" alt=\"matplotlib\" width=\"500\"/>\n\nAs always, we will begin by importing the required libraries and packages. For plotting, itself, we will use a module of the <span class=\"code\">matplotlib</span> library called <span class=\"code\"> pyplot</span>. The <span class=\"code\"> pyplot</span> module consists of a collection of functions to display and edit figures. As you advance with Python and with data analysis, you may want to explore additional features of <span class=\"code\"> matplotlib</span>, but <span class=\"code\"> pyplot</span> will suit the vast majority of your plotting needs at this stage.\n\nThe standard import statement for <span class=\"code\"> matplotlib.pyplot </span> is:\n\n```python\nimport matplotlib.pyplot as plt\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n### Anatomy of a <span class=\"codeb\">matplotlib</span> plot\n\nThe core components of a <span class=\"code\">matplotlib</span> plot are the `Figure` and the `Axes`. The `Figure` is the overall window upon which all components are drawn. It serves as the blank container for plots, as well as other things, such as a legend, color bar, etc. You can (and will) create multiple independent figures, and each figure can hold multiple `Axes`. To the figure you will add `Axes`, the area where the data are actually plotted and where associated ticks, labels, etc. live. \n\nWhen working with a single plot, we will mostly deal with the `Figure` object and its routines, but we will see the `Axes` become important as we increase the complexity of our plots.\n\n<img src=\"./assets/mpl_plot.svg\" alt=\"plot\" width=\"700\"/>\n\n\n### Basic plotting\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nWe will start with the most basic plotting routines: `plt.plot()` and `plt.scatter()`. The first, `plt.plot()`, is used to generate a connected line plot (with optional markers for individual data points). `plt.scatter()`, as the name suggests, is used to generate a scatter plot.\n\nEach time you want to create a new figure, it is wise to first initialize a new instance of the `matplotlib.figure.Figure` class on which to plot our data. While this is not required to display the plot, if you subsequently plot additional data without a new `Figure` instance, all data will be plotted on the same figure. For example, let's generate a few functions, $y_{\\sin} = \\sin{(x)}$ and $y_{\\cos} = \\cos{(x)}$:\n\n```python\n# Generate a 1D array with 300 points between -5 and 5\nx = np.linspace(-5,5,300)\n# Generate sine wave\nysin = np.sin(x)\n# Generate cosine wave\nycos = np.cos(x)\n```\n\nWe can plot these on the same figure without instancing `plt.figure()` as follows:\n\n```python\n# Plot sine wave\nplt.plot(x,ysin)\n# Plot cosine wave\nplt.plot(x,ycos)\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nTo create multiple graphs in separate figure windows, however, you need to create new `Figure` instances as follows:\n\n```python\nfig = plt.figure()\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThis also allows you to access the `Figure` object later by refering to the variable `fig`. Thus, even when you want to plot all data on a single plot, it is best to always start by initializing a new `Figure`.\n\nTo generate a scatter plot instead of a line, we can use `plt.scatter()`:\n\n\n```python\n# Generate new x and y with fewer points for legibility\nxscat = np.linspace(-5,5,25)\nyscat = np.sin(xscat)\n\n# Plot sine function as scatter plot\nplt.scatter(xscat,yscat)\n```\n\n\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nYou can also create a scatter plot using `plt.plot()` with **keyword arguments**, which allow you to change things like the color, style, and size of the lines and markers. We will explore some of these **keyword arguments** in the next section.\n\n### Keyword arguments\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nIn addition to the required `x` and `y` parameters, there are a number of optional keyword arguments that can be passed to the <span class=\"code\">matplotlib</span> plotting functions. Here, we will consider a few of the most useful: `color`, `marker`, and `linestyle`.\n\n#### Colors\nThe first thing you might wish to control is the color of your plot. <span class=\"code\">Matplotlib</span> accepts several different color definitions to the `color` keyword argument, which is a feature of most plotting functions. \n\nFirst, colors can be passed as strings according to their **HTML/CSS names**. For example:\n\n```python\nplt.plot(x, y, 'green')\n```\n\n\nIn total, there are 140 colors allowed in HTML; their names are shown below.\n\n![colors](./assets/colors.png)\n\nAs you can see in the image above, the basic colors can also be defined by a single-letter shortcut. These are shown in the table below.\n\n\n| Letter code                    | Color name |\n| :----------------------------: | :--------- |\n| <span class=\"codeb\">'r'</span> | **<span style=\"color:red\">red</span>**         |\n| <span class=\"codeb\">'g'</span> | **<span style=\"color:green\">green</span>**     |\n| <span class=\"codeb\">'b'</span> | **<span style=\"color:blue\">blue</span>**       |\n| <span class=\"codeb\">'c'</span> | **<span style=\"color:cyan\">cyan</span>**       |\n| <span class=\"codeb\">'m'</span> | **<span style=\"color:magenta\">magenta</span>** |\n| <span class=\"codeb\">'y'</span> | **<span style=\"color:yellow\">yellow</span>**   |\n| <span class=\"codeb\">'k'</span> | **<span style=\"color:black\">black</span>**     |\n| <span class=\"codeb\">'w'</span> | **<span style=\"color:black\">white</span>**     |\n\n\nAnother way of specifying colors is to use an **RGB(A) tuple**, where the brightness of each channel (R, G, or B, which correspond to *red*, *green*, and *blue*) is given as a float between 0 and 1. An optional fourth value, A or *alpha*, value can be passed to specify the opacity of the line or marker.\n\n```python\nplt.plot(x, y, color=(0.2,0.7,1.0))\n```\n\nA **grayscale** value can be used by passing a number between 0 and 1 as a string. In this representation, `'0.0'` corresponds to black and `'1.0'` corresponds to white. \n\n```python\nplt.plot(x, y, color='0.25')\n```\n\nMy personal favorite way to define colors is to use <a href=\"https://www.color-hex.com/color-names.html\"> <span style=\"color:black;font-weight:bold\">color hex codes</span></a>, which represent colors as hexadecimals ranging from 0 to FF. Color hex codes consist of a hash character `#` followed by six hex values (e.g. `#AFD645`). Hex codes must be passed as strings (e.g. `'#AFD645'`) in <span class=\"code\">matplotlib</span> and are perhaps the most flexible way to select colors.\n\n```python\nplt.plot(x, y, color='#C6E2FF')\n```\n\nIn the cell below, five functions are plotted in different colors, each specified by a different definition.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Linestyles\n\nUsing the `linestyle` keyword argument, you can change the style of the line plotted using `plt.plot()`. These can be specified either by their name or a shortcut. A few of the style options (and their <span class=\"code\">matplotlib</span> shortcuts) are shown in the table below. To see a full list of `linestyle` options, see the [docs](https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/linestyles.html).\n\n| Short code | Line style |\n| :--------: | :--------- |\n| **<span class=\"code\">'-'</span>**  | <span class=\"code\">solid</span>   |\n| **<span class=\"code\">'--'</span>** | <span class=\"code\">dashed</span>  |\n| **<span class=\"code\">':'</span>**  | <span class=\"code\">dotted</span>  |\n| **<span class=\"code\">'-.'</span>** | <span class=\"code\">dashdot</span> |\n\n\nAs we've already seen, the default `linestyle` is solid. The syntax for changing a line's style is:\n\n```python\nplt.plot(x, y, linestyle='dashed')\n```\n\nor, more commonly:\n\n```python\nplt.plot(x, y, linestyle='--')\n```\n\nLet's adjust the style of our waveform plot using the `linestyle` keyword argument.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Markers\n\nMarkers can be used in `plt.plot()` and `plt.scatter()`. There are several [available markers](https://matplotlib.org/api/markers_api.html#module-matplotlib.markers) in <span class=\"code\">matplotlib</span>, and you can also define your own. A few of the most useful are shown in the table below. \n\n| Marker code | Symbol | Description |\n| :---------: | :----: | :---------- |\n| **<span class=\"code\">'o'</span>** | &#x25CF;   | circle   |\n| **<span class=\"code\">'.'</span>** | **&sdot;** | point    |\n| **<span class=\"code\">'*'</span>** | &#x2605;   | star     |\n| **<span class=\"code\">'+'</span>** | $+$        | plus     |\n| **<span class=\"code\">'x'</span>** | $\\times$   | x        |\n| **<span class=\"code\">'^'</span>** | &#x25B2;   | triangle |\n| **<span class=\"code\">'s'</span>** | &#x25FC;   | square   |\n\nNote that unlike `color` and `linestyle`, the `marker` keyword argument only accepts a code to specify the marker style.\n\n```python\nplt.scatter(x, y, marker='+')\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nUsing the `marker` keyword argument with the `plt.plot()` function creates a connected line plot, where the data points are designated by markers and connected by lines.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Explicit definitions vs. shortcuts\n\nUp to now, we have used **explicit definitions** to specify keyword arguments. While this is generally preferable, <span class=\"code\">matplotlib</span> does allow `color`, `linestyle`, and `marker` codes to be combined into a single, non-keyword argument. For example:\n\n```python\n# Plot a dashed red line\nplt.plot(x, y, 'r--')\n```\n\nSeveral examples are presented in the cell below.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAs you can see, the downside of this method is that you are limited to the eight colors that have a single-letter code. To use other colors, you must use explicitly defined keyword arguments.\n\nIn addition to those we explored in this section, other useful keyword arguments include `linewidth` and `markersize`, which do exactly what you'd expect them to do. For a full list of keyword arguments (you should know what's coming by now), see the [docs](https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot).\n\n### Axes settings\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nNext, we will explore how to scale and annotate a plot using axes routines that control what goes on around the edges of the plot. \n\n#### Limits, labels, + ticks\n\nBy default, <span class=\"code\">matplotlib</span> will attempt to determine **x- and y-axis limits**, which usually work pretty well. Sometimes, however, it is useful to have finer control. The simplest way to adjust the display limits is to use the `plt.xlim()` and `plt.ylim()` methods:\n\n```python\n# Set axis limits\nplt.xlim(xmin, xmax)\nplt.ylim(ymin, ymax)\n```\n\nIn the example below, adjust the numbers (these can be `int` or `float` values) to see how the plot changes.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nYou may also find it useful to adjust the **ticks** and/or **tick labels** that <span class=\"code\">matplotlib </span> displays by default. The `plt.xticks()` and `plt.yticks()` methods allow you to control the locations of both the ticks and the labels on the x- and y-axes, respectively. Both methods accept two list or array-like arguments, as well as optional keyword arguments. The first corresponds to the ticks, while the second controls the tick labels.\n\n```python\n# Set x-axis ticks at 0, 0.25, 0.5, 0.75, 1.0 with all labeled\nplt.xticks([0,0.25,0.5,0.75,1.0])\n# Set y-axis ticks from 0 to 100 with ticks on 10s and labels on 20s\nplt.yticks(np.arange(0,101,10),['0','','20','','40','','60','','80','','100'])\n```\n\nIf the labels are not specified, all ticks will be labeled accordingly. To only label certain ticks, you must pass a list with empty strings in the location of the ticks you wish to leave unlabeled (or the ticks will be labeled in order).\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAs with any plot, it is imperative to include **x- and y-axis labels**. This can be done by passing strings to the `plt.xlabel()` and `plt.ylabel()` methods:\n\n```python\n# Set axis labels\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\n```\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nA nice feature about <span class=\"code\">matplotlib</span> is that it supports TeX formatting for [mathematical expressions](https://matplotlib.org/tutorials/text/mathtext.html). This is quite useful for displaying equations, exponents, units, and other mathematical operators. The syntax for TeX expressions is `'r$TeX expression here$'`. For example, we can display the axis labels as $x$ and $\\sin{(x)}$ as follows:\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Legends + titles\n\nAdding a **title** to your plot is analogous to labeling the x- and y-axes. The `plt.title()` method allows you to set the title of your plot by passing a string:\n\n```python\nplt.title('Title')\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nWhen multiple datasets are plotted on the same axes it is often useful to include a **legend** that labels each line or set of points. <span class=\"code\">Matplotlib</span> has a quick way of displaying a legend using the `plt.legend()` method. There are multiple ways of specifying the label for each dataset; I prefer to pass a list of strings to `plt.legend()`:\n\n```python\n# Plot data\nplt.plot(x1, y1)\nplt.plot(x2, y2)\n\n# Legend\nplt.legend(labels=['Data1', 'Data2'])\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAnother way of setting the data labels is to use the `label` keyword argument in the `plt.plot()` (or `plt.scatter()`) function:\n\n```python\n# Plot data\nplt.plot(x1, y1, label='Data1')\nplt.plot(x2, y2, label='Data2')\n\n# Legend\nplt.legend()\n```\n\nNote that you must still run `plt.legend()` to display the legend.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n### Subplots + multiple axes\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nNow that we've established the basics of plotting in <span class=\"code\">matplotlib</span>, let's get a bit more complicated. Oftentimes, you may want to plot data on multiple axes within the same figure. The easiest way to do this in <span class=\"code\">matplotlib</span> is to use the `plt.subplot()` function, which takes three non-keyword arguments: `nrows`, `ncols`, and `index`. `nrows` and `ncols` correspond to the total number of rows and columns of the entire figure, while `index` refers to the index position of the current axes. Importantly (and annoyingly), the `index` for subplots starts in the upper left corner at **1** (not 0)!. The image below contains a few examples of how <span class=\"code\">matplotlib</span> arranges subplots.\n\n\n<img src=\"./assets/mpl_subplot.svg\" alt=\"subplot\" width=\"600\"/>\n\nThe most explicit way of adding subplots is to use the `fig.add_subplot()` command to initialize new axes as variables:\n\n```python\n# Initialize empty figure\nfig = plt.figure()\n# Add four axes\nax1 = fig.add_subplot(2,2,1)\nax2 = fig.add_subplot(2,2,2)\nax3 = fig.add_subplot(2,2,3)\nax4 = fig.add_subplot(2,2,4)\n```\n\nThis allows you to access each `Axes` object later to plot data and adjust the axes parameters.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nTo plot data, we use `ax.plot()` or `ax.scatter()`. These methods are analogous to `plt.plot()` and `plt.scatter()` for acting on the `Axes`, rather than the `Figure` object.\n\n```python\n# Plot data\nax1.plot(x, y)\nax2.plot(x, y)\nax3.plot(x, y)\nax4.plot(x, y)\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### `Figure` vs. `Axes` methods\n\nPerhaps the trickiest part about subplots ‚Äì and `Axes` methods in general ‚Äì¬†is adjusting the axes settings. While most `Figure` functions translate directly `Axes` methods (e.g. `plt.plot()` $\\rightarrow$ `ax.plot()`, `plt.legend()` $\\rightarrow$ `ax.legend()`), commands to set limits, ticks, labels, and titles are slightly modified. Some important `Figure` methods and their `Axes` counterparts are shown in the table below.\n\n| <span class=\"codeb\">Figure</span> command | <span class=\"codeb\">Axes</span> command    |\n| :--------------------------------------   | :----------------------------------------- |\n| <span class=\"codeb\">plt.xlabel()</span>   | <span class=\"codeb\">ax.set_xlabel()</span> |\n| <span class=\"codeb\">plt.ylabel()</span>   | <span class=\"codeb\">ax.set_ylabel()</span> |\n| <span class=\"codeb\">plt.xlim()</span>     | <span class=\"codeb\">ax.set_xlim()</span>   |\n| <span class=\"codeb\">plt.ylim()</span>     | <span class=\"codeb\">ax.set_ylim()</span>   |\n| <span class=\"codeb\">plt.xticks()</span>   | <span class=\"codeb\">ax.set_xticks()</span> |\n| <span class=\"codeb\">plt.yticks()</span>   | <span class=\"codeb\">ax.set_yticks()</span> |\n\nThese are different primarily because the `Figure` functions are inherited from MATLAB, while the `Axes` functions are object-oriented. *Generally*, the arguments are similar ‚Äì if not identical ‚Äì¬†between the two.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nIn the last example, we included a command, `plt.tight_layout()`, which automatically formats the figure to fit the window. This is most useful when using an IDE with a separate plotting window, rather than with in-line plots like those in a notebook. To get a sense of what `plt.tight_layout()` does, try re-running the above cell with this command commented out.\n\nTo go beyond regularly gridded subplots and create subplots that span multiple rows and/or columns, check out [`GridSpec`](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.gridspec.GridSpec.html#matplotlib.gridspec.GridSpec).\n\n### Working with real data\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nAs we learned in the previous exercise, working with real-world data usually complicates things, and plotting is no exception. In particular, working with time series can get a bit messy. Let's take a look at our BSRN data as an example.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nNow that we've imported our data, let's make a quick plot of incoming shortwave radiation over time.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThe x-axis looks rather messy because the tick labels are *timestamps*, which are, by nature, very long. Luckily, <span class=\"code\">matplotlib</span> has a module called <span class=\"code\">dates</span> for dealing with `datetime` objects. \n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nWithout going into too much detail, we can use some of the more advanced `Axes` settings to format and rotate the tick labels such that they no longer overlap, and we can use <span class=\"code\">matplotlib.dates</span> to format the timestamps. In short, we will use the `mdates.DateFormatter()` function to format the timestamps according to [C formatting codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior). \n\nThe following example demonstrates this, and includes a good code chunk for formatting timestamps to add to your repertoire. It is important to note that the formatting methods employed here are `Axes` methods, which means that we must operate on an `Axes` object, rather than the `Figure`.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n","srcMarkdownNoYaml":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](4-1_pandas.ipynb) | [üè† Course Home](../index.ipynb) | [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) |\n\n\n![mpl](./assets/mpl.svg)\n\nThere are extensive options for plotting in Python ‚Äì some favorites include statistical visualizations in [<span class=\"codeb\">Seaborn</span>](https://seaborn.pydata.org) and interactive plots for web applications in [<span class=\"codeb\">Bokeh</span>](https://docs.bokeh.org/en/latest/index.html). The original and fundamental library for visualizations in Python, however, is [<span class=\"codeb\">matplotlib</span>](https://matplotlib.org). \n\n<span class=\"code\">Matplotlib</span> was the first plotting library developed for Python and remains the most widely used library for data visualization in the Python community. Designed to resemble graphics in MATLAB, <span class=\"code\">matplotlib</span> is reminiscent of MATLAB in both appearance and functionality. As a result, it is not the easiest library to work with, and deviates from the object-oriented syntax we are familiar with in Python. \n\nThis session will serve as an introduction to plotting in Python using <span class=\"code\">matplotlib</span>. The nature of <span class=\"code\">matplotlib</span> ‚Äì and figure-making in general ‚Äì¬†is such that the easiest way to learn is by following examples. As such, this session is structured a bit differently than the others, so be sure to look carefully at the coded examples. Finally, the *best* way to learn advanced functions and find help with <span class=\"code\">matplotlib</span> is by exploring the examples in the [gallery](https://matplotlib.org/gallery/index.html).\n\n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead2\">\n    Session Topics\n</div>\n\n<div class=\"boxtext2\">\n<ul class=\"a\">\n    <li> üìå Introduction to <span class=\"codeb\">matplotlib.pyplot</span> </li>\n    <ul class=\"b\">\n        <li> Anatomy of a plot </li>\n    </ul>\n    <li> üìå Basic plotting </li>\n    <ul class=\"b\">\n        <li> Line plots using <code>plt.plot()</code> </li>\n        <li> Scatter plots using <code>plt.scatter()</code> </li>\n    </ul>\n    <li> üìå Keyword arguments </li>\n    <ul class=\"b\">\n        <li> Colors </li>\n        <li> Linestyles </li>\n        <li> Markers </li>\n        <li> Explicit definitions vs. shortcuts </li>\n    </ul>    \n    <li> üìå Axes settings </li>\n    <ul class=\"b\">\n        <li> Limits, labels, and ticks </li>\n        <li> Legends + titles </li>\n    </ul>\n    <li> üìå Subplots + multiple axes </li>\n    <ul class=\"b\">\n        <li> <span class=\"code\">Figure</span> vs. <span class=\"code\">Axes</span> methods </li>\n    </ul>\n    <li> üìå Working with real data </li>\n    \n    \n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\n### Instructions\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n## Introduction to <span class=\"codeb\">matplotlib</span>\n\n<img src=\"./assets/matplotlib.svg\" alt=\"matplotlib\" width=\"500\"/>\n\nAs always, we will begin by importing the required libraries and packages. For plotting, itself, we will use a module of the <span class=\"code\">matplotlib</span> library called <span class=\"code\"> pyplot</span>. The <span class=\"code\"> pyplot</span> module consists of a collection of functions to display and edit figures. As you advance with Python and with data analysis, you may want to explore additional features of <span class=\"code\"> matplotlib</span>, but <span class=\"code\"> pyplot</span> will suit the vast majority of your plotting needs at this stage.\n\nThe standard import statement for <span class=\"code\"> matplotlib.pyplot </span> is:\n\n```python\nimport matplotlib.pyplot as plt\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n### Anatomy of a <span class=\"codeb\">matplotlib</span> plot\n\nThe core components of a <span class=\"code\">matplotlib</span> plot are the `Figure` and the `Axes`. The `Figure` is the overall window upon which all components are drawn. It serves as the blank container for plots, as well as other things, such as a legend, color bar, etc. You can (and will) create multiple independent figures, and each figure can hold multiple `Axes`. To the figure you will add `Axes`, the area where the data are actually plotted and where associated ticks, labels, etc. live. \n\nWhen working with a single plot, we will mostly deal with the `Figure` object and its routines, but we will see the `Axes` become important as we increase the complexity of our plots.\n\n<img src=\"./assets/mpl_plot.svg\" alt=\"plot\" width=\"700\"/>\n\n\n### Basic plotting\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nWe will start with the most basic plotting routines: `plt.plot()` and `plt.scatter()`. The first, `plt.plot()`, is used to generate a connected line plot (with optional markers for individual data points). `plt.scatter()`, as the name suggests, is used to generate a scatter plot.\n\nEach time you want to create a new figure, it is wise to first initialize a new instance of the `matplotlib.figure.Figure` class on which to plot our data. While this is not required to display the plot, if you subsequently plot additional data without a new `Figure` instance, all data will be plotted on the same figure. For example, let's generate a few functions, $y_{\\sin} = \\sin{(x)}$ and $y_{\\cos} = \\cos{(x)}$:\n\n```python\n# Generate a 1D array with 300 points between -5 and 5\nx = np.linspace(-5,5,300)\n# Generate sine wave\nysin = np.sin(x)\n# Generate cosine wave\nycos = np.cos(x)\n```\n\nWe can plot these on the same figure without instancing `plt.figure()` as follows:\n\n```python\n# Plot sine wave\nplt.plot(x,ysin)\n# Plot cosine wave\nplt.plot(x,ycos)\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nTo create multiple graphs in separate figure windows, however, you need to create new `Figure` instances as follows:\n\n```python\nfig = plt.figure()\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThis also allows you to access the `Figure` object later by refering to the variable `fig`. Thus, even when you want to plot all data on a single plot, it is best to always start by initializing a new `Figure`.\n\nTo generate a scatter plot instead of a line, we can use `plt.scatter()`:\n\n\n```python\n# Generate new x and y with fewer points for legibility\nxscat = np.linspace(-5,5,25)\nyscat = np.sin(xscat)\n\n# Plot sine function as scatter plot\nplt.scatter(xscat,yscat)\n```\n\n\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nYou can also create a scatter plot using `plt.plot()` with **keyword arguments**, which allow you to change things like the color, style, and size of the lines and markers. We will explore some of these **keyword arguments** in the next section.\n\n### Keyword arguments\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nIn addition to the required `x` and `y` parameters, there are a number of optional keyword arguments that can be passed to the <span class=\"code\">matplotlib</span> plotting functions. Here, we will consider a few of the most useful: `color`, `marker`, and `linestyle`.\n\n#### Colors\nThe first thing you might wish to control is the color of your plot. <span class=\"code\">Matplotlib</span> accepts several different color definitions to the `color` keyword argument, which is a feature of most plotting functions. \n\nFirst, colors can be passed as strings according to their **HTML/CSS names**. For example:\n\n```python\nplt.plot(x, y, 'green')\n```\n\n\nIn total, there are 140 colors allowed in HTML; their names are shown below.\n\n![colors](./assets/colors.png)\n\nAs you can see in the image above, the basic colors can also be defined by a single-letter shortcut. These are shown in the table below.\n\n\n| Letter code                    | Color name |\n| :----------------------------: | :--------- |\n| <span class=\"codeb\">'r'</span> | **<span style=\"color:red\">red</span>**         |\n| <span class=\"codeb\">'g'</span> | **<span style=\"color:green\">green</span>**     |\n| <span class=\"codeb\">'b'</span> | **<span style=\"color:blue\">blue</span>**       |\n| <span class=\"codeb\">'c'</span> | **<span style=\"color:cyan\">cyan</span>**       |\n| <span class=\"codeb\">'m'</span> | **<span style=\"color:magenta\">magenta</span>** |\n| <span class=\"codeb\">'y'</span> | **<span style=\"color:yellow\">yellow</span>**   |\n| <span class=\"codeb\">'k'</span> | **<span style=\"color:black\">black</span>**     |\n| <span class=\"codeb\">'w'</span> | **<span style=\"color:black\">white</span>**     |\n\n\nAnother way of specifying colors is to use an **RGB(A) tuple**, where the brightness of each channel (R, G, or B, which correspond to *red*, *green*, and *blue*) is given as a float between 0 and 1. An optional fourth value, A or *alpha*, value can be passed to specify the opacity of the line or marker.\n\n```python\nplt.plot(x, y, color=(0.2,0.7,1.0))\n```\n\nA **grayscale** value can be used by passing a number between 0 and 1 as a string. In this representation, `'0.0'` corresponds to black and `'1.0'` corresponds to white. \n\n```python\nplt.plot(x, y, color='0.25')\n```\n\nMy personal favorite way to define colors is to use <a href=\"https://www.color-hex.com/color-names.html\"> <span style=\"color:black;font-weight:bold\">color hex codes</span></a>, which represent colors as hexadecimals ranging from 0 to FF. Color hex codes consist of a hash character `#` followed by six hex values (e.g. `#AFD645`). Hex codes must be passed as strings (e.g. `'#AFD645'`) in <span class=\"code\">matplotlib</span> and are perhaps the most flexible way to select colors.\n\n```python\nplt.plot(x, y, color='#C6E2FF')\n```\n\nIn the cell below, five functions are plotted in different colors, each specified by a different definition.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Linestyles\n\nUsing the `linestyle` keyword argument, you can change the style of the line plotted using `plt.plot()`. These can be specified either by their name or a shortcut. A few of the style options (and their <span class=\"code\">matplotlib</span> shortcuts) are shown in the table below. To see a full list of `linestyle` options, see the [docs](https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/linestyles.html).\n\n| Short code | Line style |\n| :--------: | :--------- |\n| **<span class=\"code\">'-'</span>**  | <span class=\"code\">solid</span>   |\n| **<span class=\"code\">'--'</span>** | <span class=\"code\">dashed</span>  |\n| **<span class=\"code\">':'</span>**  | <span class=\"code\">dotted</span>  |\n| **<span class=\"code\">'-.'</span>** | <span class=\"code\">dashdot</span> |\n\n\nAs we've already seen, the default `linestyle` is solid. The syntax for changing a line's style is:\n\n```python\nplt.plot(x, y, linestyle='dashed')\n```\n\nor, more commonly:\n\n```python\nplt.plot(x, y, linestyle='--')\n```\n\nLet's adjust the style of our waveform plot using the `linestyle` keyword argument.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Markers\n\nMarkers can be used in `plt.plot()` and `plt.scatter()`. There are several [available markers](https://matplotlib.org/api/markers_api.html#module-matplotlib.markers) in <span class=\"code\">matplotlib</span>, and you can also define your own. A few of the most useful are shown in the table below. \n\n| Marker code | Symbol | Description |\n| :---------: | :----: | :---------- |\n| **<span class=\"code\">'o'</span>** | &#x25CF;   | circle   |\n| **<span class=\"code\">'.'</span>** | **&sdot;** | point    |\n| **<span class=\"code\">'*'</span>** | &#x2605;   | star     |\n| **<span class=\"code\">'+'</span>** | $+$        | plus     |\n| **<span class=\"code\">'x'</span>** | $\\times$   | x        |\n| **<span class=\"code\">'^'</span>** | &#x25B2;   | triangle |\n| **<span class=\"code\">'s'</span>** | &#x25FC;   | square   |\n\nNote that unlike `color` and `linestyle`, the `marker` keyword argument only accepts a code to specify the marker style.\n\n```python\nplt.scatter(x, y, marker='+')\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nUsing the `marker` keyword argument with the `plt.plot()` function creates a connected line plot, where the data points are designated by markers and connected by lines.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Explicit definitions vs. shortcuts\n\nUp to now, we have used **explicit definitions** to specify keyword arguments. While this is generally preferable, <span class=\"code\">matplotlib</span> does allow `color`, `linestyle`, and `marker` codes to be combined into a single, non-keyword argument. For example:\n\n```python\n# Plot a dashed red line\nplt.plot(x, y, 'r--')\n```\n\nSeveral examples are presented in the cell below.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAs you can see, the downside of this method is that you are limited to the eight colors that have a single-letter code. To use other colors, you must use explicitly defined keyword arguments.\n\nIn addition to those we explored in this section, other useful keyword arguments include `linewidth` and `markersize`, which do exactly what you'd expect them to do. For a full list of keyword arguments (you should know what's coming by now), see the [docs](https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot).\n\n### Axes settings\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nNext, we will explore how to scale and annotate a plot using axes routines that control what goes on around the edges of the plot. \n\n#### Limits, labels, + ticks\n\nBy default, <span class=\"code\">matplotlib</span> will attempt to determine **x- and y-axis limits**, which usually work pretty well. Sometimes, however, it is useful to have finer control. The simplest way to adjust the display limits is to use the `plt.xlim()` and `plt.ylim()` methods:\n\n```python\n# Set axis limits\nplt.xlim(xmin, xmax)\nplt.ylim(ymin, ymax)\n```\n\nIn the example below, adjust the numbers (these can be `int` or `float` values) to see how the plot changes.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nYou may also find it useful to adjust the **ticks** and/or **tick labels** that <span class=\"code\">matplotlib </span> displays by default. The `plt.xticks()` and `plt.yticks()` methods allow you to control the locations of both the ticks and the labels on the x- and y-axes, respectively. Both methods accept two list or array-like arguments, as well as optional keyword arguments. The first corresponds to the ticks, while the second controls the tick labels.\n\n```python\n# Set x-axis ticks at 0, 0.25, 0.5, 0.75, 1.0 with all labeled\nplt.xticks([0,0.25,0.5,0.75,1.0])\n# Set y-axis ticks from 0 to 100 with ticks on 10s and labels on 20s\nplt.yticks(np.arange(0,101,10),['0','','20','','40','','60','','80','','100'])\n```\n\nIf the labels are not specified, all ticks will be labeled accordingly. To only label certain ticks, you must pass a list with empty strings in the location of the ticks you wish to leave unlabeled (or the ticks will be labeled in order).\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAs with any plot, it is imperative to include **x- and y-axis labels**. This can be done by passing strings to the `plt.xlabel()` and `plt.ylabel()` methods:\n\n```python\n# Set axis labels\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\n```\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nA nice feature about <span class=\"code\">matplotlib</span> is that it supports TeX formatting for [mathematical expressions](https://matplotlib.org/tutorials/text/mathtext.html). This is quite useful for displaying equations, exponents, units, and other mathematical operators. The syntax for TeX expressions is `'r$TeX expression here$'`. For example, we can display the axis labels as $x$ and $\\sin{(x)}$ as follows:\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Legends + titles\n\nAdding a **title** to your plot is analogous to labeling the x- and y-axes. The `plt.title()` method allows you to set the title of your plot by passing a string:\n\n```python\nplt.title('Title')\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nWhen multiple datasets are plotted on the same axes it is often useful to include a **legend** that labels each line or set of points. <span class=\"code\">Matplotlib</span> has a quick way of displaying a legend using the `plt.legend()` method. There are multiple ways of specifying the label for each dataset; I prefer to pass a list of strings to `plt.legend()`:\n\n```python\n# Plot data\nplt.plot(x1, y1)\nplt.plot(x2, y2)\n\n# Legend\nplt.legend(labels=['Data1', 'Data2'])\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAnother way of setting the data labels is to use the `label` keyword argument in the `plt.plot()` (or `plt.scatter()`) function:\n\n```python\n# Plot data\nplt.plot(x1, y1, label='Data1')\nplt.plot(x2, y2, label='Data2')\n\n# Legend\nplt.legend()\n```\n\nNote that you must still run `plt.legend()` to display the legend.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n### Subplots + multiple axes\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nNow that we've established the basics of plotting in <span class=\"code\">matplotlib</span>, let's get a bit more complicated. Oftentimes, you may want to plot data on multiple axes within the same figure. The easiest way to do this in <span class=\"code\">matplotlib</span> is to use the `plt.subplot()` function, which takes three non-keyword arguments: `nrows`, `ncols`, and `index`. `nrows` and `ncols` correspond to the total number of rows and columns of the entire figure, while `index` refers to the index position of the current axes. Importantly (and annoyingly), the `index` for subplots starts in the upper left corner at **1** (not 0)!. The image below contains a few examples of how <span class=\"code\">matplotlib</span> arranges subplots.\n\n\n<img src=\"./assets/mpl_subplot.svg\" alt=\"subplot\" width=\"600\"/>\n\nThe most explicit way of adding subplots is to use the `fig.add_subplot()` command to initialize new axes as variables:\n\n```python\n# Initialize empty figure\nfig = plt.figure()\n# Add four axes\nax1 = fig.add_subplot(2,2,1)\nax2 = fig.add_subplot(2,2,2)\nax3 = fig.add_subplot(2,2,3)\nax4 = fig.add_subplot(2,2,4)\n```\n\nThis allows you to access each `Axes` object later to plot data and adjust the axes parameters.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nTo plot data, we use `ax.plot()` or `ax.scatter()`. These methods are analogous to `plt.plot()` and `plt.scatter()` for acting on the `Axes`, rather than the `Figure` object.\n\n```python\n# Plot data\nax1.plot(x, y)\nax2.plot(x, y)\nax3.plot(x, y)\nax4.plot(x, y)\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### `Figure` vs. `Axes` methods\n\nPerhaps the trickiest part about subplots ‚Äì and `Axes` methods in general ‚Äì¬†is adjusting the axes settings. While most `Figure` functions translate directly `Axes` methods (e.g. `plt.plot()` $\\rightarrow$ `ax.plot()`, `plt.legend()` $\\rightarrow$ `ax.legend()`), commands to set limits, ticks, labels, and titles are slightly modified. Some important `Figure` methods and their `Axes` counterparts are shown in the table below.\n\n| <span class=\"codeb\">Figure</span> command | <span class=\"codeb\">Axes</span> command    |\n| :--------------------------------------   | :----------------------------------------- |\n| <span class=\"codeb\">plt.xlabel()</span>   | <span class=\"codeb\">ax.set_xlabel()</span> |\n| <span class=\"codeb\">plt.ylabel()</span>   | <span class=\"codeb\">ax.set_ylabel()</span> |\n| <span class=\"codeb\">plt.xlim()</span>     | <span class=\"codeb\">ax.set_xlim()</span>   |\n| <span class=\"codeb\">plt.ylim()</span>     | <span class=\"codeb\">ax.set_ylim()</span>   |\n| <span class=\"codeb\">plt.xticks()</span>   | <span class=\"codeb\">ax.set_xticks()</span> |\n| <span class=\"codeb\">plt.yticks()</span>   | <span class=\"codeb\">ax.set_yticks()</span> |\n\nThese are different primarily because the `Figure` functions are inherited from MATLAB, while the `Axes` functions are object-oriented. *Generally*, the arguments are similar ‚Äì if not identical ‚Äì¬†between the two.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nIn the last example, we included a command, `plt.tight_layout()`, which automatically formats the figure to fit the window. This is most useful when using an IDE with a separate plotting window, rather than with in-line plots like those in a notebook. To get a sense of what `plt.tight_layout()` does, try re-running the above cell with this command commented out.\n\nTo go beyond regularly gridded subplots and create subplots that span multiple rows and/or columns, check out [`GridSpec`](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.gridspec.GridSpec.html#matplotlib.gridspec.GridSpec).\n\n### Working with real data\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\nAs we learned in the previous exercise, working with real-world data usually complicates things, and plotting is no exception. In particular, working with time series can get a bit messy. Let's take a look at our BSRN data as an example.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nNow that we've imported our data, let's make a quick plot of incoming shortwave radiation over time.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThe x-axis looks rather messy because the tick labels are *timestamps*, which are, by nature, very long. Luckily, <span class=\"code\">matplotlib</span> has a module called <span class=\"code\">dates</span> for dealing with `datetime` objects. \n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nWithout going into too much detail, we can use some of the more advanced `Axes` settings to format and rotate the tick labels such that they no longer overlap, and we can use <span class=\"code\">matplotlib.dates</span> to format the timestamps. In short, we will use the `mdates.DateFormatter()` function to format the timestamps according to [C formatting codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior). \n\nThe following example demonstrates this, and includes a good code chunk for formatting timestamps to add to your repertoire. It is important to note that the formatting methods employed here are `Axes` methods, which means that we must operate on an `Axes` object, rather than the `Figure`.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"5-1_matplotlib.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Session 5-1: Matplotlib üìà"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}