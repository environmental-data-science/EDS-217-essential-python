{"title":"Session 2-1: Control Flow Statements","markdown":{"yaml":{"title":"Session 2-1: Control Flow Statements"},"headingText":"Instructions","containsRefs":false,"markdown":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](1-2_lists.ipynb) | [üè† Course Home](../index.ipynb) |  [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [‚û°Ô∏è Next Session](2-2_structured_data.ipynb) |\n\n\n\n![control.jpeg](attachment:control.jpeg)\n\nThe **control flow** of a program refers to the order in which its code is executed. In Python, control flow is regulated by conditional statements, loops, and functions. This session will cover `if` statements, `for` loops, and `while` loops; functions will be covered in a later session.\n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session 1-3 Control Flow Statements\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> üìå Conditionals: <code>if</code> statements </li>\n    <ul class=\"b\">\n        <li> Basic <code>if</code> statements </li>\n        <li> Evaluating multiple conditions with <code>if... elif... else</code> </li>\n        <li> Operators: <code>or</code>, <code>and</code>, <code>in</code> </li>\n        <li> Nested <code>if</code> statements </li>\n    </ul>\n    <li> üìå <code>for</code> loops </li>\n    <ul class=\"b\">\n        <li> Generic counter <code>for</code> loops </li>\n        <li> Iterating through lists </li>\n        <li> Enumerating lists </li>\n        <li> Iterating through multiple lists at once </li>\n        <li> Nested <code>for</code> loops </li>\n    </ul>\n    <li> üìå <code>while</code> loops </li>     \n    <ul class=\"b\">\n    </ul>    \n    <li> üìå Escaping loops\n    <ul class=\"b\">\n        <li> <code>break</code> statements </li>\n        <li> <code>continue</code> statements  </li>\n    </ul>\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n### Conditionals\nWe've already learned about boolean operators for evaluating numerical conditions and returning `True` or `False`. `if` statements are code blocks used for similar simple comparisons, or for more complex or multiple comparisons. \n\nCode blocks are created by indenting (using a tab or 4 spaces) lines of code following an `if` statement. If the condition is met, the program will proceed through the indented code block. If not, it will move on to the next unindented line.\n\nExample if statement\n```python\nx = 1\nif x > 0:\n    print('x is a positive number.')\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> x is a positive number.</p> \n\n\n\n\n## ‚úèÔ∏è Try it.\nRun the following cell, changing the value of x to be negative or positive to demonstrate how the <code>if</code> statement works.\n\n\nThe `if` statement can be used in conjunction with the `else` command to instruct the program to do something different if the condition is not met.\n\n```python\ny = -3218\nif y > 0:\n    print('y is a positive number.')\nelse:\n    print('y is not a positive number.')\n```\n\n\n\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> y is not a positive number.</p> \n\n\nTo evaluate multiple conditions, add the `elif` command after the `if` statement. Infinite `elif` statements can be included.\n\n```python\ny = -3218\nif y > 0:\n    print('y is a positive number.')\nelif y == 0:\n    print('y = 0')\nelse:\n    print('y is a negative number.')\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> y is a negative number.</p> \n\n\n## ‚úèÔ∏è Try it.\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Operators </span> </h4>\n\nThere are several operators that can be used within `if` statements to evaluate more complex conditions. The `in` operator is used to check if an object exists within an iterable object container, such as a list.\n\n```python\naminoacids = ['histidine', 'isoleucine', 'leucine', 'lysine', 'methionine', \n              'phenylalanine', 'threonine', 'tryptophan', 'valine', 'alanine', \n              'arginine', 'asparagine', 'aspartate', 'cysteine', 'glutamate', \n              'glutamine', 'glycine', 'proline', 'serine', 'tyrosine']\n\norg_compound = 'cysteine'\n\nif org_compound in aminoacids:\n    print(org_compound.capitalize() + ' is an amino acid.' )\nelse:\n    print(org_compound.capitalize() + ' is not an amino acid.')\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> Cysteine is an amino acid.</p> \n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThe `and` and `or` operators can be used to build more complex `if` statements based on multiple expressions. The `and` operator is used to specify that multiple conditions must be satisfied.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThe `or` operator is used to write an `if` statement where one of multiple conditions must be met.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Nested <code>if</code> statements </span> </h4>\n\n`if` statements can build on one another to perform specific actions based on each condition by **nesting** `if` statements. For example, the previous cell could be re-written as follows:\n\n```python\nif aa in aminoacids:\n    if aa in charged or polar_un:\n        print(aa.capitalize() + ' is a polar amino acid.')\n    else:\n        print(aa.capitalize() + ' is a non-polar amino acid.')\nelse:\n    print(aa.capitalize() + ' is not an amino acid.')    \n```\n\nWhile this is a trivial example, nested `if` statements can be quite useful when inside a program as they allow the program to skip to the end if the first condition is not satisfied.\n\n## ‚úèÔ∏è Try it.\n\n## Loops\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### `for` loops\n`for` loops are the most commonly used type of loop and are extremely useful. `for` loops are used to iterate or loop through any object capable of returning its members one at time, i.e. an iterable object. \n\n<div class=\"python\">\n    üêç <b>Note.</b>  The <b>iterator</b> in a <code>for</code> loop is a temporary variable used to store each value in the iterable object. The iterator is defined in the <code>for</code> loop syntax as follows:\n\n```python\nfor <ITERATOR> in <ITERABLE>:\n    do something to iterator\n```   \n\nThe name of the iterator should reflect the nature of the list. <code>i</code> is commonly used as an enumerator or counter variable and should be avoided for other uses.\n    \n</div>\n\nA generic counter `for` loop can be generated using the `range()` function. \n\n```python\nfor i in range(4):\n    print(i + 1)\n    \n>>> 1\n    2\n    3\n    4\n```\n\n\n\n\n`for` loops are commonly used to iterate through lists. As with the generic `range()` `for` loop, the iterator is assigned the next value from the list at the end of the indented code block.\n\n```python\nfor aa in aminoacids:\n    print(aa)\n    \n>>> histidine\n    isoleucine\n    leucine\n    lysine\n    methionine\n    phenylalanine\n    threonine\n    tryptophan\n    valine\n    alanine\n    arginine\n    asparagine\n    aspartate\n    cysteine\n    glutamate\n    glutamine\n    glycine\n    proline\n    serine\n    tyrosine\n```\n\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Built-in functions </span> </h4>\n\nThe `enumerate()` function can be used in a `for` loop to keep track of the index of the iterator. This can be useful for keeping track of the number of iterations completed, accessing other elements in the same list based on their relative index (e.g. the value immediately following the current iterator value), or accessing elements in another list based on the iterator's index.\n\n```python\ngases = ['N2', 'O2', 'Ar', 'H2O', 'CO2']\n\nfor i,gas in enumerate(gases):\n    rank = i + 1\n    print('The #%d most abundant gas in the atmosphere is %s.' %(rank,gas))\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: -1pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> The #1 most abundant gas in the atmosphere is N2.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> The #2 most abundant gas in the atmosphere is O2.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> The #3 most abundant gas in the atmosphere is Ar.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> The #4 most abundant gas in the atmosphere is H2O.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: 12pt\"> The #5 most abundant gas in the atmosphere is CO2.</p> \n\n\nTo iterate through multiple lists at the same time without indexing, use the `zip()` function.\n\n```python\ngas_frac = [0.78084, 0.209476, 0.00934, 0.0025, 0.000314]\ngas_molar_mass = [14.0067, 15.999, 39.948, 18.01528, 44.01]\n\nmass_atmosphere = 5.148e21   # grams\nn_a = 6.022e23    # Avogadro's number\n\nfor frac,mol_mass in zip(gas_frac,gas_molar_mass):\n    mass = frac * mass_atmosphere\n    molecules = (mass / mol_mass ) * n_a\n    print(molecules)\n\n>>> 1.7282458205744395e+44\n    4.0590156271366957e+43\n    7.248215956743767e+41\n    4.302078013774973e+41\n    2.211859664621677e+40\n\n```\n\n\n\n\nThe `zip()` function is nearly always used when each element of one list corresponds to an element in the same index position in another list. Therefore, it should mostly be used with two or more lists of the same length. If the lists do not have the same length, however, the number of iterations of the `for` loop will match the length of the shortest list.\n\nThe `enumerate()` and `zip()` functions can also be used together, if necessary, to keep track of the index position of iterators.\n\n\n\n\n```python\nfor i,(frac,mol_mass) in enumerate(zip(gas_frac,gas_molar_mass)):\n    gas = gases[i]\n    mass = frac * mass_atmosphere\n    molecules = (mass / mol_mass ) * n_a\n    print('There are ' + '{:.2e}'.format(molecules) + ' molecules of %s in the atmosphere.' % (gas))\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: -1pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> There are 1.73e+44 molecules of N2 in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> There are 4.06e+43 molecules of O2 in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> There are 7.25e+41 molecules of Ar in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> There are 4.30e+41 molecules of H2O in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: 12pt\"> There are 2.21e+40 molecules of CO2 in the atmosphere.</p> \n\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Nested <code>for</code> loops </span> </h4>\n\nLike `if` statements, `for` loops can be nested to perform an operation multiple times for each iterator in the overall loop.\n\n```python\nfor aa in aminoacids:\n    vowels = 0\n    for letter in aa:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            vowels = vowels + 1\n    print(aa.capitalize() + ' has ' + str(vowels) + ' vowels.')\n    \n>>> Histidine has 4 vowels.\n    Isoleucine has 6 vowels.\n    Leucine has 4 vowels.\n    Lysine has 2 vowels.\n    Methionine has 5 vowels.\n    Phenylalanine has 5 vowels.\n    Threonine has 4 vowels.\n    Tryptophan has 2 vowels.\n    Valine has 3 vowels.\n    Alanine has 4 vowels.\n    Arginine has 4 vowels.\n    Asparagine has 5 vowels.\n    Aspartate has 4 vowels.\n    Cysteine has 3 vowels.\n    Glutamate has 4 vowels.\n    Glutamine has 4 vowels.\n    Glycine has 2 vowels.\n    Proline has 3 vowels.\n    Serine has 3 vowels.\n    Tyrosine has 3 vowels.\n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### `while` loops\n`while` loops are used to repeatedly execute a block of code while a given condition is satisfied. The indented code block will be contiuously executed until the condition becomes `False`.\n\n```python\nx = 0\nwhile x < 4:\n    x = x + 1\n    print(x)\n>>> 1\n    2\n    3\n    4\n```\n\n`while` loops are often used for user input, which allows the program to \"stall,\" repeatedly prompting the user until an acceptable answer is input.\n\n<div class=\"example\">\n‚úèÔ∏è Try it.\n    Run the following cell to see how a <code>while</code> loop works, inputing various answers that do not satisfy the condition before inputing the value that will end the loop.\n</div>\n\n<div class=\"python\">\n    üêç <b>Note.</b> <code>while</code> loops can be infinite, so they should be used very judiciously. For example, imagine if instead of <code>x = x + 1</code> in the previous example, the code block executed in the <code>while</code> loop were <code>x = x - 1</code>:\n    \n```python\nx = 0\nwhile x < 4:\n    x = x - 1\n    print(x)\n>>> -1\n    -2\n    -3\n    -4\n    -5\n    -6\n    ... # and so on\n```\nThis loop would never stop executing because the condition can never be met.\n    \n</div>\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Escaping loops\nSometimes it is necessary to terminate a loop iteration or the loop itself. The `break` and `continue` statements are used to escape loops.\n\n`break` statements in Python are used to escape an entire loop based on a condition. In nested loops, a break will only exit out of one level.\n\n![break_chart](assets/break_chart.jpg)\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n`continue` statements are used to skip the remainder of the loop for a given iteration. \n\n![continue_chart](assets/continue_chart.jpg)\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### List comprehensions\nA list comprehension is a quick, concise way to generate a list. They are generally used to condense the generation of a list from a simple expression into one line of code. \n\nFor example, say you wanted a list of all the squares from 0 and 100. As we learned in [Session 1-2](1-2_Lists.ipynb), this could be accomplished as follows:\n```python\nsquares = []\n\nfor x in range(11):\n    squares.append(x**2)\n\nprint(squares)\n>>> squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\nUsing a list comprehension, the same list could be generated in a single line of code as follows:\n```python\nsquares = [x**2 for x in range(11)]\n\nprint(squares)\n>>> squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\nList comprehensions are often combined with `if` statements. For example, the following line of code creates a list of all even numbers from 0 to 100.\n```python\nevens = [x for x in range(101) if x%2 == 0]\n\nprint(evens)\n>>> evens = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, \n               22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\n               42, 44, 46, 48, 50, 52, 54, 56, 58, 60, \n               62, 64, 66, 68, 70, 72, 74, 76, 78, 80, \n               82, 84, 86, 88, 90, 92, 94, 96, 98]\n```\n\n<div class=\"example\">\n‚úèÔ∏è Try it.\n    Change the code above to create a list of all even squares from 0 to 100.\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n","srcMarkdownNoYaml":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](1-2_lists.ipynb) | [üè† Course Home](../index.ipynb) |  [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [‚û°Ô∏è Next Session](2-2_structured_data.ipynb) |\n\n\n\n![control.jpeg](attachment:control.jpeg)\n\nThe **control flow** of a program refers to the order in which its code is executed. In Python, control flow is regulated by conditional statements, loops, and functions. This session will cover `if` statements, `for` loops, and `while` loops; functions will be covered in a later session.\n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session 1-3 Control Flow Statements\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> üìå Conditionals: <code>if</code> statements </li>\n    <ul class=\"b\">\n        <li> Basic <code>if</code> statements </li>\n        <li> Evaluating multiple conditions with <code>if... elif... else</code> </li>\n        <li> Operators: <code>or</code>, <code>and</code>, <code>in</code> </li>\n        <li> Nested <code>if</code> statements </li>\n    </ul>\n    <li> üìå <code>for</code> loops </li>\n    <ul class=\"b\">\n        <li> Generic counter <code>for</code> loops </li>\n        <li> Iterating through lists </li>\n        <li> Enumerating lists </li>\n        <li> Iterating through multiple lists at once </li>\n        <li> Nested <code>for</code> loops </li>\n    </ul>\n    <li> üìå <code>while</code> loops </li>     \n    <ul class=\"b\">\n    </ul>    \n    <li> üìå Escaping loops\n    <ul class=\"b\">\n        <li> <code>break</code> statements </li>\n        <li> <code>continue</code> statements  </li>\n    </ul>\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\n### Instructions\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n### Conditionals\nWe've already learned about boolean operators for evaluating numerical conditions and returning `True` or `False`. `if` statements are code blocks used for similar simple comparisons, or for more complex or multiple comparisons. \n\nCode blocks are created by indenting (using a tab or 4 spaces) lines of code following an `if` statement. If the condition is met, the program will proceed through the indented code block. If not, it will move on to the next unindented line.\n\nExample if statement\n```python\nx = 1\nif x > 0:\n    print('x is a positive number.')\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> x is a positive number.</p> \n\n\n\n\n## ‚úèÔ∏è Try it.\nRun the following cell, changing the value of x to be negative or positive to demonstrate how the <code>if</code> statement works.\n\n\nThe `if` statement can be used in conjunction with the `else` command to instruct the program to do something different if the condition is not met.\n\n```python\ny = -3218\nif y > 0:\n    print('y is a positive number.')\nelse:\n    print('y is not a positive number.')\n```\n\n\n\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> y is not a positive number.</p> \n\n\nTo evaluate multiple conditions, add the `elif` command after the `if` statement. Infinite `elif` statements can be included.\n\n```python\ny = -3218\nif y > 0:\n    print('y is a positive number.')\nelif y == 0:\n    print('y = 0')\nelse:\n    print('y is a negative number.')\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> y is a negative number.</p> \n\n\n## ‚úèÔ∏è Try it.\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Operators </span> </h4>\n\nThere are several operators that can be used within `if` statements to evaluate more complex conditions. The `in` operator is used to check if an object exists within an iterable object container, such as a list.\n\n```python\naminoacids = ['histidine', 'isoleucine', 'leucine', 'lysine', 'methionine', \n              'phenylalanine', 'threonine', 'tryptophan', 'valine', 'alanine', \n              'arginine', 'asparagine', 'aspartate', 'cysteine', 'glutamate', \n              'glutamine', 'glycine', 'proline', 'serine', 'tyrosine']\n\norg_compound = 'cysteine'\n\nif org_compound in aminoacids:\n    print(org_compound.capitalize() + ' is an amino acid.' )\nelse:\n    print(org_compound.capitalize() + ' is not an amino acid.')\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: 12pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> Cysteine is an amino acid.</p> \n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThe `and` and `or` operators can be used to build more complex `if` statements based on multiple expressions. The `and` operator is used to specify that multiple conditions must be satisfied.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nThe `or` operator is used to write an `if` statement where one of multiple conditions must be met.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Nested <code>if</code> statements </span> </h4>\n\n`if` statements can build on one another to perform specific actions based on each condition by **nesting** `if` statements. For example, the previous cell could be re-written as follows:\n\n```python\nif aa in aminoacids:\n    if aa in charged or polar_un:\n        print(aa.capitalize() + ' is a polar amino acid.')\n    else:\n        print(aa.capitalize() + ' is a non-polar amino acid.')\nelse:\n    print(aa.capitalize() + ' is not an amino acid.')    \n```\n\nWhile this is a trivial example, nested `if` statements can be quite useful when inside a program as they allow the program to skip to the end if the first condition is not satisfied.\n\n## ‚úèÔ∏è Try it.\n\n## Loops\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### `for` loops\n`for` loops are the most commonly used type of loop and are extremely useful. `for` loops are used to iterate or loop through any object capable of returning its members one at time, i.e. an iterable object. \n\n<div class=\"python\">\n    üêç <b>Note.</b>  The <b>iterator</b> in a <code>for</code> loop is a temporary variable used to store each value in the iterable object. The iterator is defined in the <code>for</code> loop syntax as follows:\n\n```python\nfor <ITERATOR> in <ITERABLE>:\n    do something to iterator\n```   \n\nThe name of the iterator should reflect the nature of the list. <code>i</code> is commonly used as an enumerator or counter variable and should be avoided for other uses.\n    \n</div>\n\nA generic counter `for` loop can be generated using the `range()` function. \n\n```python\nfor i in range(4):\n    print(i + 1)\n    \n>>> 1\n    2\n    3\n    4\n```\n\n\n\n\n`for` loops are commonly used to iterate through lists. As with the generic `range()` `for` loop, the iterator is assigned the next value from the list at the end of the indented code block.\n\n```python\nfor aa in aminoacids:\n    print(aa)\n    \n>>> histidine\n    isoleucine\n    leucine\n    lysine\n    methionine\n    phenylalanine\n    threonine\n    tryptophan\n    valine\n    alanine\n    arginine\n    asparagine\n    aspartate\n    cysteine\n    glutamate\n    glutamine\n    glycine\n    proline\n    serine\n    tyrosine\n```\n\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Built-in functions </span> </h4>\n\nThe `enumerate()` function can be used in a `for` loop to keep track of the index of the iterator. This can be useful for keeping track of the number of iterations completed, accessing other elements in the same list based on their relative index (e.g. the value immediately following the current iterator value), or accessing elements in another list based on the iterator's index.\n\n```python\ngases = ['N2', 'O2', 'Ar', 'H2O', 'CO2']\n\nfor i,gas in enumerate(gases):\n    rank = i + 1\n    print('The #%d most abundant gas in the atmosphere is %s.' %(rank,gas))\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: -1pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> The #1 most abundant gas in the atmosphere is N2.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> The #2 most abundant gas in the atmosphere is O2.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> The #3 most abundant gas in the atmosphere is Ar.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> The #4 most abundant gas in the atmosphere is H2O.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: 12pt\"> The #5 most abundant gas in the atmosphere is CO2.</p> \n\n\nTo iterate through multiple lists at the same time without indexing, use the `zip()` function.\n\n```python\ngas_frac = [0.78084, 0.209476, 0.00934, 0.0025, 0.000314]\ngas_molar_mass = [14.0067, 15.999, 39.948, 18.01528, 44.01]\n\nmass_atmosphere = 5.148e21   # grams\nn_a = 6.022e23    # Avogadro's number\n\nfor frac,mol_mass in zip(gas_frac,gas_molar_mass):\n    mass = frac * mass_atmosphere\n    molecules = (mass / mol_mass ) * n_a\n    print(molecules)\n\n>>> 1.7282458205744395e+44\n    4.0590156271366957e+43\n    7.248215956743767e+41\n    4.302078013774973e+41\n    2.211859664621677e+40\n\n```\n\n\n\n\nThe `zip()` function is nearly always used when each element of one list corresponds to an element in the same index position in another list. Therefore, it should mostly be used with two or more lists of the same length. If the lists do not have the same length, however, the number of iterations of the `for` loop will match the length of the shortest list.\n\nThe `enumerate()` and `zip()` functions can also be used together, if necessary, to keep track of the index position of iterators.\n\n\n\n\n```python\nfor i,(frac,mol_mass) in enumerate(zip(gas_frac,gas_molar_mass)):\n    gas = gases[i]\n    mass = frac * mass_atmosphere\n    molecules = (mass / mol_mass ) * n_a\n    print('There are ' + '{:.2e}'.format(molecules) + ' molecules of %s in the atmosphere.' % (gas))\n```\n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 22pt; margin-top: 0pt; margin-bottom: -1pt\"> <span style=\"color: #A514F6; font-weight: bold\"> >>> </span> There are 1.73e+44 molecules of N2 in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> There are 4.06e+43 molecules of O2 in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> There are 7.25e+41 molecules of Ar in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: -1pt\"> There are 4.30e+41 molecules of H2O in the atmosphere.</p> \n<p style=\"font-family: Lucida Console, Courier, monospace; margin-left: 48pt; margin-top: 0pt; margin-bottom: 12pt\"> There are 2.21e+40 molecules of CO2 in the atmosphere.</p> \n\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Nested <code>for</code> loops </span> </h4>\n\nLike `if` statements, `for` loops can be nested to perform an operation multiple times for each iterator in the overall loop.\n\n```python\nfor aa in aminoacids:\n    vowels = 0\n    for letter in aa:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            vowels = vowels + 1\n    print(aa.capitalize() + ' has ' + str(vowels) + ' vowels.')\n    \n>>> Histidine has 4 vowels.\n    Isoleucine has 6 vowels.\n    Leucine has 4 vowels.\n    Lysine has 2 vowels.\n    Methionine has 5 vowels.\n    Phenylalanine has 5 vowels.\n    Threonine has 4 vowels.\n    Tryptophan has 2 vowels.\n    Valine has 3 vowels.\n    Alanine has 4 vowels.\n    Arginine has 4 vowels.\n    Asparagine has 5 vowels.\n    Aspartate has 4 vowels.\n    Cysteine has 3 vowels.\n    Glutamate has 4 vowels.\n    Glutamine has 4 vowels.\n    Glycine has 2 vowels.\n    Proline has 3 vowels.\n    Serine has 3 vowels.\n    Tyrosine has 3 vowels.\n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### `while` loops\n`while` loops are used to repeatedly execute a block of code while a given condition is satisfied. The indented code block will be contiuously executed until the condition becomes `False`.\n\n```python\nx = 0\nwhile x < 4:\n    x = x + 1\n    print(x)\n>>> 1\n    2\n    3\n    4\n```\n\n`while` loops are often used for user input, which allows the program to \"stall,\" repeatedly prompting the user until an acceptable answer is input.\n\n<div class=\"example\">\n‚úèÔ∏è Try it.\n    Run the following cell to see how a <code>while</code> loop works, inputing various answers that do not satisfy the condition before inputing the value that will end the loop.\n</div>\n\n<div class=\"python\">\n    üêç <b>Note.</b> <code>while</code> loops can be infinite, so they should be used very judiciously. For example, imagine if instead of <code>x = x + 1</code> in the previous example, the code block executed in the <code>while</code> loop were <code>x = x - 1</code>:\n    \n```python\nx = 0\nwhile x < 4:\n    x = x - 1\n    print(x)\n>>> -1\n    -2\n    -3\n    -4\n    -5\n    -6\n    ... # and so on\n```\nThis loop would never stop executing because the condition can never be met.\n    \n</div>\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Escaping loops\nSometimes it is necessary to terminate a loop iteration or the loop itself. The `break` and `continue` statements are used to escape loops.\n\n`break` statements in Python are used to escape an entire loop based on a condition. In nested loops, a break will only exit out of one level.\n\n![break_chart](assets/break_chart.jpg)\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n`continue` statements are used to skip the remainder of the loop for a given iteration. \n\n![continue_chart](assets/continue_chart.jpg)\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### List comprehensions\nA list comprehension is a quick, concise way to generate a list. They are generally used to condense the generation of a list from a simple expression into one line of code. \n\nFor example, say you wanted a list of all the squares from 0 and 100. As we learned in [Session 1-2](1-2_Lists.ipynb), this could be accomplished as follows:\n```python\nsquares = []\n\nfor x in range(11):\n    squares.append(x**2)\n\nprint(squares)\n>>> squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\nUsing a list comprehension, the same list could be generated in a single line of code as follows:\n```python\nsquares = [x**2 for x in range(11)]\n\nprint(squares)\n>>> squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\nList comprehensions are often combined with `if` statements. For example, the following line of code creates a list of all even numbers from 0 to 100.\n```python\nevens = [x for x in range(101) if x%2 == 0]\n\nprint(evens)\n>>> evens = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, \n               22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\n               42, 44, 46, 48, 50, 52, 54, 56, 58, 60, \n               62, 64, 66, 68, 70, 72, 74, 76, 78, 80, \n               82, 84, 86, 88, 90, 92, 94, 96, 98]\n```\n\n<div class=\"example\">\n‚úèÔ∏è Try it.\n    Change the code above to create a list of all even squares from 0 to 100.\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"2-1_control_flow_statements.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Session 2-1: Control Flow Statements"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}