{"title":"Session 1-2: Lists + Indexing","markdown":{"yaml":{"title":"Session 1-2: Lists + Indexing"},"headingText":"Instructions","containsRefs":false,"markdown":"\n\n\n\n| [⬅️ Previous Session](1-1_variables.ipynb) | [🏠 Course Home](../index.ipynb) |  [🚦 EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [➡️ Next Session](2-1_control_flow_statements.ipynb) |\n\n\n\n![list-2.jpg](attachment:list-2.jpg)\n\nPython has four collection data types, the most common of which is the **list**. This session introduces lists and a few of the important list operations. We will also cover **indexing**, a key feature of programming.\n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session 1.2 Topics\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> 📌 List basics </li>\n    <ul class=\"b\">\n        <li> List notation </li>\n        <li> <code>len()</code>, <code>min()</code>, <code>max()</code></li>\n    </ul>\n    <li> 📌 Indexing + slicing </li>\n    <li> 📌 List operations </li> \n    <ul class=\"b\">\n        <li> In-place operators </li>\n        <li> Standard operators </li>\n        <li> Copies vs. views </li>\n        <li> Adding lists </li>\n    </ul>\n    <li> 📌 Generating sequential lists\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> 🐍 &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ▶️ &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ✏️ &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n## Lists\nA list is a Python object used to contain multiple values. Lists are ordered and changeable. They are defined as follows:\n\n```python\nnum_list = [4, 23, 654, 2, 0, -12, 4391]\nstr_list = ['energy', 'water', 'carbon']\n```\n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\nWhile you can create lists containing mixed data types, this is not usually recommended.\n\nThe `len()` command returns the length of the list.\n\n```python\nlen(str_list)\n>>> 3\n```\n\nThe `min()` and `max()` commands are used to find the minimum and maximum values in a list. For a list of strings, this corresponds to the alphabetically first and last elements.\n\n```python\nmin(str_list)\n>>> 'carbon'\n\nmax(str_list)\n>>> 'water'\n\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Use the <code>len()</code>, <code>min()</code>, and <code>max()</code> commands to find the length, minimum, and maximum of <code>num_list</code>.\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Indexing\nThe index is used to reference a value in an iterable object by its position. To access an element in a list by its index, use square brackets `[]`.\n\n<div class=\"python\">\n    🐍 <b>Note.</b> Python is zero-indexed. This means that the first element in the list is 0, the second is 1, and so on. The last element in a list with $n$ elements is $n - $1.\n</div>\n \n```python\nnum_list[2]\n>>> 654\n```\nYou can also access an element based on its position from the end of the list.\n```python\nnum_list[-2]\n>>> -12\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Find the 2nd element in <code>str_list</code> in two different ways. Remember that Python is zero-indexed!\n</div>\n\nAccessing a range of values in a list is called **slicing**. A slice specifies a start and an endpoint, generating a new list based on the indices. The indices are separated by a `:`.\n\n<div class=\"python\">\n    🐍 <b>Note.</b>  The endpoint index in the slice is <i>exclusive</i>. To slice to the end of the list, omit an endpoint.\n</div>\n\n```python\nnum_list[2:6]\n>>> [654, 2, 0, -12]\n\nnum_list[0:4]   \n>>> [4, 23, 654, 2]\n\nnum_list[:4]    \n>>> [4, 23, 654, 2]\n\nnum_list[-6:-1] \n>>> [23, 654, 2, 0,-12]\n```\n\n\n\n\nIt is also possible to specify a step size, i.e. `[start:stop:step]`. A step size of 1 would select every element, 2 would select every other element, etc.\n```python\nnum_list[0:4:2]  \n>>> [4, 654]\n\nnum_list[::2]    \n>>>[4, 654, 0, 4391]\n```\nA step of -1 returns the list in reverse.\n```python\nnum_list[::-1]\n>>> [4391, -12, 0, 2, 654, 23, 4]\n```\n\n\nLike lists, strings can also be indexed using the same notation. This can be useful for many applications, such as selecting files in a certain folder for import based on their names or extension.\n\n```python\nword_str = 'antidisestablishmentarianism'\n\nword_str[14]\n>>> 's'\n\nword_str[::3]\n>>> 'aistlhnrnm'\n\n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### List Operations\nElements can be added to a list using the command `list.append()`.\n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\n\n\nYou can **add** an element to a list in a specific position using the command `list.insert()`.\n```python\ncolors.insert(4, 'purple')\nprint(colors)\n>>> ['red', 'blue', 'green', 'black', 'purple', 'white', 'pink']\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Add <code>'purple'</code> to the list <code>colors</code> between <code>'green'</code> and <code>'black'</code>.\n</div>\n\nThere are multiple ways to **remove** elements from a list. The commands `list.pop()` and `del` remove elements based on indices.\n```python\ncolors.pop()       # removes the last element\ncolors.pop(2)      # removes the third element\ndel colors[2]      # removes the third element\ndel colors[2:4]    # removes the third and fourth elements\n```\nThe command `list.remove()` removes an element based on its value.\n```python\ncolors.remove('red')\nprint(colors)\n>>> ['blue', 'green', 'black', 'purple', 'white', 'pink']\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Remove <code>'pink'</code> and <code>'purple'</code> from <code>colors</code>, using <code>del</code> for one of the strings and <code>list.remove()</code> for the other.\n</div>\n\nYou can **sort** the elements in a list (numerically or alphabetically) in two ways. The first uses the command `list.sort()`.\n\n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\nSetting `reverse=True` within this command sorts the list in reverse order:\n```python\nrand_list = [5.1 , 3.42 , 3.333 , 100.4 , 0.5 , 26.0 , 7.44 , 5.8 , 39.0]\nrand_list.sort(reverse=True)\nprint(rand_list)\n>>> [100.4, 39.0, 26.0, 7.44, 5.8, 5.1, 3.42, 3.333, 0.5]\n```\nSo far, all of the list commands we've used have been **in-place operators**. This means that they perform the operation to the variable in place without requiring a new variable to be assigned. By contrast, **standard operators** do not change the original list variable. A new variable must be set in order to retain the operation. \n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Verify that <code>rand_list</code> was, in fact, sorted in place by using the <code>min()</code> and <code>max()</code> functions to determine the minmum and maximum values in the list and printing the first and last values in the list.\n</div>\n\nThe other method of sorting a list is to use the `sorted()` command, which does not change the original list. Instead, the sorted list must be assigned to a new variable.\n```python\nrand_list = [5.1 , 3.42 , 3.333 , 100.4 , 0.5 , 26.0 , 7.44 , 5.8 , 39.0]\nsorted_list = sorted(rand_list)\nprint(rand_list[0])\nprint(sorted_list[0])\n>>> 5.1\n    0.5\n```\nTo avoid changing the original variable when using an in-place operator, it is wise to create a copy. There are multiple ways to create copies of lists, but it is important to know the difference between a true **copy** and a **view**. A view of a list can be created as follows:\n```python\nstr_list = ['energy', 'water', 'carbon']\nstr_list_view = str_list\n```\nAny in-place operation performed on `str_list_view` will also be applied to `str_list`. To avoid this, create a copy of `str_list` using any of the following methods:\n```python\nstr_list_copy = str_list.copy()\n# or\nstr_list_copy = str_list[:]\n# or\nstr_list_copy = list(str_list)\n```\n\n\nIn addition to adding single elements to a list using `list.append()` or `list.insert()`, multiple elements can be added to a list at the same time by adding multiple lists together.\n\n```python\nrainbow  = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\nshades = ['coral', 'chartreuse', 'cyan', 'navy']\nprint( rainbow + shades )\n>>> ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet', 'coral', 'chartreuse', 'cyan', 'navy']\n```\n\n\nSingle lists can be repeated by multiplying by an integer. \n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\n### Generating sequential lists\nSequential lists are valuable tools, particularly for iteration, which we will explore in the next session. The `range()` function is used to create an iterable object based on the size of an integer argument.\n\n```python\nrange(4)\n>>> range(0, 4)\n```\n\nTo construct a sequential list from the `range()` object, use the `list()` function.\n\n```python\nlist(range(4))\n>>> [0, 1, 2, 3]\n```\n\nUsing multiple integer arguments, the `range()` function can be used to generate sequential lists between two bounds: `range(start, stop [, step])`.\n\n<div class=\"python\">\n    🐍 <b>Note.</b> \n    Like indexing, all Python functions using <span style=\"font-style: italic\"> start </span> and <span style=\"font-style: italic\"> stop </span> arguments, the <span style=\"font-style: italic\"> stop </span> value is <span style=\"font-weight: bold\"> exclusive </span>.\n</div>\n\n```python\nrange_10 = list(range(1,11))\nodds_10 = list(range(1,11,2))\nprint(range_10)\nprint(odds_10)\n>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    [1, 3, 5, 7, 9]\n```\n\n","srcMarkdownNoYaml":"\n\n\n\n| [⬅️ Previous Session](1-1_variables.ipynb) | [🏠 Course Home](../index.ipynb) |  [🚦 EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [➡️ Next Session](2-1_control_flow_statements.ipynb) |\n\n\n\n![list-2.jpg](attachment:list-2.jpg)\n\nPython has four collection data types, the most common of which is the **list**. This session introduces lists and a few of the important list operations. We will also cover **indexing**, a key feature of programming.\n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session 1.2 Topics\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> 📌 List basics </li>\n    <ul class=\"b\">\n        <li> List notation </li>\n        <li> <code>len()</code>, <code>min()</code>, <code>max()</code></li>\n    </ul>\n    <li> 📌 Indexing + slicing </li>\n    <li> 📌 List operations </li> \n    <ul class=\"b\">\n        <li> In-place operators </li>\n        <li> Standard operators </li>\n        <li> Copies vs. views </li>\n        <li> Adding lists </li>\n    </ul>\n    <li> 📌 Generating sequential lists\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\n### Instructions\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> 🐍 &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ▶️ &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ✏️ &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n## Lists\nA list is a Python object used to contain multiple values. Lists are ordered and changeable. They are defined as follows:\n\n```python\nnum_list = [4, 23, 654, 2, 0, -12, 4391]\nstr_list = ['energy', 'water', 'carbon']\n```\n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\nWhile you can create lists containing mixed data types, this is not usually recommended.\n\nThe `len()` command returns the length of the list.\n\n```python\nlen(str_list)\n>>> 3\n```\n\nThe `min()` and `max()` commands are used to find the minimum and maximum values in a list. For a list of strings, this corresponds to the alphabetically first and last elements.\n\n```python\nmin(str_list)\n>>> 'carbon'\n\nmax(str_list)\n>>> 'water'\n\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Use the <code>len()</code>, <code>min()</code>, and <code>max()</code> commands to find the length, minimum, and maximum of <code>num_list</code>.\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Indexing\nThe index is used to reference a value in an iterable object by its position. To access an element in a list by its index, use square brackets `[]`.\n\n<div class=\"python\">\n    🐍 <b>Note.</b> Python is zero-indexed. This means that the first element in the list is 0, the second is 1, and so on. The last element in a list with $n$ elements is $n - $1.\n</div>\n \n```python\nnum_list[2]\n>>> 654\n```\nYou can also access an element based on its position from the end of the list.\n```python\nnum_list[-2]\n>>> -12\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Find the 2nd element in <code>str_list</code> in two different ways. Remember that Python is zero-indexed!\n</div>\n\nAccessing a range of values in a list is called **slicing**. A slice specifies a start and an endpoint, generating a new list based on the indices. The indices are separated by a `:`.\n\n<div class=\"python\">\n    🐍 <b>Note.</b>  The endpoint index in the slice is <i>exclusive</i>. To slice to the end of the list, omit an endpoint.\n</div>\n\n```python\nnum_list[2:6]\n>>> [654, 2, 0, -12]\n\nnum_list[0:4]   \n>>> [4, 23, 654, 2]\n\nnum_list[:4]    \n>>> [4, 23, 654, 2]\n\nnum_list[-6:-1] \n>>> [23, 654, 2, 0,-12]\n```\n\n\n\n\nIt is also possible to specify a step size, i.e. `[start:stop:step]`. A step size of 1 would select every element, 2 would select every other element, etc.\n```python\nnum_list[0:4:2]  \n>>> [4, 654]\n\nnum_list[::2]    \n>>>[4, 654, 0, 4391]\n```\nA step of -1 returns the list in reverse.\n```python\nnum_list[::-1]\n>>> [4391, -12, 0, 2, 654, 23, 4]\n```\n\n\nLike lists, strings can also be indexed using the same notation. This can be useful for many applications, such as selecting files in a certain folder for import based on their names or extension.\n\n```python\nword_str = 'antidisestablishmentarianism'\n\nword_str[14]\n>>> 's'\n\nword_str[::3]\n>>> 'aistlhnrnm'\n\n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### List Operations\nElements can be added to a list using the command `list.append()`.\n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\n\n\nYou can **add** an element to a list in a specific position using the command `list.insert()`.\n```python\ncolors.insert(4, 'purple')\nprint(colors)\n>>> ['red', 'blue', 'green', 'black', 'purple', 'white', 'pink']\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Add <code>'purple'</code> to the list <code>colors</code> between <code>'green'</code> and <code>'black'</code>.\n</div>\n\nThere are multiple ways to **remove** elements from a list. The commands `list.pop()` and `del` remove elements based on indices.\n```python\ncolors.pop()       # removes the last element\ncolors.pop(2)      # removes the third element\ndel colors[2]      # removes the third element\ndel colors[2:4]    # removes the third and fourth elements\n```\nThe command `list.remove()` removes an element based on its value.\n```python\ncolors.remove('red')\nprint(colors)\n>>> ['blue', 'green', 'black', 'purple', 'white', 'pink']\n```\n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Remove <code>'pink'</code> and <code>'purple'</code> from <code>colors</code>, using <code>del</code> for one of the strings and <code>list.remove()</code> for the other.\n</div>\n\nYou can **sort** the elements in a list (numerically or alphabetically) in two ways. The first uses the command `list.sort()`.\n\n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\nSetting `reverse=True` within this command sorts the list in reverse order:\n```python\nrand_list = [5.1 , 3.42 , 3.333 , 100.4 , 0.5 , 26.0 , 7.44 , 5.8 , 39.0]\nrand_list.sort(reverse=True)\nprint(rand_list)\n>>> [100.4, 39.0, 26.0, 7.44, 5.8, 5.1, 3.42, 3.333, 0.5]\n```\nSo far, all of the list commands we've used have been **in-place operators**. This means that they perform the operation to the variable in place without requiring a new variable to be assigned. By contrast, **standard operators** do not change the original list variable. A new variable must be set in order to retain the operation. \n\n<div class=\"example\">\n    ✏️ <b> Try it. </b> \n    Verify that <code>rand_list</code> was, in fact, sorted in place by using the <code>min()</code> and <code>max()</code> functions to determine the minmum and maximum values in the list and printing the first and last values in the list.\n</div>\n\nThe other method of sorting a list is to use the `sorted()` command, which does not change the original list. Instead, the sorted list must be assigned to a new variable.\n```python\nrand_list = [5.1 , 3.42 , 3.333 , 100.4 , 0.5 , 26.0 , 7.44 , 5.8 , 39.0]\nsorted_list = sorted(rand_list)\nprint(rand_list[0])\nprint(sorted_list[0])\n>>> 5.1\n    0.5\n```\nTo avoid changing the original variable when using an in-place operator, it is wise to create a copy. There are multiple ways to create copies of lists, but it is important to know the difference between a true **copy** and a **view**. A view of a list can be created as follows:\n```python\nstr_list = ['energy', 'water', 'carbon']\nstr_list_view = str_list\n```\nAny in-place operation performed on `str_list_view` will also be applied to `str_list`. To avoid this, create a copy of `str_list` using any of the following methods:\n```python\nstr_list_copy = str_list.copy()\n# or\nstr_list_copy = str_list[:]\n# or\nstr_list_copy = list(str_list)\n```\n\n\nIn addition to adding single elements to a list using `list.append()` or `list.insert()`, multiple elements can be added to a list at the same time by adding multiple lists together.\n\n```python\nrainbow  = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\nshades = ['coral', 'chartreuse', 'cyan', 'navy']\nprint( rainbow + shades )\n>>> ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet', 'coral', 'chartreuse', 'cyan', 'navy']\n```\n\n\nSingle lists can be repeated by multiplying by an integer. \n\n<div class=\"run\">\n    ▶️ <b> Run the cell below. </b>\n</div>\n\n### Generating sequential lists\nSequential lists are valuable tools, particularly for iteration, which we will explore in the next session. The `range()` function is used to create an iterable object based on the size of an integer argument.\n\n```python\nrange(4)\n>>> range(0, 4)\n```\n\nTo construct a sequential list from the `range()` object, use the `list()` function.\n\n```python\nlist(range(4))\n>>> [0, 1, 2, 3]\n```\n\nUsing multiple integer arguments, the `range()` function can be used to generate sequential lists between two bounds: `range(start, stop [, step])`.\n\n<div class=\"python\">\n    🐍 <b>Note.</b> \n    Like indexing, all Python functions using <span style=\"font-style: italic\"> start </span> and <span style=\"font-style: italic\"> stop </span> arguments, the <span style=\"font-style: italic\"> stop </span> value is <span style=\"font-weight: bold\"> exclusive </span>.\n</div>\n\n```python\nrange_10 = list(range(1,11))\nodds_10 = list(range(1,11,2))\nprint(range_10)\nprint(odds_10)\n>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    [1, 3, 5, 7, 9]\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"1-2_lists.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Session 1-2: Lists + Indexing"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}