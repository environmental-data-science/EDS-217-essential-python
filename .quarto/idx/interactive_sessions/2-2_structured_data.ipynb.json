{"title":"Session 2-2: Structured Data in Python","markdown":{"yaml":{"title":"Session 2-2: Structured Data in Python"},"headingText":"Instructions","containsRefs":false,"markdown":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](2-1_control_flow_statements.ipynb) | [üè† Course Home](../index.ipynb) |  [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [‚û°Ô∏è Next Session](3-1_numpy.ipynb) |\n\n\nProbably the easiest mental model for thinking about structured data is a spreadsheet. You are all familiar with Excel spreadsheets, with their numbered rows and lettered columns. In the spreadsheet, data is often \"structured\" so that each row is an entry, and each column is perhaps a variable recorded for that entry. \n\n![structured-data](assets/structured-data.png)\n\nEnvironmental data map really well to this model, especially data collected over time. A spreadsheet of weather observations would have a new row for each observation period, and then the columns would be the meteorological data that was collected at that time. As we move into our data science tools, we will see that a major aspect of these tools is creating efficient ways of working with structured data. \n\nThat being said, Python has a number of built-in data types that can be used to organize data in a structured manner. These basic data types containing structured data are all lumped into a single broad category called `collections`. Within these `collection` data types, some of the data types are `sequences`, which means that the items in the `collection` have a deterministic ordering. You've already used the two most common `sequence` data types: the **string** and the **list**. A **string** is simply an ordered collection of characters, while a **list** data type  structures a collection of anything into an ordered series of elements that can be referenced by their position in the **list**. \n\nIn this lesson, we are going to learn about an additional `sequence`, called a **tuple**, as well as two `collection` data types called sets (**set**) and dictionaries (**dict**). \n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session Topics\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> üìå <a href=\"#dictionaries\">Dictionaries</a> </li> \n    <ul class=\"b\">\n        <li> <a href=\"#accessing_elements\">Accessing elements</a> </li>\n        <li> <a href=\"#keys_and_values\"><code>keys()</code> and <code>values()</code> </a></li>\n        <li> <a href=\"#looping\">Looping through dictionaries</a> using <code>values()</code> </li>\n        <li> <a href=\"#accessing_unassigned\">Accessing un-assigned elements in Dictionaries</a> </li>\n    </ul>\n    <li> üìå <a href=\"#sets\">Sets</a> </li>\n      <ul class=\"b\">\n        <li> <a href=\"#mutability\"> Mutability</a> </li>\n        <li> <a href=\"#mixed_ypes\">Mixed Data Types in Sets </a></li>\n        <li> <a href=\"#set_methods\">Set Methods</a></li>\n    </ul>\n    <li> üìå <a href=\"#tuples\">Tuples</a> </li>\n    <ul class=\"b\">\n        <li> <a href=\"#tuple_indexing\">Indexing</a> </li>\n        <li> <a href=\"#tuple_immutability\">Immutability</a>\n        </li>\n        <li> <a href=\"#named_tuples\">Named tuples</a> </li>\n    </ul>\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n# Collection Summary\n\n![collections.jpg](assets/collections.jpg)\n\n**Note**: Applying the `sorted()` function to any of these collections will produce a sorted `list`. \n\n## 1. Dictionaries <a id=\"dictionaries\"></a>\n\n> **TLDR**: Dictionaries are a very common collection type that allows data to be organized using a `key:value` framework. Because of the similarity between `key:value` pairs and many data structures (e.g. \"lookup tables\"), you will see Dictionaries quite a bit when working in python\n\nThe first collection we will look at today is the dictionary, or **dict**. This is one of the most powerful data structures in python. It is a `mutable`, `unordered` collection, which means that it can be altered, but elements within the structure cannot be referenced by their position and they cannot be sorted. \n\nYou can create a dictionary using the `{}`, providing both a `key` and a `value`, which are separated by a `:`.\n\n```python\nenvironmental_disciplines = {\n    'ecology':'The relationships between organisms and their environments.',\n    'hydrology':'The properties, distribution & effects of water on the surface, subsurface, & atmosphere.',\n    'geology':'The origin, history, and structure of the earth.',\n    'meteorology':'The phenomena of the atmosphere, especially weather and weather conditions.'\n    }\n```\n\n<div class=\"python\">\n    üêç <b>Note.</b> The use of whitespace and indentation is important in python. In the example above, the dictionary entries are indented relative to the brackets <code>{</code> and <code>}</code>. In addition, there is no space between the <code>'key'</code>, the <code>:</code>, and the <code>'value'</code> for each entry. Finally, notice that there is a <code>,</code> following each dictionary entry. This pattern is the same as all of the other <i>collection</i> data types we've seen so far, including <b>list</b>, <b>set</b>, and <b>tuple</b>.\n</div>\n\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n### Accessing elements in Dictionaries <a id=\"accessing elements\"></a>\n\nAccess an element in a dictionary is easy if you know what you are looking for. For example, if I want to know the definition of `ecology`, I can simply retireve the value of this defition using the key as my index into the dictionary:\n\n```python\nenvironmental_disciplines['ecology']\n>>> 'The relationships between organisms and their environments.'\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nTry accessing the some of the definitions in the <code>environmental_disciplines</code> dictionary.\n\n\nBecause dictionaries are _mutable_, it is easy to add additional entries. This is done using the following notation:\n\n```python\n    environmental_discplines['geomorphology'] =  'The evolution and configuration of landforms.'\n```\n\n\n\n## ‚úèÔ∏è Try it.  \n<b>Biogeochemistry</b> is defined as <b>\"the chemical, physical, geological, and biological processes and reactions that govern the composition of the natural environment.\"</b> Add this discpline to the dictionary <code>environmental_disciplines</code>.\n\n\n### Accessing dictionary keys and values <a id=\"keys_and_values\"></a>\n\nEvery dictionary has builtin methods to retrieve its `keys` and `values`. These functions are called, appropriately, `keys()` and `values()`\n\n```python\n\ndisciplines = environmental_disciplines.keys()\nprint(disciplines)\n>>> dict_keys(['ecology', 'hydrology', 'geology', 'meteorology', 'biogeochemistry'])\n\n```\n\n```python\n\ndefinitions = environmental_disciplines.values()\nprint(definitions)\n>>> dict_values(\n    ['The relationships between organisms and their environments.', \n     'The properties, distribution & effects of water on the surface, subsurface, & atmosphere.', \n     'The origin, history, and structure of the earth.', \n     'The phenomena of the atmosphere, especially weather and weather conditions.', \n     'The chemical, physical, geological, and biological processes and reactions that govern the composition of the natural environment.'])\n\n```\n<div class=\"python\">\nüêç <b>Note.</b> The <code>keys()</code> and <code>values()</code> functions return a <code>dict_key</code> object and <code>dict_values</code> object, respectively. Each of these objects contains a <b>list</b> of either the keys or values. You can force the result of the <code>keys()</code> or <code>values()</code> function into a <b>list</b> by wrapping either one in a <code>list()</code> command. \n\nFor example: <code>key_list = list(environmental_disciplines.keys())</code> will return a <b>list</b> of the keys in <code>environmental_disciplines</code>\n</div>\n\n\n### Looping through Dictionaries <a id=\"looping\"></a>\n\nPython has an efficient way to loop through all the keys and values of a dictionary at the same time. The `items()` method returns a **tuple** containing a `(key, value)` for each element in a dictionary. In practice this means that we can loop through a dictionary in the following way:\n\n```python\nmy_dict = {'name': 'Homer Simpson',\n           'occupation': 'Nuclear Engineer',\n           'address': '742 Evergreen Terrace',\n           'city': 'Springfield',\n           'state': ' ? '\n          }\n\nfor key, value in my_dict.items():\n    print(f\"{key.capitalize()}: {value}.\")\n\n\n>>> Name: Homer Simpson.\n    Occupation: Nuclear Engineer.\n    Address: 742 Evergreen Terrace.\n    City: Springfield.\n    State:  ? .\n\n```\n\n\n\n## ‚úèÔ∏è Try it. \nLoop through the <code>environmental_disciplines</code> dictionary and print out a sentence providing the definition of each subject (e.g. \"Ecology is the study of....\").\n\n\n### Accessing un-assigned elements in Dictionaries <a id=\"accessing_unassigned\"></a>\n\nAttempting to retrieve an element of a dictionary that doesn't exist is the same as requesting an index of a **list** that doesn't exist - Python will raise an Exception. For example, if I attempt to retrieve the definition of a field that hasn't been defined, then I get an error.\n\n```python\nenvironmental_disciplines['xenohydrology']\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-46-d4d91bf18209> in <module>\n----> 1 environmental_disciplines['xenohydrology']\n\nKeyError: 'xenohydrology'\n```\n\nWhile it's easy to determine what indicies are in a **list** using the `len()` command, it's sometimes hard to know what elements are in a **dict** (but we'll learn how soon!). Regardless, to avoid getting an error when requesting an element from a **dict**, you can use the `get()` function. The `get()` function will return `None` if the element doesn't exist:\n\n```python\nunknown_definition = environmental_disciplines.get('xenohydrology')\nprint(unknown_definition)\n>>> None\n\n```\n\nThe `get()` function will also allow you to pass an additional argument. This additional argument specifies a \"default\" value which will be returned for any undefined elements:\n\n```python\nenvironmental_disciplines.get('xenohydrology', 'Discipline not defined.')\n>>> 'Discipline not defined.'\n\n```\n\n```python\nlist_of_disciplines = ['climatology', 'ecology', 'meteorology', 'geology', 'biogeochemistry']\n```\n\n\n\n## ‚úèÔ∏è Try it.  \nUsing the list of discplines given above, write a <code>for</code> loop that either prints the definition of the discipline, or prints 'Discipline not defined.'\n\n\n## 2. Sets <a id='tuples'></a>\n\n> **TLDR**: Sets are useful for comparing groups of items to determine their overlap or their differences. Sometimes used in data science, but rarely when working with large datasets.\n\nAs opposed to a **list** or **tuple**, a **set** is not a  _sequence_. Although a set is _iterable_ (like the _sequences_ you've already met), a **set** is an _unordered_ collection data type, which means it is not a _sequence_. However, a set is mutable, which means - like a **list** - it can be modified after being created. Finally - and most uniquely - a **set** has no duplicate elements. In this sense, a **set** in python is very much like a mathematical set.\n\nWe've seen that a **list** is implemented using `[]`, while a **tuple** is implemented using `()`. \n\nA set is implemented using `{}`:\n\n```python\nnum_set = {1, 3, 6, 10, 15, 21, 28}\nstr_set = {'hydrology', 'ecology', 'geology', 'climatology'}\n\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n\nAs with all other collections, you can also create a **set** using the `set()` function:\n\n```python\nnum_set = set([1, 3, 6, 10, 15, 21, 28, 45, 45, 45, 45, 45])\n\n```\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>set()</code> function to create a set containing the first four prime numbers.\n\n### Mutability <a id=\"mutability\"></a>\n\nSets are `mutable`. \n\nTo remove an element from a set, use the `discard()` method:\n\n```python\n\nstr_set.discard('ecology')\n    \n```\n\nTo add an element from to set, use the `add()` method:\n\n```python\n\nstr_set.add('oceanography')\n    \n```\n\nTo add multiple elements to a set at the same time, use the `update()` method. The items to add should be contained in a **list**.\n\n```python\n\nstr_set.update(['oceanography', 'microbiology'])\n    \n```\n\n\n## ‚úèÔ∏è <b> Try it. </b> \n\nAdd <code>'biogeochemistry'</code> and <code>'meteorology'</code> to <code>str_set</code> and then remove <code>'ecology'</code>.\n\nMany of the same functions that worked on **list** and **tuple** also work for a **set**. \n\n```python\nlen(str_set)\n>>> 4\n```\n\nThe `min()` and `max()` commands can also be used to find the minimum and maximum values in a tuple. For a tuple of strings, this corresponds to the alphabetically first and last elements.\n\n```python\nmin(str_set)\n>>> 'climatology'\n\nmax(str_tuple)\n>>> 'oceanography'\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>len()</code>, <code>min()</code>, and <code>max()</code> commands to find the length, minimum, and maximum of <code>num_set</code>.\n\n\n### Mixed Data Types in Collections and Sequences <a id=\"mixed_types\"></a>\n\nAs a reminder, it's usually a good idea to make sure your sets are all of the same basic data type. The reason is because Python doesn't know how to compare the magnitude of different data types. \n\nWhich is larger: `ecology`, or the number `3`? Python doesn't know the answer, and neither do I. If you try to use functions like `max` or `min` on a mixed data type **set** you will get a `TypeError` exception.\n\n\n```python\n\nmixed_set = {3, 4, 'ecology', 'biology'}\nmax(mixed_set)\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-49-a4da84ba3cd4> in <module>\n      1 mixed_set = {3, 4, 'ecology', 'biology'}\n----> 2 max(mixed_set)\n\nTypeError: '>' not supported between instances of 'int' and 'str'\n```\n\n### Set Methods <a id=\"set_methods\"></a>\n\nGiven their similarity to mathematical sets, there are some specific functions that allow us to compare and combine the contents of different sets. \n\n\n#### Union\n\nA union of sets contains all the items that are in any of the sets.\n\nThe union of sets $A$ and $B$ is defined as $ A \\cup B $. \n\n\n\n![image](assets/union.jpg)\n\n\n```python\nodds = {1, 3, 5, 7, 9, 11, 13, 15}\nevens = {2, 4, 6, 8, 10, 12, 14, 16}\n\nintegers = odds.union(evens)\nprint(integers)\n\n>>> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\n```\n\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Intersection\n\nAn intersection of sets contains all the items that are found in all of the sets.\n\nThe intersection of sets $A$ and $B$ is defined as $ A \\cap B $. \n\n\n![image](assets/intersection.jpg)\n\n```python\n\nsquares = {4, 9, 16, 25, 36, 49}\nmultiples_of_nine = {9, 18, 27, 36, 45}\n\nsquares_divisible_by_nine = squares.intersection(multiples_of_nine)\nprint(squares_divisible_by_nine)\n\n>>> {9, 36}\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>intersection()</code> method to determine who knows both `python` and `R`.\n\n\n#### Difference\n\nAn difference of two sets contains all the items that are in A but not in B.\n\nThe difference (or relative complement) of set $A$ and $B$ is defined as $ A \\setminus B $. \n\n\n![image](assets/difference.jpg)\n\n\n```python\n\nsquares = {4, 9, 16, 25, 36, 49}\nmultiples_of_nine = {9, 18, 27, 36, 45}\n\nsquares_not_divisible_by_nine = squares.difference(multiples_of_nine)\nprint(squares_not_divisible_by_nine)\n\n>>> {16, 49, 4, 25}\n\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Because a <b>set</b> is an <i>unordered</i> collection, the result of a set function will return elements in an unpredictable order. In the example above, the intersection returned `{16, 49, 4, 25}` rather than `{4, 16, 25, 49}`, which you may have expected.\n</div>\n \n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>difference()</code> method to determine who knows <b>R</b>, but does not know <b>Python</b>.\n\n\n#### Symmetric Difference\n\nThis method returns all the items that are _unique_ to each set.\n\nThe [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference) (or disjunctive union) of sets $A$ and $B$ is $A \\triangle B$ (also sometimes written as $A \\oplus B$)\n\n![image](assets/symmetric-difference.jpg)\n\n```python\n\nsquares = {4, 9, 16, 25, 36, 49}\nmultiples_of_nine = {9, 18, 27, 36, 45}\n\nsquares_not_divisible_by_nine = squares.symmetric_difference(multiples_of_nine)\nprint(squares_not_divisible_by_nine)\n\n>>> {16, 49, 18, 4, 25, 27, 45}\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>symmetric_difference()</code> method to determine who only knows <i>either</i> R or Python.\n\n\n### Additional Set Methods: isdisjoint(), issubset(), issuperset()\n\nThere are three additional set functions that allow you to determine the relationships between two sets. Each of these functions returns either `True` or `False`, which means they are `Boolean` operators.\n\n**isdisjoint()** determines if two sets are [disjoint](https://en.wikipedia.org/wiki/Disjoint_sets). It returns `True` if the contents of two sets are completely distinct, and `False` if they have any overlap\n\n\n\n```python\nodds.isdisjoint(evens)\n>>> True\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Set <i>A</i> is <b>disjoint</b> from set <i>B</i> if, and only if, the <b>intersection</b> of <i>A</i> and <i>B</i> is <code>None</code>.\n</div>\n\n**issubset()** returns `True` if the content of set A is a [subset](https://en.wikipedia.org/wiki/Subset) of set B, and `False` if it is not a subset.\n\n```python\n\nprimes = {1, 3, 5, 7, 11}\nprimes.issubset(odds)\n>>> True\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Set <i>A</i> is a <b>subset</b> of set <i>B</i> if, and only if, the <b>intersection</b> of <i>A</i> and <i>B</i> is <i>A</i>.\n</div>\n\n\n**issupserset()** returns `True` if the content of set A is a superset of set B, and `False` if it is not a superset.\n\n\n```python\n\nodds.issuperset(primes)\n>>> True\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Set <i>A</i> is a <b>superset</b> of set <i>B</i> if, and only if, set <i>B</i> is a subset of <i>A</i>.\n</div>\n\n\n\nThere is a lot more to learn about dictionaries, including methods for deleting elements, merging dictionaries, and learning about additional _collection_ types like **OrderedDict** that allow you to preserve the arrangement of dictionary elements (essentially making them _sequences_). We will keep coming back to them throughout the class. If you want to learn more, check out the great material in our reading: [Dictionaries](https://proquest-safaribooksonline-com.proxy.library.ucsb.edu:9443/book/programming/python/9781449355722/4dot-introducing-python-object-types/dictionaries_html)\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n## 3. Tuples <a id='tuples'></a>\n\n> **TLDR:** Tuples are a kind of list that can't be altered. They are not very common in data science applications, but you might run across them from time to time. \"[Named Tuples](#named_tuples)\" allow for the creation of simple structured data \"objects\" that don't require much coding overhead.\n\n\nTuples are a type of _sequence_, similar to **list**, which you've already seen.  They primary difference between a **tuple** and a **list** is that a tuple is `immutable`, which means that it's value cannot be changed once it is defined. A tuple is implemented using `()`:\n\n```python\nnum_tuple = (4, 23, 654, 2, 0, -12, 4391)\nstr_tuple = ('energy', 'water', 'carbon')\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAs with a **list**, a **tuple** may contain mixed data types, but this is not usually recommended.\n\nBecause they are both [_sequences_](https://docs.python.org/3/library/stdtypes.html#typesseq), tuples and lists share many of the same methods. For example, just like lists, the `len()` command returns the length of the tuple.\n\n```python\nlen(str_tuple)\n>>> 3\n```\n\nThe `min()` and `max()` commands can also be used to find the minimum and maximum values in a tuple. For a tuple of strings, this corresponds to the alphabetically first and last elements.\n\n```python\nmin(str_tuple)\n>>> 'carbon'\n\nmax(str_tuple)\n>>> 'water'\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>len()</code>, <code>min()</code>, and <code>max()</code> commands to find the length, minimum, and maximum of <code>num_tuple</code>.\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Other ways to create tuples\nTuples can also be constructed by:\n<ul>\n    <li> Using a pair of parentheses to indicate an empty tuple: <code>()</code>\n    <li> Using a trailing comma for a tuple with a single element: <code>a,</code> or <code>(a,)</code>\n    <li> Separating items with commas: <code>a, b, c</code> or <code>(a, b, c)</code>\n    <li> using the <code>tuple()</code> built-in function: <code>tuple(iterable)</code>.\n</ul>\n<div class=\"python\">\n    üêç <b>Note.</b> An <i>iterable</i> is any object that is capable of returning its contents one at a time. Strings are iterable objects, so <code>tuple('abc')</code> returns <code>('a', 'b', 'c')</code>.\n</div>\n \n```python\ntuple('earth')\n>>> ('e', 'a', 'r', 't', 'h')\n```\n\n\n\n\n## ‚úèÔ∏è Try it.  \nCreate three separate <b>tuples</b> containing the latitude and longitudes of the following cities: \n\n1. Los Angeles, CA (34.05, -118.25)\n2. Johannesburg, South Africa (-26.20, 28.05)\n2. Cairo, Egypt (30.03, 31.23)\n3. Create a fourth tuple that is made up of the three tuples (i.e. a \"tuple of tuples\").\n\n\n### Indexing <a id='tuple_indexing'></a>\nAs you learned with lists, any element of a _sequence_ data type can be referenced by its position within the sequence. To access an element in a sequence by its index, use square brackets `[]`.\n\nIndividual elements of tuples are accessed in the exact same manner as lists:\n```python\nnum_tuple[0]\n>>> 4\n```\n\n```python\nnum_tuple[-2]\n>>> -12\n```\n\n```python\nword_tuple = tuple('antidisestablishmentarianism')\n\nword_tuple[14]\n>>> 's'\n\nword_tuple[::3]\n>>> 'aistlhnrnm'\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse indexing to create a new tuple from the 2nd element in <code>str_tuple</code>. Find the 3rd element of this new tuple.\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Immutability <a id='tuple_immutability'></a>\n\nAll objects in python are either `mutable` or `immutable`. A `mutable` object is one whose value can change. In contrast, an `immutable` object has a fixed value. You've already been introduced to a few _immutable_ objects including numbers, strings and now, tuples. These objects cannot be altered once created.\n\n<div class=\"python\">\n    üêç <b>Note.</b>  If you attempt to modify the value of an existing tuple, you will get a <code>TypeError</code> exception from the Python interpreter.\n</div>\n\n```python\nnum_tuple[0] = 3\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input> in <module>\n----> 1 num_tuple[0] = 1\n\nTypeError: 'tuple' object does not support item assignment\n    \n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Tuple Operations <a id='tuple_operations'></a>\nBecause they are `immutable`, tuples do not have the same robust set of functions that lists have. Attempting to change a tuple (for example, by trying to `append` elements) will raise an <code>AttributeError</code>, because the `append` method isn't available to tuple objects.\n\n```python\n\ntuple_of_colors = ('red', 'blue', 'green', 'black', 'white')\ntuple_of_colors.append('pink') # <- UH-OH!\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-8-857308f688f6> in <module>\n----> 1 tuple_of_colors.append('pink')\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n```\n\nInstead of appending data to an existing tuple, when you want to change the contents of a tuple, you need to either create a new one, or modify the variable by re-defining it.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### DIVING DEEPER: Named Tuples <a id='named_tuples'></a>\n\nTuples are convenient for storing information that you do not want to change. However, remembering which index should be used for each value can lead to errors, especially if the tuple has a lot of fields and is constructed far from where it is used. \n\nAs an example, we created the coordinate location of Cairo, Egypt as:\n\n```python\ncairo_location = (30.03, 31.23)\n```\n\nBut wait... Are those coordinates stored <code>(latitude, longitude)</code> or <code>(longitude, latitude)</code>? You might think it is easy to sort this out for most cities, but for Cairo it's really difficult!\n\nPython has an additional immutable collection data type called a **namedtuple** which assigns names, as well as the numerical index, to each member. The **namedtuple** is part of the standard python library but it is not immediately available. In order to use the **namedtuple** data type, you first need to <code>import</code> it to your working environment. We will be using the <code>import</code> command quite a bit in order to extend what python can do and take advantage of all the tools that people have developed for environmental data science. For now, we need to <code>import</code> **namedtuple** <code>from</code> the **collections** library within python. The code for that looks like this:\n\n```python\nfrom collections import namedtuple\n```\n\n\n\nOnce we import the **namedtuple**, we can create a new kind of custom data type that we can use to store our locations:\n\n```python\nLocation = namedtuple('Location', ['latitude', 'longitude'])\n```\n\nIn the code above, the first argument to the <code>namedtuple</code> function is the name of the new tuple object type you want to create. We called this new object type a `Location`. The second argument is a list of the field names that the `Location` objects will have. In general, `Location` objects on Earth are defined by two pieces of information: the `latitude` and the `longitude`. \n\nNow that we've defined this new `Location` object type, we can create a new Location object using this code:\n\n```python\ncairo_location = Location(latitude=30.03, longitude=31.23)\n```\nNote that this code isn't that different than the code we used to make a **tuple**:\n\n```python\ncairo_location = tuple(30.03, 31.23)\n```\n\nThe difference is that we are using our custom **namedtuple** type called `Location`, and we are able to specify exactly which values correspond to the latitude and longitude fields. We can retrieve any field in our `Location` tuple by specifying the field:\n\n```python\ncairo_location.latitude\n>>> 30.03\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n","srcMarkdownNoYaml":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](2-1_control_flow_statements.ipynb) | [üè† Course Home](../index.ipynb) |  [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [‚û°Ô∏è Next Session](3-1_numpy.ipynb) |\n\n\nProbably the easiest mental model for thinking about structured data is a spreadsheet. You are all familiar with Excel spreadsheets, with their numbered rows and lettered columns. In the spreadsheet, data is often \"structured\" so that each row is an entry, and each column is perhaps a variable recorded for that entry. \n\n![structured-data](assets/structured-data.png)\n\nEnvironmental data map really well to this model, especially data collected over time. A spreadsheet of weather observations would have a new row for each observation period, and then the columns would be the meteorological data that was collected at that time. As we move into our data science tools, we will see that a major aspect of these tools is creating efficient ways of working with structured data. \n\nThat being said, Python has a number of built-in data types that can be used to organize data in a structured manner. These basic data types containing structured data are all lumped into a single broad category called `collections`. Within these `collection` data types, some of the data types are `sequences`, which means that the items in the `collection` have a deterministic ordering. You've already used the two most common `sequence` data types: the **string** and the **list**. A **string** is simply an ordered collection of characters, while a **list** data type  structures a collection of anything into an ordered series of elements that can be referenced by their position in the **list**. \n\nIn this lesson, we are going to learn about an additional `sequence`, called a **tuple**, as well as two `collection` data types called sets (**set**) and dictionaries (**dict**). \n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session Topics\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> üìå <a href=\"#dictionaries\">Dictionaries</a> </li> \n    <ul class=\"b\">\n        <li> <a href=\"#accessing_elements\">Accessing elements</a> </li>\n        <li> <a href=\"#keys_and_values\"><code>keys()</code> and <code>values()</code> </a></li>\n        <li> <a href=\"#looping\">Looping through dictionaries</a> using <code>values()</code> </li>\n        <li> <a href=\"#accessing_unassigned\">Accessing un-assigned elements in Dictionaries</a> </li>\n    </ul>\n    <li> üìå <a href=\"#sets\">Sets</a> </li>\n      <ul class=\"b\">\n        <li> <a href=\"#mutability\"> Mutability</a> </li>\n        <li> <a href=\"#mixed_ypes\">Mixed Data Types in Sets </a></li>\n        <li> <a href=\"#set_methods\">Set Methods</a></li>\n    </ul>\n    <li> üìå <a href=\"#tuples\">Tuples</a> </li>\n    <ul class=\"b\">\n        <li> <a href=\"#tuple_indexing\">Indexing</a> </li>\n        <li> <a href=\"#tuple_immutability\">Immutability</a>\n        </li>\n        <li> <a href=\"#named_tuples\">Named tuples</a> </li>\n    </ul>\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\n### Instructions\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n# Collection Summary\n\n![collections.jpg](assets/collections.jpg)\n\n**Note**: Applying the `sorted()` function to any of these collections will produce a sorted `list`. \n\n## 1. Dictionaries <a id=\"dictionaries\"></a>\n\n> **TLDR**: Dictionaries are a very common collection type that allows data to be organized using a `key:value` framework. Because of the similarity between `key:value` pairs and many data structures (e.g. \"lookup tables\"), you will see Dictionaries quite a bit when working in python\n\nThe first collection we will look at today is the dictionary, or **dict**. This is one of the most powerful data structures in python. It is a `mutable`, `unordered` collection, which means that it can be altered, but elements within the structure cannot be referenced by their position and they cannot be sorted. \n\nYou can create a dictionary using the `{}`, providing both a `key` and a `value`, which are separated by a `:`.\n\n```python\nenvironmental_disciplines = {\n    'ecology':'The relationships between organisms and their environments.',\n    'hydrology':'The properties, distribution & effects of water on the surface, subsurface, & atmosphere.',\n    'geology':'The origin, history, and structure of the earth.',\n    'meteorology':'The phenomena of the atmosphere, especially weather and weather conditions.'\n    }\n```\n\n<div class=\"python\">\n    üêç <b>Note.</b> The use of whitespace and indentation is important in python. In the example above, the dictionary entries are indented relative to the brackets <code>{</code> and <code>}</code>. In addition, there is no space between the <code>'key'</code>, the <code>:</code>, and the <code>'value'</code> for each entry. Finally, notice that there is a <code>,</code> following each dictionary entry. This pattern is the same as all of the other <i>collection</i> data types we've seen so far, including <b>list</b>, <b>set</b>, and <b>tuple</b>.\n</div>\n\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n### Accessing elements in Dictionaries <a id=\"accessing elements\"></a>\n\nAccess an element in a dictionary is easy if you know what you are looking for. For example, if I want to know the definition of `ecology`, I can simply retireve the value of this defition using the key as my index into the dictionary:\n\n```python\nenvironmental_disciplines['ecology']\n>>> 'The relationships between organisms and their environments.'\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nTry accessing the some of the definitions in the <code>environmental_disciplines</code> dictionary.\n\n\nBecause dictionaries are _mutable_, it is easy to add additional entries. This is done using the following notation:\n\n```python\n    environmental_discplines['geomorphology'] =  'The evolution and configuration of landforms.'\n```\n\n\n\n## ‚úèÔ∏è Try it.  \n<b>Biogeochemistry</b> is defined as <b>\"the chemical, physical, geological, and biological processes and reactions that govern the composition of the natural environment.\"</b> Add this discpline to the dictionary <code>environmental_disciplines</code>.\n\n\n### Accessing dictionary keys and values <a id=\"keys_and_values\"></a>\n\nEvery dictionary has builtin methods to retrieve its `keys` and `values`. These functions are called, appropriately, `keys()` and `values()`\n\n```python\n\ndisciplines = environmental_disciplines.keys()\nprint(disciplines)\n>>> dict_keys(['ecology', 'hydrology', 'geology', 'meteorology', 'biogeochemistry'])\n\n```\n\n```python\n\ndefinitions = environmental_disciplines.values()\nprint(definitions)\n>>> dict_values(\n    ['The relationships between organisms and their environments.', \n     'The properties, distribution & effects of water on the surface, subsurface, & atmosphere.', \n     'The origin, history, and structure of the earth.', \n     'The phenomena of the atmosphere, especially weather and weather conditions.', \n     'The chemical, physical, geological, and biological processes and reactions that govern the composition of the natural environment.'])\n\n```\n<div class=\"python\">\nüêç <b>Note.</b> The <code>keys()</code> and <code>values()</code> functions return a <code>dict_key</code> object and <code>dict_values</code> object, respectively. Each of these objects contains a <b>list</b> of either the keys or values. You can force the result of the <code>keys()</code> or <code>values()</code> function into a <b>list</b> by wrapping either one in a <code>list()</code> command. \n\nFor example: <code>key_list = list(environmental_disciplines.keys())</code> will return a <b>list</b> of the keys in <code>environmental_disciplines</code>\n</div>\n\n\n### Looping through Dictionaries <a id=\"looping\"></a>\n\nPython has an efficient way to loop through all the keys and values of a dictionary at the same time. The `items()` method returns a **tuple** containing a `(key, value)` for each element in a dictionary. In practice this means that we can loop through a dictionary in the following way:\n\n```python\nmy_dict = {'name': 'Homer Simpson',\n           'occupation': 'Nuclear Engineer',\n           'address': '742 Evergreen Terrace',\n           'city': 'Springfield',\n           'state': ' ? '\n          }\n\nfor key, value in my_dict.items():\n    print(f\"{key.capitalize()}: {value}.\")\n\n\n>>> Name: Homer Simpson.\n    Occupation: Nuclear Engineer.\n    Address: 742 Evergreen Terrace.\n    City: Springfield.\n    State:  ? .\n\n```\n\n\n\n## ‚úèÔ∏è Try it. \nLoop through the <code>environmental_disciplines</code> dictionary and print out a sentence providing the definition of each subject (e.g. \"Ecology is the study of....\").\n\n\n### Accessing un-assigned elements in Dictionaries <a id=\"accessing_unassigned\"></a>\n\nAttempting to retrieve an element of a dictionary that doesn't exist is the same as requesting an index of a **list** that doesn't exist - Python will raise an Exception. For example, if I attempt to retrieve the definition of a field that hasn't been defined, then I get an error.\n\n```python\nenvironmental_disciplines['xenohydrology']\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-46-d4d91bf18209> in <module>\n----> 1 environmental_disciplines['xenohydrology']\n\nKeyError: 'xenohydrology'\n```\n\nWhile it's easy to determine what indicies are in a **list** using the `len()` command, it's sometimes hard to know what elements are in a **dict** (but we'll learn how soon!). Regardless, to avoid getting an error when requesting an element from a **dict**, you can use the `get()` function. The `get()` function will return `None` if the element doesn't exist:\n\n```python\nunknown_definition = environmental_disciplines.get('xenohydrology')\nprint(unknown_definition)\n>>> None\n\n```\n\nThe `get()` function will also allow you to pass an additional argument. This additional argument specifies a \"default\" value which will be returned for any undefined elements:\n\n```python\nenvironmental_disciplines.get('xenohydrology', 'Discipline not defined.')\n>>> 'Discipline not defined.'\n\n```\n\n```python\nlist_of_disciplines = ['climatology', 'ecology', 'meteorology', 'geology', 'biogeochemistry']\n```\n\n\n\n## ‚úèÔ∏è Try it.  \nUsing the list of discplines given above, write a <code>for</code> loop that either prints the definition of the discipline, or prints 'Discipline not defined.'\n\n\n## 2. Sets <a id='tuples'></a>\n\n> **TLDR**: Sets are useful for comparing groups of items to determine their overlap or their differences. Sometimes used in data science, but rarely when working with large datasets.\n\nAs opposed to a **list** or **tuple**, a **set** is not a  _sequence_. Although a set is _iterable_ (like the _sequences_ you've already met), a **set** is an _unordered_ collection data type, which means it is not a _sequence_. However, a set is mutable, which means - like a **list** - it can be modified after being created. Finally - and most uniquely - a **set** has no duplicate elements. In this sense, a **set** in python is very much like a mathematical set.\n\nWe've seen that a **list** is implemented using `[]`, while a **tuple** is implemented using `()`. \n\nA set is implemented using `{}`:\n\n```python\nnum_set = {1, 3, 6, 10, 15, 21, 28}\nstr_set = {'hydrology', 'ecology', 'geology', 'climatology'}\n\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n\nAs with all other collections, you can also create a **set** using the `set()` function:\n\n```python\nnum_set = set([1, 3, 6, 10, 15, 21, 28, 45, 45, 45, 45, 45])\n\n```\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>set()</code> function to create a set containing the first four prime numbers.\n\n### Mutability <a id=\"mutability\"></a>\n\nSets are `mutable`. \n\nTo remove an element from a set, use the `discard()` method:\n\n```python\n\nstr_set.discard('ecology')\n    \n```\n\nTo add an element from to set, use the `add()` method:\n\n```python\n\nstr_set.add('oceanography')\n    \n```\n\nTo add multiple elements to a set at the same time, use the `update()` method. The items to add should be contained in a **list**.\n\n```python\n\nstr_set.update(['oceanography', 'microbiology'])\n    \n```\n\n\n## ‚úèÔ∏è <b> Try it. </b> \n\nAdd <code>'biogeochemistry'</code> and <code>'meteorology'</code> to <code>str_set</code> and then remove <code>'ecology'</code>.\n\nMany of the same functions that worked on **list** and **tuple** also work for a **set**. \n\n```python\nlen(str_set)\n>>> 4\n```\n\nThe `min()` and `max()` commands can also be used to find the minimum and maximum values in a tuple. For a tuple of strings, this corresponds to the alphabetically first and last elements.\n\n```python\nmin(str_set)\n>>> 'climatology'\n\nmax(str_tuple)\n>>> 'oceanography'\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>len()</code>, <code>min()</code>, and <code>max()</code> commands to find the length, minimum, and maximum of <code>num_set</code>.\n\n\n### Mixed Data Types in Collections and Sequences <a id=\"mixed_types\"></a>\n\nAs a reminder, it's usually a good idea to make sure your sets are all of the same basic data type. The reason is because Python doesn't know how to compare the magnitude of different data types. \n\nWhich is larger: `ecology`, or the number `3`? Python doesn't know the answer, and neither do I. If you try to use functions like `max` or `min` on a mixed data type **set** you will get a `TypeError` exception.\n\n\n```python\n\nmixed_set = {3, 4, 'ecology', 'biology'}\nmax(mixed_set)\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-49-a4da84ba3cd4> in <module>\n      1 mixed_set = {3, 4, 'ecology', 'biology'}\n----> 2 max(mixed_set)\n\nTypeError: '>' not supported between instances of 'int' and 'str'\n```\n\n### Set Methods <a id=\"set_methods\"></a>\n\nGiven their similarity to mathematical sets, there are some specific functions that allow us to compare and combine the contents of different sets. \n\n\n#### Union\n\nA union of sets contains all the items that are in any of the sets.\n\nThe union of sets $A$ and $B$ is defined as $ A \\cup B $. \n\n\n\n![image](assets/union.jpg)\n\n\n```python\nodds = {1, 3, 5, 7, 9, 11, 13, 15}\nevens = {2, 4, 6, 8, 10, 12, 14, 16}\n\nintegers = odds.union(evens)\nprint(integers)\n\n>>> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\n```\n\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n#### Intersection\n\nAn intersection of sets contains all the items that are found in all of the sets.\n\nThe intersection of sets $A$ and $B$ is defined as $ A \\cap B $. \n\n\n![image](assets/intersection.jpg)\n\n```python\n\nsquares = {4, 9, 16, 25, 36, 49}\nmultiples_of_nine = {9, 18, 27, 36, 45}\n\nsquares_divisible_by_nine = squares.intersection(multiples_of_nine)\nprint(squares_divisible_by_nine)\n\n>>> {9, 36}\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>intersection()</code> method to determine who knows both `python` and `R`.\n\n\n#### Difference\n\nAn difference of two sets contains all the items that are in A but not in B.\n\nThe difference (or relative complement) of set $A$ and $B$ is defined as $ A \\setminus B $. \n\n\n![image](assets/difference.jpg)\n\n\n```python\n\nsquares = {4, 9, 16, 25, 36, 49}\nmultiples_of_nine = {9, 18, 27, 36, 45}\n\nsquares_not_divisible_by_nine = squares.difference(multiples_of_nine)\nprint(squares_not_divisible_by_nine)\n\n>>> {16, 49, 4, 25}\n\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Because a <b>set</b> is an <i>unordered</i> collection, the result of a set function will return elements in an unpredictable order. In the example above, the intersection returned `{16, 49, 4, 25}` rather than `{4, 16, 25, 49}`, which you may have expected.\n</div>\n \n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>difference()</code> method to determine who knows <b>R</b>, but does not know <b>Python</b>.\n\n\n#### Symmetric Difference\n\nThis method returns all the items that are _unique_ to each set.\n\nThe [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference) (or disjunctive union) of sets $A$ and $B$ is $A \\triangle B$ (also sometimes written as $A \\oplus B$)\n\n![image](assets/symmetric-difference.jpg)\n\n```python\n\nsquares = {4, 9, 16, 25, 36, 49}\nmultiples_of_nine = {9, 18, 27, 36, 45}\n\nsquares_not_divisible_by_nine = squares.symmetric_difference(multiples_of_nine)\nprint(squares_not_divisible_by_nine)\n\n>>> {16, 49, 18, 4, 25, 27, 45}\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>symmetric_difference()</code> method to determine who only knows <i>either</i> R or Python.\n\n\n### Additional Set Methods: isdisjoint(), issubset(), issuperset()\n\nThere are three additional set functions that allow you to determine the relationships between two sets. Each of these functions returns either `True` or `False`, which means they are `Boolean` operators.\n\n**isdisjoint()** determines if two sets are [disjoint](https://en.wikipedia.org/wiki/Disjoint_sets). It returns `True` if the contents of two sets are completely distinct, and `False` if they have any overlap\n\n\n\n```python\nodds.isdisjoint(evens)\n>>> True\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Set <i>A</i> is <b>disjoint</b> from set <i>B</i> if, and only if, the <b>intersection</b> of <i>A</i> and <i>B</i> is <code>None</code>.\n</div>\n\n**issubset()** returns `True` if the content of set A is a [subset](https://en.wikipedia.org/wiki/Subset) of set B, and `False` if it is not a subset.\n\n```python\n\nprimes = {1, 3, 5, 7, 11}\nprimes.issubset(odds)\n>>> True\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Set <i>A</i> is a <b>subset</b> of set <i>B</i> if, and only if, the <b>intersection</b> of <i>A</i> and <i>B</i> is <i>A</i>.\n</div>\n\n\n**issupserset()** returns `True` if the content of set A is a superset of set B, and `False` if it is not a superset.\n\n\n```python\n\nodds.issuperset(primes)\n>>> True\n```\n<div class=\"python\">\n    üêç <b>Note.</b> Set <i>A</i> is a <b>superset</b> of set <i>B</i> if, and only if, set <i>B</i> is a subset of <i>A</i>.\n</div>\n\n\n\nThere is a lot more to learn about dictionaries, including methods for deleting elements, merging dictionaries, and learning about additional _collection_ types like **OrderedDict** that allow you to preserve the arrangement of dictionary elements (essentially making them _sequences_). We will keep coming back to them throughout the class. If you want to learn more, check out the great material in our reading: [Dictionaries](https://proquest-safaribooksonline-com.proxy.library.ucsb.edu:9443/book/programming/python/9781449355722/4dot-introducing-python-object-types/dictionaries_html)\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n## 3. Tuples <a id='tuples'></a>\n\n> **TLDR:** Tuples are a kind of list that can't be altered. They are not very common in data science applications, but you might run across them from time to time. \"[Named Tuples](#named_tuples)\" allow for the creation of simple structured data \"objects\" that don't require much coding overhead.\n\n\nTuples are a type of _sequence_, similar to **list**, which you've already seen.  They primary difference between a **tuple** and a **list** is that a tuple is `immutable`, which means that it's value cannot be changed once it is defined. A tuple is implemented using `()`:\n\n```python\nnum_tuple = (4, 23, 654, 2, 0, -12, 4391)\nstr_tuple = ('energy', 'water', 'carbon')\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\nAs with a **list**, a **tuple** may contain mixed data types, but this is not usually recommended.\n\nBecause they are both [_sequences_](https://docs.python.org/3/library/stdtypes.html#typesseq), tuples and lists share many of the same methods. For example, just like lists, the `len()` command returns the length of the tuple.\n\n```python\nlen(str_tuple)\n>>> 3\n```\n\nThe `min()` and `max()` commands can also be used to find the minimum and maximum values in a tuple. For a tuple of strings, this corresponds to the alphabetically first and last elements.\n\n```python\nmin(str_tuple)\n>>> 'carbon'\n\nmax(str_tuple)\n>>> 'water'\n\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse the <code>len()</code>, <code>min()</code>, and <code>max()</code> commands to find the length, minimum, and maximum of <code>num_tuple</code>.\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Other ways to create tuples\nTuples can also be constructed by:\n<ul>\n    <li> Using a pair of parentheses to indicate an empty tuple: <code>()</code>\n    <li> Using a trailing comma for a tuple with a single element: <code>a,</code> or <code>(a,)</code>\n    <li> Separating items with commas: <code>a, b, c</code> or <code>(a, b, c)</code>\n    <li> using the <code>tuple()</code> built-in function: <code>tuple(iterable)</code>.\n</ul>\n<div class=\"python\">\n    üêç <b>Note.</b> An <i>iterable</i> is any object that is capable of returning its contents one at a time. Strings are iterable objects, so <code>tuple('abc')</code> returns <code>('a', 'b', 'c')</code>.\n</div>\n \n```python\ntuple('earth')\n>>> ('e', 'a', 'r', 't', 'h')\n```\n\n\n\n\n## ‚úèÔ∏è Try it.  \nCreate three separate <b>tuples</b> containing the latitude and longitudes of the following cities: \n\n1. Los Angeles, CA (34.05, -118.25)\n2. Johannesburg, South Africa (-26.20, 28.05)\n2. Cairo, Egypt (30.03, 31.23)\n3. Create a fourth tuple that is made up of the three tuples (i.e. a \"tuple of tuples\").\n\n\n### Indexing <a id='tuple_indexing'></a>\nAs you learned with lists, any element of a _sequence_ data type can be referenced by its position within the sequence. To access an element in a sequence by its index, use square brackets `[]`.\n\nIndividual elements of tuples are accessed in the exact same manner as lists:\n```python\nnum_tuple[0]\n>>> 4\n```\n\n```python\nnum_tuple[-2]\n>>> -12\n```\n\n```python\nword_tuple = tuple('antidisestablishmentarianism')\n\nword_tuple[14]\n>>> 's'\n\nword_tuple[::3]\n>>> 'aistlhnrnm'\n```\n\n\n\n## ‚úèÔ∏è <b> Try it. </b> \nUse indexing to create a new tuple from the 2nd element in <code>str_tuple</code>. Find the 3rd element of this new tuple.\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Immutability <a id='tuple_immutability'></a>\n\nAll objects in python are either `mutable` or `immutable`. A `mutable` object is one whose value can change. In contrast, an `immutable` object has a fixed value. You've already been introduced to a few _immutable_ objects including numbers, strings and now, tuples. These objects cannot be altered once created.\n\n<div class=\"python\">\n    üêç <b>Note.</b>  If you attempt to modify the value of an existing tuple, you will get a <code>TypeError</code> exception from the Python interpreter.\n</div>\n\n```python\nnum_tuple[0] = 3\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input> in <module>\n----> 1 num_tuple[0] = 1\n\nTypeError: 'tuple' object does not support item assignment\n    \n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Tuple Operations <a id='tuple_operations'></a>\nBecause they are `immutable`, tuples do not have the same robust set of functions that lists have. Attempting to change a tuple (for example, by trying to `append` elements) will raise an <code>AttributeError</code>, because the `append` method isn't available to tuple objects.\n\n```python\n\ntuple_of_colors = ('red', 'blue', 'green', 'black', 'white')\ntuple_of_colors.append('pink') # <- UH-OH!\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-8-857308f688f6> in <module>\n----> 1 tuple_of_colors.append('pink')\n\nAttributeError: 'tuple' object has no attribute 'append'\n\n```\n\nInstead of appending data to an existing tuple, when you want to change the contents of a tuple, you need to either create a new one, or modify the variable by re-defining it.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### DIVING DEEPER: Named Tuples <a id='named_tuples'></a>\n\nTuples are convenient for storing information that you do not want to change. However, remembering which index should be used for each value can lead to errors, especially if the tuple has a lot of fields and is constructed far from where it is used. \n\nAs an example, we created the coordinate location of Cairo, Egypt as:\n\n```python\ncairo_location = (30.03, 31.23)\n```\n\nBut wait... Are those coordinates stored <code>(latitude, longitude)</code> or <code>(longitude, latitude)</code>? You might think it is easy to sort this out for most cities, but for Cairo it's really difficult!\n\nPython has an additional immutable collection data type called a **namedtuple** which assigns names, as well as the numerical index, to each member. The **namedtuple** is part of the standard python library but it is not immediately available. In order to use the **namedtuple** data type, you first need to <code>import</code> it to your working environment. We will be using the <code>import</code> command quite a bit in order to extend what python can do and take advantage of all the tools that people have developed for environmental data science. For now, we need to <code>import</code> **namedtuple** <code>from</code> the **collections** library within python. The code for that looks like this:\n\n```python\nfrom collections import namedtuple\n```\n\n\n\nOnce we import the **namedtuple**, we can create a new kind of custom data type that we can use to store our locations:\n\n```python\nLocation = namedtuple('Location', ['latitude', 'longitude'])\n```\n\nIn the code above, the first argument to the <code>namedtuple</code> function is the name of the new tuple object type you want to create. We called this new object type a `Location`. The second argument is a list of the field names that the `Location` objects will have. In general, `Location` objects on Earth are defined by two pieces of information: the `latitude` and the `longitude`. \n\nNow that we've defined this new `Location` object type, we can create a new Location object using this code:\n\n```python\ncairo_location = Location(latitude=30.03, longitude=31.23)\n```\nNote that this code isn't that different than the code we used to make a **tuple**:\n\n```python\ncairo_location = tuple(30.03, 31.23)\n```\n\nThe difference is that we are using our custom **namedtuple** type called `Location`, and we are able to specify exactly which values correspond to the latitude and longitude fields. We can retrieve any field in our `Location` tuple by specifying the field:\n\n```python\ncairo_location.latitude\n>>> 30.03\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è <b> Run the cell below. </b>\n</div>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"2-2_structured_data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Session 2-2: Structured Data in Python"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}