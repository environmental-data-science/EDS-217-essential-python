{"title":"Interactive Session: Variables & Operators","markdown":{"yaml":{"title":"Interactive Session: Variables & Operators"},"headingText":"Instructions","containsRefs":false,"markdown":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](0-2_hello_data_science.ipynb) | [üè† Course Home](../index.ipynb) |  [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [‚û°Ô∏è Next Session](1-2_lists.ipynb) |\n\n\n![variables.jpg](assets/variables.jpg)\n\nAll programming languages contain the same fundamental tools: `variables`, `operators`, and `functions`. This session will covers the first two of these basic elements of the Python language. \n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session Topics\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> üìå Numbers: <code>int</code>, <code>float</code> </li>\n    <ul class=\"b\">\n        <li> Arithmetic operators </li>\n        <li> Boolean operators </li>\n        <li> Built-in functions for numerical objects </li>\n    </ul>\n    <li> üìå Strings </li>\n    <ul class=\"b\">\n        <li> Built-in functions for strings </li>\n        <li> Formatted print statements </li>\n    </ul>\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n## Variables + Operators\nVariables are used in Python to create references to an object (e.g. string, float, DataFrame, etc.). Variables are assigned in Python using `=`.\n\n<div class=\"python\">\n    üêç <b>Note.</b>\n    Variable names should be chosen carefully and should indicate what the variable is used for. Python etiquette generally dictates using lowercase variable names. Underscores are common. Variable names cannot start with a number. Also, there are several names that cannot be used as variables, as they are reserved for built-in Python commands, functions, etc. We will see examples of these throughout this session.\n</div>\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Numbers\nNumbers in Python can be either **integers** (whole numbers) or **floats** (floating point decimal numbers).\n\nThe following syntax is used to define an integer:\n```python\nx = 1\ny = 42\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe following syntax is used to define a float:\n```python\na = 1.0\nb = 42.0\nc = 23.782043\n```\n\n### <div class=\"example\"> ‚úèÔ∏è Try it.\nDefine variables a, b, and c according to the values above.\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Arithmetic Operators </span> </h4>\n\nJust like a calculator, basic arithmetic can be done on number variables. Python uses the following symbols \n\n| Symbol | Task           |\n| :----: | :---           |\n|   +    | Addition       |\n|   -    | Subtraction    |\n|   *    | Multiplication |\n|   /    | Division       |\n|   %    | Modular        |\n|  //    | Floor division |\n|  **    | Power          |\n\n\n\n### <div class=\"example\"> ‚úèÔ∏è  Try it.\nPractice these arithmetic operations by running the code in the cell below. Feel free to add more to test the operators. Use the <code>print()</code>  command to output your answers.\n</div>\n\nNotice that the order of operations applies.\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Boolean Operators </span> </h4>\n\nBoolean operators evaluate a condition between two operands, returning `True` if the condition is met and `False` otherwise. `True` and `False` are called **booleans**.\n\n| Symbol | Task                     |\n| :----: | :----------------------  |\n|   ==   | Equals                   |\n|  !=    | Does not equal           |\n|   <    | Less than                |\n|   >    | Greater than             |\n|   <=   | Less than or equal to    |\n|   >=   | Greater than or equal to |\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Built-in functions </span> </h4>\n\nPython has a number of built-in functions. Here we will introduce a few of the useful built-in functions for numerical variables. \n\nThe `type()` function is used to check the data type of a variable. For numerical arguments, either `float` or `int` is returned.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe `isinstance()` function is used to determine whether an argument is in a certain class. It returns a boolean value. Multiple classes can be checked at once.\n\n```python\nisinstance(12, int)\n>>> True\n\nisinstance(12.0,int)\n>>> False\n\nisinstance(12.0,(int,float))\n>>> True\n```\n\nThe commands `int()` and `float()` are used to convert between data types.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nNotice that when converting a float value to an integer, the `int()` command always rounds *down* to the nearest whole number.\n\nTo round a float to the nearest whole number, use the function `round()`. You can specify the number of decimal places by adding an integer as an argument to the `round()` function .\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe `complex()` function is used to define a complex number. We won't be using complex numbers in this course, but it's important to know that python is happy to handle them.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nTo return the absolute value of a number, use the `abs()` function.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n\nThe `divmod()` function returns the quotient and remainder of two input operands in a tuple. (Tuples are another data type that we will cover later.)\n\n```python\ndivmod(64, 4.2)\n```\n\nOutput:\n```\n(15.0, 0.9999999999999973)\n```\n\n---\n\nThe `pow()` function is an alternative to the `**` operator for raising a number to an exponent, i.e. $x^y$. An optional third argument is used to return the modulus (`%`) of the power of a number, i.e. $x^y$ % $z$.\n\n```python\npow(8,2)\n```\n\nOutput:\n```\n64\n```\n\n```python\npow(8,2,3)\n```\n\nOutput:\n```\n1\n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Strings\nPieces of text in Python are referred to as strings. Strings are defined with either single or double quotes. The only difference between the two is that it is easier to use an apostrophe with double quotes.\n```python\nmytext = 'This is a string.'\nmytext2 = \"This is also a string.\"\n```\nTo use an apostrope or single quotes inside a string defined by single quotes (or to use double quotes), use a single backslash ( \\\\ ) referred to as an \"escape\" character.\n```python\nq1a = \"What is Newton's 1st law of motion?\"\nq1b = 'What is Newton\\'s 1st law of motion?'\n```\n\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Built-in functions </span> </h4>\n\nJust like the `int()` and `float` commands, the `str()` command converts a number to a string.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe `+` operator can be used to combine two or more strings.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe commands `string.upper()` and `string.capitalize()` can be used to convert all letters in the string to uppercase and capitalize the first letter in the string, respectively.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Formatted print statements </span> </h4>\n\nPython uses C-style formatting to create new, formatted strings with the `%` operator. This is useful for printing variables in functions and when asking for user input, both of which we will discuss later. Formatted print statements contain a string argument with one of the following specifiers:\n\n| Symbol | Task                     |\n| :----: | :----------------------  |\n|  `%s`  | Strings                  |\n|  `%d`  | Integers                 |\n|  `%f`  | Floating point numbers   |\n\nThe second argument can contain a variable name or a tuple, which is a list of a fixed size. The arguments are separated by the `%` operator.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nWhen printing floats, the `%f` argument specifier can be accompanied by a number of decimal places to print only a certain number of digits.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<hr style=\"border-top: 0.5px solid black; margin-top: 1px; margin-bottom: 1px\"></hr>\n\nThe `input()` function allows for user input within a script or program. Importantly, when Python prompts the user for input, the input is stored as a string, regardless of what it is. Thus, if you write a function (a type of object we will explore in a future session) prompting the user for a number, you must be sure to convert the variable storing the input to an integer or float. \n\nTo demonstrate this, run the following cell, entering the month in which you were born in numerical format (e.g. if you were born in April, your input would be `4`) when prompted.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n","srcMarkdownNoYaml":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](0-2_hello_data_science.ipynb) | [üè† Course Home](../index.ipynb) |  [üö¶ EDS217 Vibes](https://eds217-stoplight.herokuapp.com) | [‚û°Ô∏è Next Session](1-2_lists.ipynb) |\n\n\n![variables.jpg](assets/variables.jpg)\n\nAll programming languages contain the same fundamental tools: `variables`, `operators`, and `functions`. This session will covers the first two of these basic elements of the Python language. \n\n<p style=\"height:1pt\"> </p>\n\n<div class=\"boxhead1\">\n    Session Topics\n</div>\n\n<div class=\"boxtext1\">\n<ul class=\"a\">\n    <li> üìå Numbers: <code>int</code>, <code>float</code> </li>\n    <ul class=\"b\">\n        <li> Arithmetic operators </li>\n        <li> Boolean operators </li>\n        <li> Built-in functions for numerical objects </li>\n    </ul>\n    <li> üìå Strings </li>\n    <ul class=\"b\">\n        <li> Built-in functions for strings </li>\n        <li> Formatted print statements </li>\n    </ul>\n</ul>\n</div>\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt\"></hr>\n\n### Instructions\nWe will work through this notebook together. To run a cell, click on the cell and press \"Shift\" + \"Enter\" or click the \"Run\" button in the toolbar at the top. \n\n<p style=\"color:#408000; font-weight: bold\"> üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚ñ∂Ô∏è &nbsp; &nbsp; This symbol designates a cell with code to be run.  </p>\n\n<p style=\"color:#008C96; font-weight: bold\"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates a partially coded cell with an example.  </p>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n## Variables + Operators\nVariables are used in Python to create references to an object (e.g. string, float, DataFrame, etc.). Variables are assigned in Python using `=`.\n\n<div class=\"python\">\n    üêç <b>Note.</b>\n    Variable names should be chosen carefully and should indicate what the variable is used for. Python etiquette generally dictates using lowercase variable names. Underscores are common. Variable names cannot start with a number. Also, there are several names that cannot be used as variables, as they are reserved for built-in Python commands, functions, etc. We will see examples of these throughout this session.\n</div>\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Numbers\nNumbers in Python can be either **integers** (whole numbers) or **floats** (floating point decimal numbers).\n\nThe following syntax is used to define an integer:\n```python\nx = 1\ny = 42\n```\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe following syntax is used to define a float:\n```python\na = 1.0\nb = 42.0\nc = 23.782043\n```\n\n### <div class=\"example\"> ‚úèÔ∏è Try it.\nDefine variables a, b, and c according to the values above.\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Arithmetic Operators </span> </h4>\n\nJust like a calculator, basic arithmetic can be done on number variables. Python uses the following symbols \n\n| Symbol | Task           |\n| :----: | :---           |\n|   +    | Addition       |\n|   -    | Subtraction    |\n|   *    | Multiplication |\n|   /    | Division       |\n|   %    | Modular        |\n|  //    | Floor division |\n|  **    | Power          |\n\n\n\n### <div class=\"example\"> ‚úèÔ∏è  Try it.\nPractice these arithmetic operations by running the code in the cell below. Feel free to add more to test the operators. Use the <code>print()</code>  command to output your answers.\n</div>\n\nNotice that the order of operations applies.\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Boolean Operators </span> </h4>\n\nBoolean operators evaluate a condition between two operands, returning `True` if the condition is met and `False` otherwise. `True` and `False` are called **booleans**.\n\n| Symbol | Task                     |\n| :----: | :----------------------  |\n|   ==   | Equals                   |\n|  !=    | Does not equal           |\n|   <    | Less than                |\n|   >    | Greater than             |\n|   <=   | Less than or equal to    |\n|   >=   | Greater than or equal to |\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Built-in functions </span> </h4>\n\nPython has a number of built-in functions. Here we will introduce a few of the useful built-in functions for numerical variables. \n\nThe `type()` function is used to check the data type of a variable. For numerical arguments, either `float` or `int` is returned.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe `isinstance()` function is used to determine whether an argument is in a certain class. It returns a boolean value. Multiple classes can be checked at once.\n\n```python\nisinstance(12, int)\n>>> True\n\nisinstance(12.0,int)\n>>> False\n\nisinstance(12.0,(int,float))\n>>> True\n```\n\nThe commands `int()` and `float()` are used to convert between data types.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nNotice that when converting a float value to an integer, the `int()` command always rounds *down* to the nearest whole number.\n\nTo round a float to the nearest whole number, use the function `round()`. You can specify the number of decimal places by adding an integer as an argument to the `round()` function .\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe `complex()` function is used to define a complex number. We won't be using complex numbers in this course, but it's important to know that python is happy to handle them.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nTo return the absolute value of a number, use the `abs()` function.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n\nThe `divmod()` function returns the quotient and remainder of two input operands in a tuple. (Tuples are another data type that we will cover later.)\n\n```python\ndivmod(64, 4.2)\n```\n\nOutput:\n```\n(15.0, 0.9999999999999973)\n```\n\n---\n\nThe `pow()` function is an alternative to the `**` operator for raising a number to an exponent, i.e. $x^y$. An optional third argument is used to return the modulus (`%`) of the power of a number, i.e. $x^y$ % $z$.\n\n```python\npow(8,2)\n```\n\nOutput:\n```\n64\n```\n\n```python\npow(8,2,3)\n```\n\nOutput:\n```\n1\n```\n\n\n<hr style=\"border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px\"></hr>\n\n### Strings\nPieces of text in Python are referred to as strings. Strings are defined with either single or double quotes. The only difference between the two is that it is easier to use an apostrophe with double quotes.\n```python\nmytext = 'This is a string.'\nmytext2 = \"This is also a string.\"\n```\nTo use an apostrope or single quotes inside a string defined by single quotes (or to use double quotes), use a single backslash ( \\\\ ) referred to as an \"escape\" character.\n```python\nq1a = \"What is Newton's 1st law of motion?\"\nq1b = 'What is Newton\\'s 1st law of motion?'\n```\n\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Built-in functions </span> </h4>\n\nJust like the `int()` and `float` commands, the `str()` command converts a number to a string.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe `+` operator can be used to combine two or more strings.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nThe commands `string.upper()` and `string.capitalize()` can be used to convert all letters in the string to uppercase and capitalize the first letter in the string, respectively.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<h4 style=\"border:1px; border-style:solid; border-color:black; padding: 0.5em;\"> <span style=\"color:black\"> Formatted print statements </span> </h4>\n\nPython uses C-style formatting to create new, formatted strings with the `%` operator. This is useful for printing variables in functions and when asking for user input, both of which we will discuss later. Formatted print statements contain a string argument with one of the following specifiers:\n\n| Symbol | Task                     |\n| :----: | :----------------------  |\n|  `%s`  | Strings                  |\n|  `%d`  | Integers                 |\n|  `%f`  | Floating point numbers   |\n\nThe second argument can contain a variable name or a tuple, which is a list of a fixed size. The arguments are separated by the `%` operator.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\nWhen printing floats, the `%f` argument specifier can be accompanied by a number of decimal places to print only a certain number of digits.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<hr style=\"border-top: 0.5px solid black; margin-top: 1px; margin-bottom: 1px\"></hr>\n\nThe `input()` function allows for user input within a script or program. Importantly, when Python prompts the user for input, the input is stored as a string, regardless of what it is. Thus, if you write a function (a type of object we will explore in a future session) prompting the user for a number, you must be sure to convert the variable storing the input to an integer or float. \n\nTo demonstrate this, run the following cell, entering the month in which you were born in numerical format (e.g. if you were born in April, your input would be `4`) when prompted.\n\n<div class=\"run\">\n    ‚ñ∂Ô∏è Run the cell below.\n</div>\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"1-1_variables.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Interactive Session: Variables & Operators"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}