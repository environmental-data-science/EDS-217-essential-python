{"title":"Lecture 1 - Intro to Python and Environmental Data Science","markdown":{"yaml":{"title":"Lecture 1 - Intro to Python and Environmental Data Science"},"headingText":"EDS 217, Lecture 1: Introduction to Python and Environmental Data Science","containsRefs":false,"markdown":"\n\n\n- Course Repository: [https://github.com/environmental-data-science/eds217_2023](https://github.com/environmental-data-science/eds217_2023)\n\n- Course Website: [https://bit.ly/eds217_2023](https://bit.ly/eds217_2023)\n\n![data_science.jpg](assets/data_science.jpg)\n\n![environmental_data_science.jpg](assets/environmental_data_science.jpg)\n\n## Lecture Agenda\n\n1. 🐍 What Python?\n1. ❓ Why Python?\n1. 💻 How Python?\n\n> \"Python is powerful... and fast; \nplays well with others; \nruns everywhere; \nis friendly & easy to learn; \nis Open.\"\n\n## What is Python?\n\nPython is a *general-purpose, object-oriented programming language* that emphasizes _code readability_ through its generous use of white space. Released in 1989, Python is easy to learn and a favorite of programmers and developers.\n\n\n\n### High-level languages \n(Python, C, C++, Java, Javascript, R, Pascal)\n- Take less time to write\n- Shorter and easier to read\n- Portable, meaning that they can run on different kinds of computers with few or no modifications.\n\nThe engine that translates and runs Python is called the *Python Interpreter*\n\n### Natural vs. Formal Languages\n\n*Natural languages* are the languages that people speak. They are not designed (although they are subjected to various degrees of \"order\") and evolve naturally. \n\n\n\n\n\n*Formal languages* are languages that are designed by people for specific applications. \n- Mathematical Notation $E=mc^2$ \n- Chemical Notation: $\\text{H}_2\\text{O}$\n\n\n*Programming languages* are **formal languages that have been designed to express computations**.\n\n\n\n**Parsing**: The process of figuring out what the structure of a sentence or statement is (in a natural language you do this subconsciously). \n\n\nFormal Languages have **strict** syntax for _tokens_ and _structure_:\n\n- Mathematical syntax error: $E=\\$m🦆_2$ (bad tokens & bad structure)\n- Chemical syntax error: $\\text{G}_3\\text{Z}$ (bad tokens, but structure is okay)\n\n### Differences between Natural and Formal languages\n1. _Ambiguity_:\nNatural languages are full of ambiguity, which people parse using contextual clues. Formal languages are nearly or completely unambiguous; any statement has exactly one meaning, regardless of context.\n1. _Redundancy_:\nIn order to make up for ambiguity, natural languages employ lots of redundancy. Formal languages are less redundant and more concise.\n1. _Literalness_:\nFormal languages mean exactly what they say. Natural languages employ idioms and metaphors.\n\nThe inherent differences between familiar natural languages and unfamiliar formal languages creates one of the greatest challenges in learning to code.\n\n### A continuum of formalism\n- _poetry_: Words are used for sound and meaning. Ambiguity is common and often deliberate.\n- _prose_: The literal meaning of words is important, and the structure contributes meaning. Amenable to analysis but still often ambiguous.\n- _program_: Meaning is unambiguous and literal, and can be understood entirely by analysis of the tokens and structure.\n\n#### Strategies for parsing formal languages:\n- **Formal languages are very dense**, so it takes longer to read them. \n- **Structure is very important**, so it is usually not a good idea to read from top to bottom, left to right. Instead, learn to parse the program in your head, identifying the tokens and interpreting the structure. \n- **Details matter**. Little things like spelling errors and bad punctuation, which you can get away with in natural languages, will make a big difference in a formal language.\n\n## Why Python?\n\n\n\n[IBM: R vs. Python](https://www.ibm.com/cloud/blog/python-vs-r)\n\n\nPython is a multi-purpose language with a readable syntax that’s easy to learn. Programmers use Python to delve into data analysis or use machine learning in scalable production environments.\n\nR is built by statisticians and leans heavily into statistical models and specialized analytics. Data scientists use R for deep statistical analysis, supported by just a few lines of code and beautiful data visualizations. \n\nIn general, R is better for initial exploratory analyses, statistical analyses, and data visualization. \n\nIn general, Python is better for working with APIs, writing maintainable, production-ready code, working with a diverse array of data, and building machine learning or AI workflows.\n\nBoth languages can _do_ anything. \nMost data science teams use both languages.\n(and others too.. Matlab, Javascript, Go, Fortran, etc...)\n\n### Language Usage by Data Scientists\n[Anaconda State of Data Science](https://www.anaconda.com/state-of-data-science-2022)\n\nData from 2021:\n![language_usage_2021.jpg](assets/language_usage_2021.jpg)\n\n## What about 2022 data?\n\nThe data are [available here](https://anaconda.cloud/sods-2022-data-download)...\n\nLet's do some python data science!\n\n# What python?\n\n### Python Developer's Survey 2022\n[JetBrains, Inc.](https://lp.jetbrains.com/python-developers-survey-2022/)\n\n![image.png](assets/python_usage.png)\n\nData is [here](https://drive.google.com/drive/folders/17jyWjMslux6N921jXFI7-kdZzJ4L6vCI)\n\n### Activities of Data Analysis...\n[Anaconda State of Data Science](https://www.anaconda.com/state-of-data-science-2022)\n![image.png](assets/activities.png)\n\n\n# How Python?\n\n\nWriting code requires an editor.\n\nRunning code requires an interpreter.\n\nHow you setup your editor and your interpreter can vary widely...\n\n- On your machine? \n- On a server? \n- In the cloud? \n- In your browser? \n- In a file?\n\n### Python Developer's Survey 2022\n[JetBrains, Inc.](https://lp.jetbrains.com/python-developers-survey-2022/)\n![editor/IDE usage](assets/editor_usage.png)\n\n### Workflow for EDS 217\n\n\n1. Learn how to manage python working environments using [conda](https://docs.conda.io/en/latest/)\n1. Start writing code in an IDE using [VSCode](https://code.visualstudio.com).\n1. Focus initially on Jupyter notebooks...\n1. But also explore using .py files and other tools for developing your own functions and re-usable code.\n\nBy end of this course, you will have the ability to develop maintanable, repeatable python code that anyone can use!\n\n## The End\n","srcMarkdownNoYaml":"\n\n# EDS 217, Lecture 1: Introduction to Python and Environmental Data Science\n\n- Course Repository: [https://github.com/environmental-data-science/eds217_2023](https://github.com/environmental-data-science/eds217_2023)\n\n- Course Website: [https://bit.ly/eds217_2023](https://bit.ly/eds217_2023)\n\n![data_science.jpg](assets/data_science.jpg)\n\n![environmental_data_science.jpg](assets/environmental_data_science.jpg)\n\n## Lecture Agenda\n\n1. 🐍 What Python?\n1. ❓ Why Python?\n1. 💻 How Python?\n\n> \"Python is powerful... and fast; \nplays well with others; \nruns everywhere; \nis friendly & easy to learn; \nis Open.\"\n\n## What is Python?\n\nPython is a *general-purpose, object-oriented programming language* that emphasizes _code readability_ through its generous use of white space. Released in 1989, Python is easy to learn and a favorite of programmers and developers.\n\n\n\n### High-level languages \n(Python, C, C++, Java, Javascript, R, Pascal)\n- Take less time to write\n- Shorter and easier to read\n- Portable, meaning that they can run on different kinds of computers with few or no modifications.\n\nThe engine that translates and runs Python is called the *Python Interpreter*\n\n### Natural vs. Formal Languages\n\n*Natural languages* are the languages that people speak. They are not designed (although they are subjected to various degrees of \"order\") and evolve naturally. \n\n\n\n\n\n*Formal languages* are languages that are designed by people for specific applications. \n- Mathematical Notation $E=mc^2$ \n- Chemical Notation: $\\text{H}_2\\text{O}$\n\n\n*Programming languages* are **formal languages that have been designed to express computations**.\n\n\n\n**Parsing**: The process of figuring out what the structure of a sentence or statement is (in a natural language you do this subconsciously). \n\n\nFormal Languages have **strict** syntax for _tokens_ and _structure_:\n\n- Mathematical syntax error: $E=\\$m🦆_2$ (bad tokens & bad structure)\n- Chemical syntax error: $\\text{G}_3\\text{Z}$ (bad tokens, but structure is okay)\n\n### Differences between Natural and Formal languages\n1. _Ambiguity_:\nNatural languages are full of ambiguity, which people parse using contextual clues. Formal languages are nearly or completely unambiguous; any statement has exactly one meaning, regardless of context.\n1. _Redundancy_:\nIn order to make up for ambiguity, natural languages employ lots of redundancy. Formal languages are less redundant and more concise.\n1. _Literalness_:\nFormal languages mean exactly what they say. Natural languages employ idioms and metaphors.\n\nThe inherent differences between familiar natural languages and unfamiliar formal languages creates one of the greatest challenges in learning to code.\n\n### A continuum of formalism\n- _poetry_: Words are used for sound and meaning. Ambiguity is common and often deliberate.\n- _prose_: The literal meaning of words is important, and the structure contributes meaning. Amenable to analysis but still often ambiguous.\n- _program_: Meaning is unambiguous and literal, and can be understood entirely by analysis of the tokens and structure.\n\n#### Strategies for parsing formal languages:\n- **Formal languages are very dense**, so it takes longer to read them. \n- **Structure is very important**, so it is usually not a good idea to read from top to bottom, left to right. Instead, learn to parse the program in your head, identifying the tokens and interpreting the structure. \n- **Details matter**. Little things like spelling errors and bad punctuation, which you can get away with in natural languages, will make a big difference in a formal language.\n\n## Why Python?\n\n\n\n[IBM: R vs. Python](https://www.ibm.com/cloud/blog/python-vs-r)\n\n\nPython is a multi-purpose language with a readable syntax that’s easy to learn. Programmers use Python to delve into data analysis or use machine learning in scalable production environments.\n\nR is built by statisticians and leans heavily into statistical models and specialized analytics. Data scientists use R for deep statistical analysis, supported by just a few lines of code and beautiful data visualizations. \n\nIn general, R is better for initial exploratory analyses, statistical analyses, and data visualization. \n\nIn general, Python is better for working with APIs, writing maintainable, production-ready code, working with a diverse array of data, and building machine learning or AI workflows.\n\nBoth languages can _do_ anything. \nMost data science teams use both languages.\n(and others too.. Matlab, Javascript, Go, Fortran, etc...)\n\n### Language Usage by Data Scientists\n[Anaconda State of Data Science](https://www.anaconda.com/state-of-data-science-2022)\n\nData from 2021:\n![language_usage_2021.jpg](assets/language_usage_2021.jpg)\n\n## What about 2022 data?\n\nThe data are [available here](https://anaconda.cloud/sods-2022-data-download)...\n\nLet's do some python data science!\n\n# What python?\n\n### Python Developer's Survey 2022\n[JetBrains, Inc.](https://lp.jetbrains.com/python-developers-survey-2022/)\n\n![image.png](assets/python_usage.png)\n\nData is [here](https://drive.google.com/drive/folders/17jyWjMslux6N921jXFI7-kdZzJ4L6vCI)\n\n### Activities of Data Analysis...\n[Anaconda State of Data Science](https://www.anaconda.com/state-of-data-science-2022)\n![image.png](assets/activities.png)\n\n\n# How Python?\n\n\nWriting code requires an editor.\n\nRunning code requires an interpreter.\n\nHow you setup your editor and your interpreter can vary widely...\n\n- On your machine? \n- On a server? \n- In the cloud? \n- In your browser? \n- In a file?\n\n### Python Developer's Survey 2022\n[JetBrains, Inc.](https://lp.jetbrains.com/python-developers-survey-2022/)\n![editor/IDE usage](assets/editor_usage.png)\n\n### Workflow for EDS 217\n\n\n1. Learn how to manage python working environments using [conda](https://docs.conda.io/en/latest/)\n1. Start writing code in an IDE using [VSCode](https://code.visualstudio.com).\n1. Focus initially on Jupyter notebooks...\n1. But also explore using .py files and other tools for developing your own functions and re-usable code.\n\nBy end of this course, you will have the ability to develop maintanable, repeatable python code that anyone can use!\n\n## The End\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"00_intro_to_python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Lecture 1 - Intro to Python and Environmental Data Science"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}