{"title":"Getting Help","markdown":{"yaml":{"title":"Getting Help"},"headingText":"Finding Help","containsRefs":false,"markdown":"\n\n\n\n\n\n\n\nWhen you get an error, or an unexpected result, or you are not sure what to do... \n\n### Options:\n\n- Finding help _inside_ Python\n- Finding help _outside_ Python\n\n\n### Finding Help Inside Python\n\nHow do we interrogate the data (and other objects) we encounter while coding?\n\n```python\n\nmy_var = 'some_unknown_thing'\n\n```\n\nWhat is it?\n\nThe `type()` command tells you what sort of thing an object is.\n\n### Finding Help Inside Python\n\nHow do we interrogate the data (and other objects) we encounter while coding?\n\n```python\n\nmy_var = 'some_unknown_thing'\n\n```\n\nWhat can I do with it?\n\nThe `dir()` command tells you what attributes an object has.\n\n### Understanding object attributes\n\n#| include: false\n### What's with all these `__attributes__` ?\n\n#| include: false\n`__attributes__` are internal (or private) attributes associated with _all_ python objects.\n\n\n\n#| include: false\nThese are called _\"magic\"_ or _\"dunder\"_ methods.\n\n**dunder â†’ \"double under\" â†’ `__`**\n\n#| include: false\n### Understanding object attributes... \"dunder\" the hood ðŸ˜’\n\n#| include: false\n**Everything** in Python is an _object_, and every _operation_ corresponds to a _method_.\n\n#| include: false\n### Understanding object attributes... \"dunder\" the hood ðŸ˜’\n\nGenerally, you will not have to worry about __dunder__ methods. \n\nHere's a shortcut function to look at only non-dunder methods\n\n### Tab Completion for object introspection\n\n#### Jupyter Environments:\nYou can use the `<tab>` key in iPython (or Jupyter environments) to explore object methods. By default, only \"public\" (non-dunder) methods are returned.\n\n#### VSCode:\nYou can usually just pause typing and VSCode will provide object introspection:\n\n### Getting `help()` inside Python\n\nMost objects - especially packages and libraries - provide help documentation that can be accessed using the python  helper function... called... `help()`\n\n### Getting `help?`\n\nIn the iPython shell (or the Jupyter Notebook/Jupyter Lab environment), you can also access the `help()` command using `?`.\n\n#| include: false\n### Getting more `help??`\n\nIn the iPython shell (or the Jupyter Notebook/Jupyter Lab environment) you can use `??` to see the actual source code of python code\n\n#| include: false\n### Getting more `help??`\n\n`??` only shows source code for for python functions that aren't compiled to C code. Otherwise, it will show the same information as `?`\n\n### `<tab>` completion + `?` = discovery & introspection\n\n#| include: false\n### Using print commands\n\n#| include: false\nThe `print` command is the most commonly used tool for beginners to understand errors\n\n```python\n# This code generates a `TypeError` that \n# x is not the right kind of variable.\ndo_something(x) \n```\n\n#| include: false\nThe `print` command is the most commonly used debugging tool for beginners.\n\n\n### `print` Formatting with `f-strings`.\n\nPython has a string format called [`f-strings`](https://realpython.com/python-f-strings/). These are strings that are prefixed with an `f` character and allow in-line variable substitution.\n\n\n#| include: false\n### How to get help outside of Python\n\nAs of Fall 2002:\n- [O'Rielly Books](https://www.oreilly.com/library-access/) (Requires UCSB login)\n- My O'Rielly pdf library: [https://bit.ly/eds-217-books](https://bit.ly/eds-217-books) (Requires UCSB login)\n\nAs of Fall, 2022:\n- [Python Docs](https://docs.python.org/3.10/)\n- [Stack Overflow](https://stackoverflow.com)\n- [Talk Python](https://talkpython.fm/home)\n- [Ask Python](https://www.askpython.com)\n\nAs of Fall, 2023:\n\nLLMs.\n\n- [ChatGPT](https://chat.openai.com) - Need $ for GPT-4, 3.X fine debugger, but not always a great programmer.\n- [GitHub CoPilot](https://code.visualstudio.com/blogs/2023/03/30/vscode-copilot) - Should be able to get a free student account. Works great in VSCode; we will set this up together later in the course.\n\n\n#| include: false\n## How to move from a `beginner` to a more `advanced`` python user\n\nTaken from [Talk Python to Me, Episode #427](https://talkpython.fm/episodes/show/427/10-tips-and-ideas-for-the-beginner-to-expert-python-journey), with some modifications.\n\n#| include: false\n# 10 tips to move from beginner to expert\n\n## Know your goals \n\n- Why are you learning python?\n- Why are you learning data science?\n    \n\n\n#| include: false\n## Have a project in mind \n\n- What do you want to do with it?\n- Use python to solve a problem you are interested in solving.\n- Don't be afraid to work on personal projects.\n\n### Some examples of my personal \"problem-solving\" projects\n\n[Biobib](https://github.com/kcaylor/biobib) - Python code to make my CV/Biobib from a google sheets/.csv file.    \n\n[Triumph](https://github.com/kcaylor/triumph) - Python notebooks for a 1959 Triumph TR3A EV conversion project.\n\n[Stoplight](https://github.com/kcaylor/stoplight) - A simple python webapp for monitoring EDS217 course pace.\n\n#| include: false\n## Donâ€™t limit your learning to whatâ€™s needed for your project \n\n- Learn more than you need to know...\n    \n    ...but try to use less than you think you need\n    \n\n\n#| include: false\n## Read good code \n\n- Libraries and packages have great examples of code.\n- Read the _code_ (not just docs) of the packages you use.\n- Github is a great place to find code.\n    \n\n\n#| include: false\n## Know your tools\n\n- Learn how to use your IDE ([VSCode](https://www.youtube.com/results?search_query=VSCode+tutorial))\n- Learn how to use your package manager ([conda](https://www.youtube.com/results?search_query=conda+tutorial))\n- Learn how to use your shell ([bash](https://www.youtube.com/results?search_query=bash+tutorial))\n- Learn how to use your version control system ([git](https://www.youtube.com/results?search_query=git+tutorial))\n\n#| include: false\n### Learn how to test your code \n\n- Testing is part of programming.\n- Testing is a great way to learn.\n- Focus on [end-to-end](https://en.wikipedia.org/wiki/End-to-end_testing) (E2E) tests (rather than unit tests)\n    - Unit tests: \n        \n        Does it work the way you expect it to (operation-centric)?\n    - End-to-end test: \n        \n        Does it do what you want it to do (output-centric)?\n\n#| include: false\n## Know whatâ€™s good enough for any given project \n\n### You're not writing code for a self-driving car or a pacemaker.\n\n- Don't over-engineer your code.\n- Don't over-optimize your code.\n- Simple is better than complex.\n\n\n\n#| include: false\n## Embrace refactoring \n\n**Refactoring** is the process of changing your code without changing its behavior.\n\n> Ship of Theseus: If you replace every part of a ship, is it still the same ship?\n\n- As you learn more, you will find better ways to do things.\n- Don't be afraid to change your code.\n- Tests (especially end-to-end tests) help you refactor with confidence.\n- \"Code smells\"... if it smells bad, it probably is bad.\n    - [Code Smells](https://sourcemaking.com/refactoring/smells)\n    - Comments can be a code smell; they can be a sign that your code is not clear enough.\n\n#| include: false\n## Write things down \n\n### Keep an ideas notebook\n\n- Write down ideas for projects\n- Write down ideas for code\n\n### Write comments to yourself and others\n\n### Write documentation\n\n### Write down questions (use your tools; github issues, etc.)\n\n#| include: false\n## Go meet people!\n\n### The Python (and Data Science) community is great!\n\n#### Go to Python & Data Science meetups.\n\n- [Central Coast Python](https://www.meetup.com/central-coast-python/)\n    \n#### Go to python and data science conferences.\n\n- [PyCon](https://us.pycon.org/) 2024 & 2025 will be in Pittsburgh, PA\n- [PyData](https://pydata.org) (Conferences all over the world)\n\n#### Go to hackathons.\n\n- [SB Hacks](https://www.sbhacks.com/) (UCSB)\n- [MLH (Major League Hacking)](https://mlh.io/seasons/2024/events)\n- [Hackathon.com](https://www.hackathon.com/) (Hackathons all over the world)\n\n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n## Finding Help\n\nWhen you get an error, or an unexpected result, or you are not sure what to do... \n\n### Options:\n\n- Finding help _inside_ Python\n- Finding help _outside_ Python\n\n\n### Finding Help Inside Python\n\nHow do we interrogate the data (and other objects) we encounter while coding?\n\n```python\n\nmy_var = 'some_unknown_thing'\n\n```\n\nWhat is it?\n\nThe `type()` command tells you what sort of thing an object is.\n\n### Finding Help Inside Python\n\nHow do we interrogate the data (and other objects) we encounter while coding?\n\n```python\n\nmy_var = 'some_unknown_thing'\n\n```\n\nWhat can I do with it?\n\nThe `dir()` command tells you what attributes an object has.\n\n### Understanding object attributes\n\n#| include: false\n### What's with all these `__attributes__` ?\n\n#| include: false\n`__attributes__` are internal (or private) attributes associated with _all_ python objects.\n\n\n\n#| include: false\nThese are called _\"magic\"_ or _\"dunder\"_ methods.\n\n**dunder â†’ \"double under\" â†’ `__`**\n\n#| include: false\n### Understanding object attributes... \"dunder\" the hood ðŸ˜’\n\n#| include: false\n**Everything** in Python is an _object_, and every _operation_ corresponds to a _method_.\n\n#| include: false\n### Understanding object attributes... \"dunder\" the hood ðŸ˜’\n\nGenerally, you will not have to worry about __dunder__ methods. \n\nHere's a shortcut function to look at only non-dunder methods\n\n### Tab Completion for object introspection\n\n#### Jupyter Environments:\nYou can use the `<tab>` key in iPython (or Jupyter environments) to explore object methods. By default, only \"public\" (non-dunder) methods are returned.\n\n#### VSCode:\nYou can usually just pause typing and VSCode will provide object introspection:\n\n### Getting `help()` inside Python\n\nMost objects - especially packages and libraries - provide help documentation that can be accessed using the python  helper function... called... `help()`\n\n### Getting `help?`\n\nIn the iPython shell (or the Jupyter Notebook/Jupyter Lab environment), you can also access the `help()` command using `?`.\n\n#| include: false\n### Getting more `help??`\n\nIn the iPython shell (or the Jupyter Notebook/Jupyter Lab environment) you can use `??` to see the actual source code of python code\n\n#| include: false\n### Getting more `help??`\n\n`??` only shows source code for for python functions that aren't compiled to C code. Otherwise, it will show the same information as `?`\n\n### `<tab>` completion + `?` = discovery & introspection\n\n#| include: false\n### Using print commands\n\n#| include: false\nThe `print` command is the most commonly used tool for beginners to understand errors\n\n```python\n# This code generates a `TypeError` that \n# x is not the right kind of variable.\ndo_something(x) \n```\n\n#| include: false\nThe `print` command is the most commonly used debugging tool for beginners.\n\n\n### `print` Formatting with `f-strings`.\n\nPython has a string format called [`f-strings`](https://realpython.com/python-f-strings/). These are strings that are prefixed with an `f` character and allow in-line variable substitution.\n\n\n#| include: false\n### How to get help outside of Python\n\nAs of Fall 2002:\n- [O'Rielly Books](https://www.oreilly.com/library-access/) (Requires UCSB login)\n- My O'Rielly pdf library: [https://bit.ly/eds-217-books](https://bit.ly/eds-217-books) (Requires UCSB login)\n\nAs of Fall, 2022:\n- [Python Docs](https://docs.python.org/3.10/)\n- [Stack Overflow](https://stackoverflow.com)\n- [Talk Python](https://talkpython.fm/home)\n- [Ask Python](https://www.askpython.com)\n\nAs of Fall, 2023:\n\nLLMs.\n\n- [ChatGPT](https://chat.openai.com) - Need $ for GPT-4, 3.X fine debugger, but not always a great programmer.\n- [GitHub CoPilot](https://code.visualstudio.com/blogs/2023/03/30/vscode-copilot) - Should be able to get a free student account. Works great in VSCode; we will set this up together later in the course.\n\n\n#| include: false\n## How to move from a `beginner` to a more `advanced`` python user\n\nTaken from [Talk Python to Me, Episode #427](https://talkpython.fm/episodes/show/427/10-tips-and-ideas-for-the-beginner-to-expert-python-journey), with some modifications.\n\n#| include: false\n# 10 tips to move from beginner to expert\n\n## Know your goals \n\n- Why are you learning python?\n- Why are you learning data science?\n    \n\n\n#| include: false\n## Have a project in mind \n\n- What do you want to do with it?\n- Use python to solve a problem you are interested in solving.\n- Don't be afraid to work on personal projects.\n\n### Some examples of my personal \"problem-solving\" projects\n\n[Biobib](https://github.com/kcaylor/biobib) - Python code to make my CV/Biobib from a google sheets/.csv file.    \n\n[Triumph](https://github.com/kcaylor/triumph) - Python notebooks for a 1959 Triumph TR3A EV conversion project.\n\n[Stoplight](https://github.com/kcaylor/stoplight) - A simple python webapp for monitoring EDS217 course pace.\n\n#| include: false\n## Donâ€™t limit your learning to whatâ€™s needed for your project \n\n- Learn more than you need to know...\n    \n    ...but try to use less than you think you need\n    \n\n\n#| include: false\n## Read good code \n\n- Libraries and packages have great examples of code.\n- Read the _code_ (not just docs) of the packages you use.\n- Github is a great place to find code.\n    \n\n\n#| include: false\n## Know your tools\n\n- Learn how to use your IDE ([VSCode](https://www.youtube.com/results?search_query=VSCode+tutorial))\n- Learn how to use your package manager ([conda](https://www.youtube.com/results?search_query=conda+tutorial))\n- Learn how to use your shell ([bash](https://www.youtube.com/results?search_query=bash+tutorial))\n- Learn how to use your version control system ([git](https://www.youtube.com/results?search_query=git+tutorial))\n\n#| include: false\n### Learn how to test your code \n\n- Testing is part of programming.\n- Testing is a great way to learn.\n- Focus on [end-to-end](https://en.wikipedia.org/wiki/End-to-end_testing) (E2E) tests (rather than unit tests)\n    - Unit tests: \n        \n        Does it work the way you expect it to (operation-centric)?\n    - End-to-end test: \n        \n        Does it do what you want it to do (output-centric)?\n\n#| include: false\n## Know whatâ€™s good enough for any given project \n\n### You're not writing code for a self-driving car or a pacemaker.\n\n- Don't over-engineer your code.\n- Don't over-optimize your code.\n- Simple is better than complex.\n\n\n\n#| include: false\n## Embrace refactoring \n\n**Refactoring** is the process of changing your code without changing its behavior.\n\n> Ship of Theseus: If you replace every part of a ship, is it still the same ship?\n\n- As you learn more, you will find better ways to do things.\n- Don't be afraid to change your code.\n- Tests (especially end-to-end tests) help you refactor with confidence.\n- \"Code smells\"... if it smells bad, it probably is bad.\n    - [Code Smells](https://sourcemaking.com/refactoring/smells)\n    - Comments can be a code smell; they can be a sign that your code is not clear enough.\n\n#| include: false\n## Write things down \n\n### Keep an ideas notebook\n\n- Write down ideas for projects\n- Write down ideas for code\n\n### Write comments to yourself and others\n\n### Write documentation\n\n### Write down questions (use your tools; github issues, etc.)\n\n#| include: false\n## Go meet people!\n\n### The Python (and Data Science) community is great!\n\n#### Go to Python & Data Science meetups.\n\n- [Central Coast Python](https://www.meetup.com/central-coast-python/)\n    \n#### Go to python and data science conferences.\n\n- [PyCon](https://us.pycon.org/) 2024 & 2025 will be in Pittsburgh, PA\n- [PyData](https://pydata.org) (Conferences all over the world)\n\n#### Go to hackathons.\n\n- [SB Hacks](https://www.sbhacks.com/) (UCSB)\n- [MLH (Major League Hacking)](https://mlh.io/seasons/2024/events)\n- [Hackathon.com](https://www.hackathon.com/) (Hackathons all over the world)\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"02_helpGPT.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Getting Help"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}