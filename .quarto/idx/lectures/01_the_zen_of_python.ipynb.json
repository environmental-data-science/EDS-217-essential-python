{"title":"The Zen of Python","markdown":{"yaml":{"title":"The Zen of Python"},"headingText":"Beautiful is better than ugly","containsRefs":false,"markdown":"\n\n\n\n\n\n\n\n### Explicit is better than implicit\n\n### Simple is better than complex\n\n### Readability Matters\n\nCurly Bracket Languages: Define code blocks using `{` and `}`. (Some also define the end of a statement using `;`)\n(aspects of _semantics_ are defined by _syntax_)\n\nExamples: `C`, `Javascript`, `R`\n\n[Offsides Rule Languages](https://en.wikipedia.org/wiki/Off-side_rule): Define code blocks using indentation.\n\n\n\n#### R: (Curly Brackets + Indentation)\n```R\nif(a > b) {\n    print(\"a is greater than b\")\n} else {\n    print(\"a is not greater than b\")\n}\n```\n\n#### Python (Indentation)\n```python\nif a > b:\n    print(\"a is greater than b\")\nelse:\n    print(\"a is not greater than b\")\n```\n\n\n### Readability matters\n\n**Clear (Javascript Example):**\n```javascript\n// This function takes a name and logs\n// a string which greets that name\nfunction sayHi(name) {\n    console.log(\"Hi \" + name + \", nice to meet you.\")\n}\n\nsayHi(\"Sam\");\n```\n\n**Not Clear (\"Minified\" Javascript):**\n```javascript\nfunction f(o){console.log(\"Hi \"+o+\", nice to meet you.\")}f(\"Sam\");\n```\n\n\n\n### Readability matters\n\n#### General Rules:\n\n1. Make your code easy to read.\n1. Include lots of comments\n1. Keep lines of code short\n1. Avoid single character variable names. \n1. Call your functions with named parameters where applicable. \n1. Use descriptive variable names. \n\n\n### Simple is Better than Complex\n\nDon’t overcomplicate your code to look smart.\n\n#### [2nd place, Best 'The Perl Journal'](https://perl.plover.com/obfuscated/), 5th Annual Obfuscated Perl Contest: Mark Jason Dominus.\n\n```perl\n@P=split//,\".URRUUxR\";@d=split//,\"\\nlanruoJ lreP ehT\";\nsub p{@p{\"r$p\",\"u$p\"}=(P,P);pipe\"r$p\",\"u$p\";$p++;($q*=\n2)+=$f=!fork;map{$P=$P[$f|6&ord$p{$_}];$p{$_}=/$P/i?$P:\nclose$_}%p}p;p;p;p;p;map$p{$_}=~/[P.]/&&close$_,%p;wait\nuntil$?;map/r/&&<$_>,%p;print$d[$q]\n```\n\n### Sparse is Better than Dense\n\nDon't try to stick too much code on one line\n\n#### Dense\n```python\nif i>0: return sqrt(i)\nelif i==0: return 0\nelse: return 1j * sqrt(-i)\n```\n\n\n#### Sparse\n```python\nif i > 0:\n    return sqrt(i)\nelif i == 0:\n    return 0\nelse:\n    return 1j * sqrt(-i)\n```\n\n\n### There should be one and preferably only one obvious way to do it\n\n\n### There should be `one--` and preferably only one `--obvious` way to do it\n\nDifferent languages implement prefix (`++i` and `--i`) and postfix (`i++` and `i--`) operators differently, which often leads to confusion.\n\n#### Example C code:\n```c\nint i = 4;\nint j = 21;\n\nint k = ++i * 7 + 2 - j--;\n```\n\nWhat are the values of `i`, `j`, and `k`?\n\n### There should be `one--` and preferably only one `--obvious` way to do it\n\nThere are no prefix or postfix operators in python. You must increment and decrement variables directly. \n\n#### Example C code:\n```c\nint i = 4;\nint j = 21;\n\nint k = ++i * 7 + 2 - j--;\n```\n\nWhat are the values of `i`, `j`, and `k`?\n\n### Errors should never pass silently\n\n\n**Example: While calling a low-level function that saves data to disk, the function runs out of disk space before all of its data is written.**\n\n#### Three \"Philosophies\" of Error Handling\n\n1. Don't check for problems.\n1. Systematically determine the _Error Status_ of every statement \n1. Raise _Exceptions_ when things go wrong\n\n### Strategy 1: No Error Handling\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n```python\ndef write_data(data):\n    os.write(data)\n```\n\n![this_is_fine.jpeg](assets/this_is_fine.jpeg)\n\n### Strategy 1: No Error Handling\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n### Pros:\n- Easy to implement!\n- Usually fine; errors are very rare\n\n### Cons:\n- Unpredictable failure modes\n- Errors can impact other data, programs, etc...\n- Very dangerous when moving to new contexts\n\n### Strategy 2: _All_ Functions/Operations return an Error Status (C, C++, Swift)\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n```python\ndef write_data(data):\n    return_val = os.write(data)\n    if return_val == \"SUCCESS\":\n        return \"SUCCESS\"\n    else:\n        return \"OH-NO!\"\n    \n```\n\n![error_handling.jpg](assets/error_handling.jpg)\n\n### Strategy 2: _All_ Functions/Operations return an Error Status (C, C++, Swift)\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n### Pros:\n- Comprehensive coverage of error conditions\n- State of the program is always known\n\n### Cons:\n- High burden on programmers to constantly check error state\n- Any coverage gaps in error checking can lead to unstable conditions and make programs [crash-prone](https://upload.wikimedia.org/wikipedia/commons/5/56/Bsodwindows10.png)\n\n### Strategy 3: Errors are handled using an Exception framework\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n```python\ndef write_data(data):\n    try:\n        os.write(data)\n    except DiskFullError:\n        print(\"Can't write this file; it's too big!\")\n```\n\n![exception.jpeg](assets/exceptions.jpeg)\n\n### Strategy 3: Errors are handled using an Exception framework (Python, Ruby,  )\n\n### Pros:\n- Elimintaes repetitive nature of error checking\n- Allows errors to propagate up from lower-level programs, making centralized error handling easier. (`try`... `except` clauses)\n\n### Cons:\n- Exceptions are easier to ignore/trap than errors.\n- Can lead to sloppy code that \"hides\" excpetions instead of \"handling\" them.\n- These cons can be avoided with good programming practice (errors of _implementation_, not errors of _design_)\n\n![Try or Try Not](assets/try_except_blocks.jpeg)``\n\n## Python Errors\n\nThere are two types of errors in Python: `SyntaxErrors` and `Exceptions`.\n\n\n### SyntaxErrors\n\nA `SyntaxError` happens when the Python language interpreter (the parser) detects an incorrectly formatted statement.\n\n\nThis code is trying to divide two numbers, but there are mismatched parentheses. What happens when we run it?\n\n```python\n>>> print( 5 / 4 ))\n```\n\nWhen python says `SyntaxError`, you should read this as `I don't know what you want me to do!?`\n\nOften the error includes some indication of _where_ the problem is, although this indication can sometimes be misleading if the detection occurs far away from the syntax problem that created the error. Often the interpreter will attempt to explain what the problem is!\n\n### Exceptions\n\nAn `Exception` happens the code you have written violates the Python language specification.\n\nThis code is trying to divide zero by 0. Its _syntax_ is correct. But what happens when we run it?\n\n```python\n>>> print( 0 / 0 )\n```\n\nWhen python says anything other than `SyntaxError`, you should read this as `You are asking to do something I can't do`\n\nIn this case, the `ZeroDivisionError` is raised because the Python language specification does not allow for division by zero.\n\n### Types of Exceptions\n\nPython has a lot of builtin Errors that correspond to the definition of the Python language. \n\n\nA few common Exceptions you will see include `TypeError`, `IndexError`, and `KeyError`.\n\n### `TypeError`\n\n\nA `TypeError` is raised when you try to perform a valid method on an inappropriate data type. \n\n### `IndexError`\n\n\nAn `IndexError` is raised when you try to access an undefined element of a sequence. Sequences are structured data types whose elements are stored in a specific order. A **list** is an example of a sequence.\n\n### `KeyError`\n\nA `KeyError` is raised when you try to perform a valid method on an inappropriate data type. \n\n### Deciphering Tracebacks \nWhen an exception is raised in python the interpreter generates a \"Traceback\" that shows **where** and **why** the error occurred. Generally, the REPL has most detailed Traceback information, although Jupyter Notebooks and iPython interactive shells also provide necessary information to debug any exception. \n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n### Beautiful is better than ugly\n\n### Explicit is better than implicit\n\n### Simple is better than complex\n\n### Readability Matters\n\nCurly Bracket Languages: Define code blocks using `{` and `}`. (Some also define the end of a statement using `;`)\n(aspects of _semantics_ are defined by _syntax_)\n\nExamples: `C`, `Javascript`, `R`\n\n[Offsides Rule Languages](https://en.wikipedia.org/wiki/Off-side_rule): Define code blocks using indentation.\n\n\n\n#### R: (Curly Brackets + Indentation)\n```R\nif(a > b) {\n    print(\"a is greater than b\")\n} else {\n    print(\"a is not greater than b\")\n}\n```\n\n#### Python (Indentation)\n```python\nif a > b:\n    print(\"a is greater than b\")\nelse:\n    print(\"a is not greater than b\")\n```\n\n\n### Readability matters\n\n**Clear (Javascript Example):**\n```javascript\n// This function takes a name and logs\n// a string which greets that name\nfunction sayHi(name) {\n    console.log(\"Hi \" + name + \", nice to meet you.\")\n}\n\nsayHi(\"Sam\");\n```\n\n**Not Clear (\"Minified\" Javascript):**\n```javascript\nfunction f(o){console.log(\"Hi \"+o+\", nice to meet you.\")}f(\"Sam\");\n```\n\n\n\n### Readability matters\n\n#### General Rules:\n\n1. Make your code easy to read.\n1. Include lots of comments\n1. Keep lines of code short\n1. Avoid single character variable names. \n1. Call your functions with named parameters where applicable. \n1. Use descriptive variable names. \n\n\n### Simple is Better than Complex\n\nDon’t overcomplicate your code to look smart.\n\n#### [2nd place, Best 'The Perl Journal'](https://perl.plover.com/obfuscated/), 5th Annual Obfuscated Perl Contest: Mark Jason Dominus.\n\n```perl\n@P=split//,\".URRUUxR\";@d=split//,\"\\nlanruoJ lreP ehT\";\nsub p{@p{\"r$p\",\"u$p\"}=(P,P);pipe\"r$p\",\"u$p\";$p++;($q*=\n2)+=$f=!fork;map{$P=$P[$f|6&ord$p{$_}];$p{$_}=/$P/i?$P:\nclose$_}%p}p;p;p;p;p;map$p{$_}=~/[P.]/&&close$_,%p;wait\nuntil$?;map/r/&&<$_>,%p;print$d[$q]\n```\n\n### Sparse is Better than Dense\n\nDon't try to stick too much code on one line\n\n#### Dense\n```python\nif i>0: return sqrt(i)\nelif i==0: return 0\nelse: return 1j * sqrt(-i)\n```\n\n\n#### Sparse\n```python\nif i > 0:\n    return sqrt(i)\nelif i == 0:\n    return 0\nelse:\n    return 1j * sqrt(-i)\n```\n\n\n### There should be one and preferably only one obvious way to do it\n\n\n### There should be `one--` and preferably only one `--obvious` way to do it\n\nDifferent languages implement prefix (`++i` and `--i`) and postfix (`i++` and `i--`) operators differently, which often leads to confusion.\n\n#### Example C code:\n```c\nint i = 4;\nint j = 21;\n\nint k = ++i * 7 + 2 - j--;\n```\n\nWhat are the values of `i`, `j`, and `k`?\n\n### There should be `one--` and preferably only one `--obvious` way to do it\n\nThere are no prefix or postfix operators in python. You must increment and decrement variables directly. \n\n#### Example C code:\n```c\nint i = 4;\nint j = 21;\n\nint k = ++i * 7 + 2 - j--;\n```\n\nWhat are the values of `i`, `j`, and `k`?\n\n### Errors should never pass silently\n\n\n**Example: While calling a low-level function that saves data to disk, the function runs out of disk space before all of its data is written.**\n\n#### Three \"Philosophies\" of Error Handling\n\n1. Don't check for problems.\n1. Systematically determine the _Error Status_ of every statement \n1. Raise _Exceptions_ when things go wrong\n\n### Strategy 1: No Error Handling\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n```python\ndef write_data(data):\n    os.write(data)\n```\n\n![this_is_fine.jpeg](assets/this_is_fine.jpeg)\n\n### Strategy 1: No Error Handling\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n### Pros:\n- Easy to implement!\n- Usually fine; errors are very rare\n\n### Cons:\n- Unpredictable failure modes\n- Errors can impact other data, programs, etc...\n- Very dangerous when moving to new contexts\n\n### Strategy 2: _All_ Functions/Operations return an Error Status (C, C++, Swift)\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n```python\ndef write_data(data):\n    return_val = os.write(data)\n    if return_val == \"SUCCESS\":\n        return \"SUCCESS\"\n    else:\n        return \"OH-NO!\"\n    \n```\n\n![error_handling.jpg](assets/error_handling.jpg)\n\n### Strategy 2: _All_ Functions/Operations return an Error Status (C, C++, Swift)\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n### Pros:\n- Comprehensive coverage of error conditions\n- State of the program is always known\n\n### Cons:\n- High burden on programmers to constantly check error state\n- Any coverage gaps in error checking can lead to unstable conditions and make programs [crash-prone](https://upload.wikimedia.org/wikipedia/commons/5/56/Bsodwindows10.png)\n\n### Strategy 3: Errors are handled using an Exception framework\nWhile saving data to disk, the function runs out of disk space before all of its data is written.\n\n```python\ndef write_data(data):\n    try:\n        os.write(data)\n    except DiskFullError:\n        print(\"Can't write this file; it's too big!\")\n```\n\n![exception.jpeg](assets/exceptions.jpeg)\n\n### Strategy 3: Errors are handled using an Exception framework (Python, Ruby,  )\n\n### Pros:\n- Elimintaes repetitive nature of error checking\n- Allows errors to propagate up from lower-level programs, making centralized error handling easier. (`try`... `except` clauses)\n\n### Cons:\n- Exceptions are easier to ignore/trap than errors.\n- Can lead to sloppy code that \"hides\" excpetions instead of \"handling\" them.\n- These cons can be avoided with good programming practice (errors of _implementation_, not errors of _design_)\n\n![Try or Try Not](assets/try_except_blocks.jpeg)``\n\n## Python Errors\n\nThere are two types of errors in Python: `SyntaxErrors` and `Exceptions`.\n\n\n### SyntaxErrors\n\nA `SyntaxError` happens when the Python language interpreter (the parser) detects an incorrectly formatted statement.\n\n\nThis code is trying to divide two numbers, but there are mismatched parentheses. What happens when we run it?\n\n```python\n>>> print( 5 / 4 ))\n```\n\nWhen python says `SyntaxError`, you should read this as `I don't know what you want me to do!?`\n\nOften the error includes some indication of _where_ the problem is, although this indication can sometimes be misleading if the detection occurs far away from the syntax problem that created the error. Often the interpreter will attempt to explain what the problem is!\n\n### Exceptions\n\nAn `Exception` happens the code you have written violates the Python language specification.\n\nThis code is trying to divide zero by 0. Its _syntax_ is correct. But what happens when we run it?\n\n```python\n>>> print( 0 / 0 )\n```\n\nWhen python says anything other than `SyntaxError`, you should read this as `You are asking to do something I can't do`\n\nIn this case, the `ZeroDivisionError` is raised because the Python language specification does not allow for division by zero.\n\n### Types of Exceptions\n\nPython has a lot of builtin Errors that correspond to the definition of the Python language. \n\n\nA few common Exceptions you will see include `TypeError`, `IndexError`, and `KeyError`.\n\n### `TypeError`\n\n\nA `TypeError` is raised when you try to perform a valid method on an inappropriate data type. \n\n### `IndexError`\n\n\nAn `IndexError` is raised when you try to access an undefined element of a sequence. Sequences are structured data types whose elements are stored in a specific order. A **list** is an example of a sequence.\n\n### `KeyError`\n\nA `KeyError` is raised when you try to perform a valid method on an inappropriate data type. \n\n### Deciphering Tracebacks \nWhen an exception is raised in python the interpreter generates a \"Traceback\" that shows **where** and **why** the error occurred. Generally, the REPL has most detailed Traceback information, although Jupyter Notebooks and iPython interactive shells also provide necessary information to debug any exception. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"01_the_zen_of_python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"The Zen of Python"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}