{"title":"How to move from a `beginner` to a `more advanced` python user","markdown":{"yaml":{"title":"How to move from a `beginner` to a `more advanced` python user"},"headingText":"10 tips to move from beginner to expert","containsRefs":false,"markdown":"\n\n\n\n\n> Taken from [Talk Python to Me, Episode #427](https://talkpython.fm/episodes/show/427/10-tips-and-ideas-for-the-beginner-to-expert-python-journey), with some modifications.\n\n> Guest: Eric Matthes, author of [Python Crash Course](https://www.amazon.com/Python-Crash-Course-Eric-Matthes-ebook/dp/B09WJX22TV?ref_=ast_author_mpb),(#1 Book on Amazon in the category of Open Source Programming.)\n\n\n\n\n## 1. Know your goals \n\n- Why are you learning python?\n\n- Why are you learning data science?\n    \n\n## 2. Have a project in mind \n\n- What do you want to do with it?\n\n- Use python to solve a problem you are interested in solving.\n\n- Don't be afraid to work on personal projects.\n\n### Some examples of my personal \"problem-solving\" projects\n\n[Biobib](https://github.com/kcaylor/biobib) - Python code to make my CV/Biobib from a google sheets/.csv file.    \n\n[Triumph](https://github.com/kcaylor/triumph) - Python notebooks for a 1959 Triumph TR3A EV conversion project.\n\n[Stoplight](https://github.com/kcaylor/stoplight) - A simple python webapp for monitoring EDS217 course pace.\n\n## 3. Don’t limit your learning to what’s needed for your project \n\n- Learn more than you need to know...\n\n    Math: [3Blue1Brown](https://www.youtube.com/@3blue1brown)\n\n    Python Data Science: [PyData](https://www.youtube.com/@PyDataTV)\n    \n    Data Visualization: [Edward Tufte](https://www.amazon.com/stores/Edward-R.-Tufte/author/B000APET3Y),  [Cole Nussbaumer-Knaflic](https://www.amazon.com/stores/Cole-Nussbaumer-Knaflic/author/B013RK32CW), [David McCandless](https://www.amazon.com/stores/David-McCandless/author/B002HYXAUY)\n    \n- Be curious about what's _possible_, not just what's _necessary_.\n    \n    ...but try to use less than you think you need\n    \n\n\n## 4. Read good code \n\n- Libraries and packages have great examples of code!\n\n- Read the _code_ (not just docs) of the packages you use.\n\n    > It's okay if you can't understand it all. Often you can understand intent, but not what the code does. \n    How would you have done it? \n    Why did the author select a different approach?\n\n- Github is a great place to find code.\n\n    \n\n\n## 5. Know your tools\n\n- Learn how to use your IDE ([VSCode](https://www.youtube.com/results?search_query=VSCode+tutorial))\n\n- Learn how to use your package manager ([conda](https://www.youtube.com/results?search_query=conda+tutorial), [mamba](https://mamba.readthedocs.io/en/latest/))\n\n- Learn how to use your shell ([bash](https://www.youtube.com/results?search_query=bash+tutorial), [powershell](https://learn.microsoft.com/en-us/training/modules/introduction-to-powershell/), [WSL](https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode))\n\n- Learn how to use your version control system ([git](https://www.youtube.com/results?search_query=git+tutorial), [Github Desktop](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop))\n\n\n## 6. Learn how to test your code \n\n- Testing code is part of writing code, and testing is a great way to learn!\n- Focus on [end-to-end](https://en.wikipedia.org/wiki/End-to-end_testing) (E2E) tests (rather than unit tests)\n\n    - **Unit tests:** \n        \n        Does it work the way you expect it to (operation-centric)?\n        \n    - **End-to-end test:** \n        \n        Does it do what you want it to do (output-centric)?\n\n[Testing for data science](https://www.youtube.com/watch?v=Da-FL_1i6ps)\n\n[Testing with PyTest for data science](https://www.youtube.com/watch?v=dY1nNtDTruE)\n\n## 7. Know what’s good enough for any given project \n\n### You're not writing code for a self-driving car or a pacemaker.\n\n- Don't over-engineer your code.\n\n- Don't over-optimize your code.\n\n- Simple is better than complex.\n\n\n\n## 8. Embrace refactoring \n\n**Refactoring** is the process of changing your code without changing its behavior.\n\n> Ship of Theseus: If you replace every part of a ship, is it still the same ship?\n\n- As you learn more, you will find better ways to do things.\n\n- Don't be afraid to change your code.\n\n- Tests (especially end-to-end tests) help you refactor with confidence.\n\n- \"Code smells\"... if it smells bad, it probably is bad.\n    - [Code Smells](https://sourcemaking.com/refactoring/smells)\n    - Comments can be a code smell; they can be a sign that your code is not clear enough.\n\n## 9. Write things down \n\n#### Keep an ideas notebook\n\n- Write down ideas for projects\n\n- Write down ideas for code\n\n#### Write comments to yourself and others\n\n#### Write documentation\n    \n- [Code Documentation in Python](https://realpython.com/documenting-python-code/)\n\n#### Write down questions (use your tools; github issues, etc...)\n\n## 10. Go meet people!\n\n### The Python (and Data Science) community is great!\n\n#### Go to Python & Data Science meetups.\n\n- [Central Coast Python](https://www.meetup.com/central-coast-python/)\n\n#### Go to python and data science conferences.\n\n- [PyCon](https://us.pycon.org/) 2024 & 2025 will be in Pittsburgh, PA\n- [PyData](https://pydata.org) (Conferences all over the world)\n\n#### Go to hackathons.\n\n- [SB Hacks](https://www.sbhacks.com/) (UCSB)\n- [MLH (Major League Hacking)](https://mlh.io/seasons/2024/events)\n- [Hackathon.com](https://www.hackathon.com/) (Hackathons all over the world)\n","srcMarkdownNoYaml":"\n\n\n\n\n> Taken from [Talk Python to Me, Episode #427](https://talkpython.fm/episodes/show/427/10-tips-and-ideas-for-the-beginner-to-expert-python-journey), with some modifications.\n\n> Guest: Eric Matthes, author of [Python Crash Course](https://www.amazon.com/Python-Crash-Course-Eric-Matthes-ebook/dp/B09WJX22TV?ref_=ast_author_mpb),(#1 Book on Amazon in the category of Open Source Programming.)\n\n\n\n# 10 tips to move from beginner to expert\n\n## 1. Know your goals \n\n- Why are you learning python?\n\n- Why are you learning data science?\n    \n\n## 2. Have a project in mind \n\n- What do you want to do with it?\n\n- Use python to solve a problem you are interested in solving.\n\n- Don't be afraid to work on personal projects.\n\n### Some examples of my personal \"problem-solving\" projects\n\n[Biobib](https://github.com/kcaylor/biobib) - Python code to make my CV/Biobib from a google sheets/.csv file.    \n\n[Triumph](https://github.com/kcaylor/triumph) - Python notebooks for a 1959 Triumph TR3A EV conversion project.\n\n[Stoplight](https://github.com/kcaylor/stoplight) - A simple python webapp for monitoring EDS217 course pace.\n\n## 3. Don’t limit your learning to what’s needed for your project \n\n- Learn more than you need to know...\n\n    Math: [3Blue1Brown](https://www.youtube.com/@3blue1brown)\n\n    Python Data Science: [PyData](https://www.youtube.com/@PyDataTV)\n    \n    Data Visualization: [Edward Tufte](https://www.amazon.com/stores/Edward-R.-Tufte/author/B000APET3Y),  [Cole Nussbaumer-Knaflic](https://www.amazon.com/stores/Cole-Nussbaumer-Knaflic/author/B013RK32CW), [David McCandless](https://www.amazon.com/stores/David-McCandless/author/B002HYXAUY)\n    \n- Be curious about what's _possible_, not just what's _necessary_.\n    \n    ...but try to use less than you think you need\n    \n\n\n## 4. Read good code \n\n- Libraries and packages have great examples of code!\n\n- Read the _code_ (not just docs) of the packages you use.\n\n    > It's okay if you can't understand it all. Often you can understand intent, but not what the code does. \n    How would you have done it? \n    Why did the author select a different approach?\n\n- Github is a great place to find code.\n\n    \n\n\n## 5. Know your tools\n\n- Learn how to use your IDE ([VSCode](https://www.youtube.com/results?search_query=VSCode+tutorial))\n\n- Learn how to use your package manager ([conda](https://www.youtube.com/results?search_query=conda+tutorial), [mamba](https://mamba.readthedocs.io/en/latest/))\n\n- Learn how to use your shell ([bash](https://www.youtube.com/results?search_query=bash+tutorial), [powershell](https://learn.microsoft.com/en-us/training/modules/introduction-to-powershell/), [WSL](https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode))\n\n- Learn how to use your version control system ([git](https://www.youtube.com/results?search_query=git+tutorial), [Github Desktop](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop))\n\n\n## 6. Learn how to test your code \n\n- Testing code is part of writing code, and testing is a great way to learn!\n- Focus on [end-to-end](https://en.wikipedia.org/wiki/End-to-end_testing) (E2E) tests (rather than unit tests)\n\n    - **Unit tests:** \n        \n        Does it work the way you expect it to (operation-centric)?\n        \n    - **End-to-end test:** \n        \n        Does it do what you want it to do (output-centric)?\n\n[Testing for data science](https://www.youtube.com/watch?v=Da-FL_1i6ps)\n\n[Testing with PyTest for data science](https://www.youtube.com/watch?v=dY1nNtDTruE)\n\n## 7. Know what’s good enough for any given project \n\n### You're not writing code for a self-driving car or a pacemaker.\n\n- Don't over-engineer your code.\n\n- Don't over-optimize your code.\n\n- Simple is better than complex.\n\n\n\n## 8. Embrace refactoring \n\n**Refactoring** is the process of changing your code without changing its behavior.\n\n> Ship of Theseus: If you replace every part of a ship, is it still the same ship?\n\n- As you learn more, you will find better ways to do things.\n\n- Don't be afraid to change your code.\n\n- Tests (especially end-to-end tests) help you refactor with confidence.\n\n- \"Code smells\"... if it smells bad, it probably is bad.\n    - [Code Smells](https://sourcemaking.com/refactoring/smells)\n    - Comments can be a code smell; they can be a sign that your code is not clear enough.\n\n## 9. Write things down \n\n#### Keep an ideas notebook\n\n- Write down ideas for projects\n\n- Write down ideas for code\n\n#### Write comments to yourself and others\n\n#### Write documentation\n    \n- [Code Documentation in Python](https://realpython.com/documenting-python-code/)\n\n#### Write down questions (use your tools; github issues, etc...)\n\n## 10. Go meet people!\n\n### The Python (and Data Science) community is great!\n\n#### Go to Python & Data Science meetups.\n\n- [Central Coast Python](https://www.meetup.com/central-coast-python/)\n\n#### Go to python and data science conferences.\n\n- [PyCon](https://us.pycon.org/) 2024 & 2025 will be in Pittsburgh, PA\n- [PyData](https://pydata.org) (Conferences all over the world)\n\n#### Go to hackathons.\n\n- [SB Hacks](https://www.sbhacks.com/) (UCSB)\n- [MLH (Major League Hacking)](https://mlh.io/seasons/2024/events)\n- [Hackathon.com](https://www.hackathon.com/) (Hackathons all over the world)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"04-next_steps.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"How to move from a `beginner` to a `more advanced` python user"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}