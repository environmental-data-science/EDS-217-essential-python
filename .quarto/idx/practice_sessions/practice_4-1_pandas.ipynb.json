{"title":"Practice 4-1: Pandas üêº","markdown":{"yaml":{"title":"Practice 4-1: Pandas üêº"},"headingText":"Part 0. Setup Steps","containsRefs":false,"markdown":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](practice_3-1_numpy.ipynb) | [üè† Course Home](../index.ipynb) | [‚û°Ô∏è Next Session](practice_5-1_matplotlib.ipynb) |\n\n\n\n\n\n\n- Create a repo on GitHub named `eds217-practice-4-1-pandas`\n- Clone to create a version-controlled project\n- Create some subfolder infrastructure (nbs, data, figs)\n- Create and save a new ~~quarto in RStudio called~~ jupyter notebook (`.ipynb` file) named `practice_4-1_pandas.ipynb` in the `nbs` folder.\n- Open the notebook in VSCode or jupyter notebook/lab \n- Make sure to associate the notebook with the `eds217_2023` environment.\n\n\n\n\n## üìö  <b> Practice 0. </b> \n    \n- Create a cell that imports your essential data science libraries.(`numpy` as `np`, `matplotlib.pyplot` as `plt` and `pandas` as `pd`)\n\n\n## üìö  <b> Practice 1. </b> \n    \n\n### Import some radiation data for our practice session\n\nUse panda's `read_csv()` function to import the data from github and create a new DataFrame named `bsrn`\n\n```python\ndata_url = \"https://raw.githubusercontent.com/environmental-data-science\" \\\n            \"/eds217_2023/main/data/BSRN_GOB_2019-10.csv\"\n```\n\n\n## üìö  Practice 2. Using the DataFrame <code>bsrn</code>:\n<ol>\n    <li type=\"a\"> Print a list of your DataFrame's column names. </li>\n    <li type=\"a\"> How many values are there in the entire DataFrame? </li>\n    <li type=\"a\"> What is the data type of the first column? </li>\n</ol>\n\n\n## üìö  Practice 3.\n\n<ol>\n<li type=\"a\"> Create a new DataFrame containing the first record for each day and the following columns: the timestamp of the record, incoming shortwave radiation, direct and diffuse radiation, and incoming longwave radiation. \n(Hint: the BSRN station collects data every minute). \n\n<li type=\"a\"> Create a new Series containing the temperature values every hour at the top of the hour.\n\n<li type=\"a\"> Convert the `DATE` column to `datetime` using the `pd.to_datetime()` function.\n\n<li type=\"a\"> Set the `DATE` column as the index of the DataFrame using the `set_index()` method.\n\n</ol>\n\n## üìö  <b> Practice 4. \n</b> Calculate the mean incoming shortwave, outgoing shortwave, incoming longwave, and outgoing longwave radiation over the entire month.\n\n## üìö  <b> Practice 5. </b>\n<ol>\n    <li type=\"a\"> Add a column <code style='font-weight:normal'>'NET_SW'</code> to <code style='font-weight:normal'>bsrn</code> with the net shortwave radiation. </li>\n    <li type=\"a\"> Add a column <code style='font-weight:normal'>'NET_LW'</code> to <code style='font-weight:normal'>bsrn</code> with the net longwave radiation. </li>\n    <li type=\"a\"> Add a column <code style='font-weight:normal'>'NET_RAD'</code> to <code style='font-weight:normal'>bsrn</code> with the net total radiation. \n    \nNet radiation is given by the following equation: </li>\n\n$$R^{}_{N} \\, = \\,  R^{\\, \\downarrow}_{SW} \\, - \\,  R^{\\, \\uparrow}_{SW} \\, + \\, R^{\\, \\downarrow}_{LW} \\, - \\,  R^{\\, \\uparrow}_{LW}$$\n    \nwhere $R^{\\, \\downarrow}_{SW}$ and $R^{\\, \\uparrow}_{SW}$ are incoming and outgoing shortwave radiation, respectively, and $R^{\\, \\downarrow}_{LW}$ and $R^{\\, \\uparrow}_{LW}$ are incoming and outgoing longwave radiation, respectively.\n\n\n<li type=\"a\"> Create a new DataFrame with the day of the month and daily mean values of shortwave incoming, shortwave outgoing, longwave incoming, longwave outgoing radiation, and net total radiation. (Hint: use masking!).</li>\n\n```python\n# To get you started, here's some example code to create a new dataframe containing each day, and the average incoming shortwave (solar) radiation, avg_SWD (aka SW_in),  and the average outgoing shortwave (solar) radiation, avg_SWU (aka SW_out):\n\ndaily_rad = []\nfor d in bsrn.index.day.unique():\n    avg_SWD = bsrn.SWD_Wm2[bsrn.index.day == d].mean()\n    avg_SWU = bsrn.SWU_Wm2[bsrn.index.day == d].mean()\n    # Append the current day and these two values to our list of daily radiation values:\n    daily_rad.append([d, avg_SWD, avg_SWU])\n\ndaily_SW = pd.DataFrame(daily_rad, columns=['day', 'SW_in', 'SW_out'])\n\n```\n</ol>\n\n## üìö  <b> Practice 6. </b> \n\n<ol> \n\n<li type=\"a\"> Use a <code>list</code> of <code>list</code>s to construct a DataFrame named <code>df1</code> containing the data in the table below.</li>\n    \n| River       | Length $(\\text{km})$ | Drainage area $(\\text{km}^2)$ |\n|-------------|----------------------|------------------------------|\n| Amazon      | 6400                 | 7,050,000                    |\n| Congo       | 4371                 | 4,014,500                    |\n| Yangtze     | 6418                 | 1,808,500                    |\n| Mississippi | 3730                 | 3,202,230                    |\n\n\n\n<ol start=2>\n<li type=\"a\"> Use a <code>dict</code> to construct a DataFrame named <code>df2</code> containing the data in the table below.</li>\n\n\n| River   | Length $(\\text{km})$ | Drainage area $(\\text{km}^2)$ |\n|---------|----------------------|------------------------------|\n| Zambezi | 2574                 | 1,331,000                    |\n| Mekong  | 4023                 | 811,000                      |\n| Murray  | 2508                 | 1,061,469                    |\n| Rh√¥ne   | 813                  | 98,000                       |\n| Cubango | 1056                 | 530,000                      |\n\n\n</ol>\n\n\n<ol start=3>\n    <li type=\"a\"> Concatenate <code>df1</code> and <code>df2</code> into a new DataFrame with all 9 rivers.</li>\n    <li type=\"a\"> Create a new DataFrame <code>rivers</code> with the discharge, mouth, source, and continent information and add this to your DataFrame from (a) to produce a DataFrame with all of the data in the table below.</li>\n</ol>\n\n| River | Length $(\\text{km})$ | Drainage area $(\\text{km}^2)$ | Discharge $(\\text{m}^2/\\text{s})$ | Mouth | Source | Continent |\n|-------|----------------------|------------------------------|----------------------------------|-------|--------|-----------|\n| Amazon | 6400 | 7,050,000 | 209,000 | Atlantic Ocean | Rio Mantaro | South America |\n| Congo | 4371 | 4,014,500 | 41,200 | Atlantic Ocean | Lualaba River | Africa |\n| Yangtze | 6418 | 1,808,500 | 30,166 | East China Sea | Jianggendiru Glacier | Asia |\n| Mississippi | 3730 | 3,202,230 | 16,792 | Gulf of Mexico | Lake Itasca | North America |\n| Zambezi | 2574 | 1,331,000 | 3,400 | Indian Ocean | Miombo Woodlands | Africa |\n| Mekong | 4023 | 811,000 | 16,000 | South China Sea | Lasagongma Spring | Asia |\n| Murray | 2508 | 1,061,469 | 767 | Southern Ocean | Australian Alps | Oceania |\n| Rh√¥ne | 813 | 98,000 | 1,710 | Mediterranean Sea | Rh√¥ne Glacier | Europe |\n| Cubango | 1056 | 530,000 | 475 | Okavango Delta | Bi√© Plateau | Africa |\n\n\n\n##  üìö  <b> Practice 7. </b> \n\nUse the `plt` module to create a visualization of your radiation data and/or the rivers data. There are examples of plotting functions from our prior exercises. Also, don't be afraid to experiment or try using GitHub CoPilot or ChatGPT to generate some intial code.\n\n##  üìö  <b> Practice 8. </b> \n\na. Export your <code>rivers</code> DataFrame to a CSV file in your repository's data folder. \n\nb. Export your <code>bsrn</code> DataFrame to a CSV file in your repository's data folder.\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n","srcMarkdownNoYaml":"\n\n\n\n| [‚¨ÖÔ∏è Previous Session](practice_3-1_numpy.ipynb) | [üè† Course Home](../index.ipynb) | [‚û°Ô∏è Next Session](practice_5-1_matplotlib.ipynb) |\n\n\n\n\n\n## Part 0. Setup Steps\n\n- Create a repo on GitHub named `eds217-practice-4-1-pandas`\n- Clone to create a version-controlled project\n- Create some subfolder infrastructure (nbs, data, figs)\n- Create and save a new ~~quarto in RStudio called~~ jupyter notebook (`.ipynb` file) named `practice_4-1_pandas.ipynb` in the `nbs` folder.\n- Open the notebook in VSCode or jupyter notebook/lab \n- Make sure to associate the notebook with the `eds217_2023` environment.\n\n\n\n\n## üìö  <b> Practice 0. </b> \n    \n- Create a cell that imports your essential data science libraries.(`numpy` as `np`, `matplotlib.pyplot` as `plt` and `pandas` as `pd`)\n\n\n## üìö  <b> Practice 1. </b> \n    \n\n### Import some radiation data for our practice session\n\nUse panda's `read_csv()` function to import the data from github and create a new DataFrame named `bsrn`\n\n```python\ndata_url = \"https://raw.githubusercontent.com/environmental-data-science\" \\\n            \"/eds217_2023/main/data/BSRN_GOB_2019-10.csv\"\n```\n\n\n## üìö  Practice 2. Using the DataFrame <code>bsrn</code>:\n<ol>\n    <li type=\"a\"> Print a list of your DataFrame's column names. </li>\n    <li type=\"a\"> How many values are there in the entire DataFrame? </li>\n    <li type=\"a\"> What is the data type of the first column? </li>\n</ol>\n\n\n## üìö  Practice 3.\n\n<ol>\n<li type=\"a\"> Create a new DataFrame containing the first record for each day and the following columns: the timestamp of the record, incoming shortwave radiation, direct and diffuse radiation, and incoming longwave radiation. \n(Hint: the BSRN station collects data every minute). \n\n<li type=\"a\"> Create a new Series containing the temperature values every hour at the top of the hour.\n\n<li type=\"a\"> Convert the `DATE` column to `datetime` using the `pd.to_datetime()` function.\n\n<li type=\"a\"> Set the `DATE` column as the index of the DataFrame using the `set_index()` method.\n\n</ol>\n\n## üìö  <b> Practice 4. \n</b> Calculate the mean incoming shortwave, outgoing shortwave, incoming longwave, and outgoing longwave radiation over the entire month.\n\n## üìö  <b> Practice 5. </b>\n<ol>\n    <li type=\"a\"> Add a column <code style='font-weight:normal'>'NET_SW'</code> to <code style='font-weight:normal'>bsrn</code> with the net shortwave radiation. </li>\n    <li type=\"a\"> Add a column <code style='font-weight:normal'>'NET_LW'</code> to <code style='font-weight:normal'>bsrn</code> with the net longwave radiation. </li>\n    <li type=\"a\"> Add a column <code style='font-weight:normal'>'NET_RAD'</code> to <code style='font-weight:normal'>bsrn</code> with the net total radiation. \n    \nNet radiation is given by the following equation: </li>\n\n$$R^{}_{N} \\, = \\,  R^{\\, \\downarrow}_{SW} \\, - \\,  R^{\\, \\uparrow}_{SW} \\, + \\, R^{\\, \\downarrow}_{LW} \\, - \\,  R^{\\, \\uparrow}_{LW}$$\n    \nwhere $R^{\\, \\downarrow}_{SW}$ and $R^{\\, \\uparrow}_{SW}$ are incoming and outgoing shortwave radiation, respectively, and $R^{\\, \\downarrow}_{LW}$ and $R^{\\, \\uparrow}_{LW}$ are incoming and outgoing longwave radiation, respectively.\n\n\n<li type=\"a\"> Create a new DataFrame with the day of the month and daily mean values of shortwave incoming, shortwave outgoing, longwave incoming, longwave outgoing radiation, and net total radiation. (Hint: use masking!).</li>\n\n```python\n# To get you started, here's some example code to create a new dataframe containing each day, and the average incoming shortwave (solar) radiation, avg_SWD (aka SW_in),  and the average outgoing shortwave (solar) radiation, avg_SWU (aka SW_out):\n\ndaily_rad = []\nfor d in bsrn.index.day.unique():\n    avg_SWD = bsrn.SWD_Wm2[bsrn.index.day == d].mean()\n    avg_SWU = bsrn.SWU_Wm2[bsrn.index.day == d].mean()\n    # Append the current day and these two values to our list of daily radiation values:\n    daily_rad.append([d, avg_SWD, avg_SWU])\n\ndaily_SW = pd.DataFrame(daily_rad, columns=['day', 'SW_in', 'SW_out'])\n\n```\n</ol>\n\n## üìö  <b> Practice 6. </b> \n\n<ol> \n\n<li type=\"a\"> Use a <code>list</code> of <code>list</code>s to construct a DataFrame named <code>df1</code> containing the data in the table below.</li>\n    \n| River       | Length $(\\text{km})$ | Drainage area $(\\text{km}^2)$ |\n|-------------|----------------------|------------------------------|\n| Amazon      | 6400                 | 7,050,000                    |\n| Congo       | 4371                 | 4,014,500                    |\n| Yangtze     | 6418                 | 1,808,500                    |\n| Mississippi | 3730                 | 3,202,230                    |\n\n\n\n<ol start=2>\n<li type=\"a\"> Use a <code>dict</code> to construct a DataFrame named <code>df2</code> containing the data in the table below.</li>\n\n\n| River   | Length $(\\text{km})$ | Drainage area $(\\text{km}^2)$ |\n|---------|----------------------|------------------------------|\n| Zambezi | 2574                 | 1,331,000                    |\n| Mekong  | 4023                 | 811,000                      |\n| Murray  | 2508                 | 1,061,469                    |\n| Rh√¥ne   | 813                  | 98,000                       |\n| Cubango | 1056                 | 530,000                      |\n\n\n</ol>\n\n\n<ol start=3>\n    <li type=\"a\"> Concatenate <code>df1</code> and <code>df2</code> into a new DataFrame with all 9 rivers.</li>\n    <li type=\"a\"> Create a new DataFrame <code>rivers</code> with the discharge, mouth, source, and continent information and add this to your DataFrame from (a) to produce a DataFrame with all of the data in the table below.</li>\n</ol>\n\n| River | Length $(\\text{km})$ | Drainage area $(\\text{km}^2)$ | Discharge $(\\text{m}^2/\\text{s})$ | Mouth | Source | Continent |\n|-------|----------------------|------------------------------|----------------------------------|-------|--------|-----------|\n| Amazon | 6400 | 7,050,000 | 209,000 | Atlantic Ocean | Rio Mantaro | South America |\n| Congo | 4371 | 4,014,500 | 41,200 | Atlantic Ocean | Lualaba River | Africa |\n| Yangtze | 6418 | 1,808,500 | 30,166 | East China Sea | Jianggendiru Glacier | Asia |\n| Mississippi | 3730 | 3,202,230 | 16,792 | Gulf of Mexico | Lake Itasca | North America |\n| Zambezi | 2574 | 1,331,000 | 3,400 | Indian Ocean | Miombo Woodlands | Africa |\n| Mekong | 4023 | 811,000 | 16,000 | South China Sea | Lasagongma Spring | Asia |\n| Murray | 2508 | 1,061,469 | 767 | Southern Ocean | Australian Alps | Oceania |\n| Rh√¥ne | 813 | 98,000 | 1,710 | Mediterranean Sea | Rh√¥ne Glacier | Europe |\n| Cubango | 1056 | 530,000 | 475 | Okavango Delta | Bi√© Plateau | Africa |\n\n\n\n##  üìö  <b> Practice 7. </b> \n\nUse the `plt` module to create a visualization of your radiation data and/or the rivers data. There are examples of plotting functions from our prior exercises. Also, don't be afraid to experiment or try using GitHub CoPilot or ChatGPT to generate some intial code.\n\n##  üìö  <b> Practice 8. </b> \n\na. Export your <code>rivers</code> DataFrame to a CSV file in your repository's data folder. \n\nb. Export your <code>bsrn</code> DataFrame to a CSV file in your repository's data folder.\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"practice_4-1_pandas.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Practice 4-1: Pandas üêº"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}