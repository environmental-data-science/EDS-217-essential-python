{"title":"Practice 2-1: Control Flow Statements","markdown":{"yaml":{"title":"Practice 2-1: Control Flow Statements"},"headingText":"📚  Practice 1","containsRefs":false,"markdown":"\n\n\n\n| [⬅️ Previous Session](practice_1-2_lists.ipynb) | [🏠 Course Home](../index.ipynb) | [➡️ Next Session](practice_2-2_structured_data.ipynb) |\n\n\n![control.jpeg](assets/control.jpeg)\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n\n\nIn programs, <code>if</code> statements are useful for catching errors due to user input. \n\nDefine two new variables based on user input using the `input` function. \n\n The first `input` should prompt for a temperature value and the second `input` should prompting for the units as \"F\" or \"C\". \n\nUsing the equation below, write an <code>if</code> statement that converts the temperature input to °C if it was given in °F or to °F if given in °C. Recall that all variables assigned based on user input are strings (type is `str`), so you will need to convert the result of your first `input` statement into a `float`. \n\nBe sure to comment your code.\n    \nFormula for conversion between °F and °C:\n    $$T_{^{\\circ} C} = (T_{^{\\circ} F} - 32) \\times 5/9$$\n\n\n\nDescribe your strategy here before attempting to write any code: \n\n## 📚  Practice 2. \n\nUsing nested <code>if</code> statements and your code from Practice question #1, convert the user input temperature to the opposite units (°F to °C or vice versa), print a statement to the user that reports the temperature in the converted units and indicates whether or not the temperature below freezing. \n\nYour print statement should look something like:\n\n<code>The temperature is {__}°C/F. It is (not) below freezing.</code>\n\n\n\nDescribe your strategy here:\n\n\n## 📚  <b> Practice 3. </b> \n\n<ol>\n<li type=\"a\"> The six organic elements are 'C', 'H', 'N', 'O', 'P', and 'S'. Look up their atomic masses and create two lists; one containing the list of elements and the other containing their corresponding masses. \n\n\n<li type=\"a\"> Use <code>enumerate()</code> in a <code>for</code> loop to print a formatted statement that expresses the atomic mass of of each element. Your formatted `print` statement inside the for `loop` should include the name of the element and it's corresponding atomic mass.\n\n\n\nDescribe your strategy here:\n\n\n\n## 📚  <b> Practice 4. </b> \nThe cell below contains monthly global land-ocean surface temperature in °F for each month during the years 2015-2021. Run the cell before starting on the problem below.\n\n\n\n\n<ol start=\"b\">\n\n<li type=\"a\"> Use a <code>zip</code> command to create a <code>for</code> loop that prints out the data across all years for each month. Modify the code below so it would work for your problem:\n\n```python\n\n# The following lists include exam scores for 10 students across \n# two assessments. Each item in the list corresponds to the same student.\n#\n# For example, the third student's grades are:\n#       midterm_grades[2] and final_grades[2] and \n\nmidterm_grades = [88, 90, 97, 80, 85,  96, 79, 88, 85, 95]\nfinal_grades =    [99, 87, 93, 86, 81, 100, 87, 91, 76, 90]\nhomework_grades = [90, 98, 96, 89, 92, 99, 90, 87, 96, 100]\n\n# Use zip to print each student's grades:\nfor midterm_grade, final_grade, homework_grade in zip(midterm_grades, final_grades, homework_grades):\n    print(f\"Midterm: {midterm_grade}, Final: {final_grade}, Homework: {homework_grade}\")\n\n```\n\n\n<ol start=2>\n<li type=\"a\"> Alter your <code>for</code> loop so that instead of printing the values, you instead obtain an average of each month's temperature across all the years of data. Again, here's what that would look like for our student grades:\n\nNote: The loop below puts all the iterators produced by the `zip` command into a single temporary variable, `student_grades`. Storing them all together in one collection makes it easier to average the values.\n\n```python\n\navg_student_grades = []\nfor student_grades in zip(midterm_grades, final_grades, homework_grades):\n    print(f\"This student's grades: {student_grades}\")\n    # Take the mean using np.mean:\n    this_student_average = np.mean(student_grades)\n    # Append this average to the list of avg_student_grades:\n    avg_student_grades.append(this_student_average)\n\n```\n\n\n<ol start=3>\n\n<li type=\"a\"> The mean global surface temperature calculated over the 20th century was 15.6°C. Convert the average monthly temperatures you obtained in the previous step from Farenheit to Celcius. In addition, subtract the mean global surface temperature from each average value to determine the average monthly anomaly from the global average temperature.\n\n\n<ol start=4>\n<li type=\"a\"> Create a new list containing month labels:\n\n```python\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n```\n<li type=\"a\"> Use this list of `months` and your calculated average monthly anomalies to create a bar graph showing the average anomalies for each month. The `plt.bar` function requires at least two arguments: `x` and `y` values. Using our student grade examples, the following code would make a bar graph showing each student's average grade:\n\n```python\n\n# Use range to create x data (student 1-10)\nplt.bar(range(1,11), avg_student_grades)\n\n# Add axes labels\nplt.xlabel('Student Number')\nplt.ylabel('Average Grade')\n\n# Add a title\nplt.title('Average Student Grades')\n\n```\n\n\n<ol start=6>\n<li type=\"a\"> Does the graph look like what you expected? Why do you think you see the patterns that emerge from this analysis?\n\n</ol>\n</div>\n\nWrite your answer here: \n","srcMarkdownNoYaml":"\n\n\n\n| [⬅️ Previous Session](practice_1-2_lists.ipynb) | [🏠 Course Home](../index.ipynb) | [➡️ Next Session](practice_2-2_structured_data.ipynb) |\n\n\n![control.jpeg](assets/control.jpeg)\n\n<hr style=\"border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px\"></hr>\n\n\n\n\n## 📚  Practice 1\n\nIn programs, <code>if</code> statements are useful for catching errors due to user input. \n\nDefine two new variables based on user input using the `input` function. \n\n The first `input` should prompt for a temperature value and the second `input` should prompting for the units as \"F\" or \"C\". \n\nUsing the equation below, write an <code>if</code> statement that converts the temperature input to °C if it was given in °F or to °F if given in °C. Recall that all variables assigned based on user input are strings (type is `str`), so you will need to convert the result of your first `input` statement into a `float`. \n\nBe sure to comment your code.\n    \nFormula for conversion between °F and °C:\n    $$T_{^{\\circ} C} = (T_{^{\\circ} F} - 32) \\times 5/9$$\n\n\n\nDescribe your strategy here before attempting to write any code: \n\n## 📚  Practice 2. \n\nUsing nested <code>if</code> statements and your code from Practice question #1, convert the user input temperature to the opposite units (°F to °C or vice versa), print a statement to the user that reports the temperature in the converted units and indicates whether or not the temperature below freezing. \n\nYour print statement should look something like:\n\n<code>The temperature is {__}°C/F. It is (not) below freezing.</code>\n\n\n\nDescribe your strategy here:\n\n\n## 📚  <b> Practice 3. </b> \n\n<ol>\n<li type=\"a\"> The six organic elements are 'C', 'H', 'N', 'O', 'P', and 'S'. Look up their atomic masses and create two lists; one containing the list of elements and the other containing their corresponding masses. \n\n\n<li type=\"a\"> Use <code>enumerate()</code> in a <code>for</code> loop to print a formatted statement that expresses the atomic mass of of each element. Your formatted `print` statement inside the for `loop` should include the name of the element and it's corresponding atomic mass.\n\n\n\nDescribe your strategy here:\n\n\n\n## 📚  <b> Practice 4. </b> \nThe cell below contains monthly global land-ocean surface temperature in °F for each month during the years 2015-2021. Run the cell before starting on the problem below.\n\n\n\n\n<ol start=\"b\">\n\n<li type=\"a\"> Use a <code>zip</code> command to create a <code>for</code> loop that prints out the data across all years for each month. Modify the code below so it would work for your problem:\n\n```python\n\n# The following lists include exam scores for 10 students across \n# two assessments. Each item in the list corresponds to the same student.\n#\n# For example, the third student's grades are:\n#       midterm_grades[2] and final_grades[2] and \n\nmidterm_grades = [88, 90, 97, 80, 85,  96, 79, 88, 85, 95]\nfinal_grades =    [99, 87, 93, 86, 81, 100, 87, 91, 76, 90]\nhomework_grades = [90, 98, 96, 89, 92, 99, 90, 87, 96, 100]\n\n# Use zip to print each student's grades:\nfor midterm_grade, final_grade, homework_grade in zip(midterm_grades, final_grades, homework_grades):\n    print(f\"Midterm: {midterm_grade}, Final: {final_grade}, Homework: {homework_grade}\")\n\n```\n\n\n<ol start=2>\n<li type=\"a\"> Alter your <code>for</code> loop so that instead of printing the values, you instead obtain an average of each month's temperature across all the years of data. Again, here's what that would look like for our student grades:\n\nNote: The loop below puts all the iterators produced by the `zip` command into a single temporary variable, `student_grades`. Storing them all together in one collection makes it easier to average the values.\n\n```python\n\navg_student_grades = []\nfor student_grades in zip(midterm_grades, final_grades, homework_grades):\n    print(f\"This student's grades: {student_grades}\")\n    # Take the mean using np.mean:\n    this_student_average = np.mean(student_grades)\n    # Append this average to the list of avg_student_grades:\n    avg_student_grades.append(this_student_average)\n\n```\n\n\n<ol start=3>\n\n<li type=\"a\"> The mean global surface temperature calculated over the 20th century was 15.6°C. Convert the average monthly temperatures you obtained in the previous step from Farenheit to Celcius. In addition, subtract the mean global surface temperature from each average value to determine the average monthly anomaly from the global average temperature.\n\n\n<ol start=4>\n<li type=\"a\"> Create a new list containing month labels:\n\n```python\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n```\n<li type=\"a\"> Use this list of `months` and your calculated average monthly anomalies to create a bar graph showing the average anomalies for each month. The `plt.bar` function requires at least two arguments: `x` and `y` values. Using our student grade examples, the following code would make a bar graph showing each student's average grade:\n\n```python\n\n# Use range to create x data (student 1-10)\nplt.bar(range(1,11), avg_student_grades)\n\n# Add axes labels\nplt.xlabel('Student Number')\nplt.ylabel('Average Grade')\n\n# Add a title\nplt.title('Average Student Grades')\n\n```\n\n\n<ol start=6>\n<li type=\"a\"> Does the graph look like what you expected? Why do you think you see the patterns that emerge from this analysis?\n\n</ol>\n</div>\n\nWrite your answer here: \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","toc":true,"css":["styles/activities.css"],"include-before-body":["../header.html"],"output-file":"practice_2-1_control_flow_statements.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","toc-location":"left","title":"Practice 2-1: Control Flow Statements"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}